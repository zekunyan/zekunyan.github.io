<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>土土哥的技术Blog</title>
  <subtitle>iOS，Android程序猿，喜欢Mac、Linux、各种开源技术，各种语言</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tutuge.me/"/>
  <updated>2016-06-19T20:25:28.000Z</updated>
  <id>http://tutuge.me/</id>
  
  <author>
    <name>燕泽堃</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>翻译-为什么objc_msgSend必须用汇编实现</title>
    <link href="http://tutuge.me/2016/06/19/translation-why-objcmsgsend-must-be-written-in-assembly/"/>
    <id>http://tutuge.me/2016/06/19/translation-why-objcmsgsend-must-be-written-in-assembly/</id>
    <published>2016-06-18T16:19:23.000Z</published>
    <updated>2016-06-19T20:25:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;译者前言&quot;&gt;&lt;a href=&quot;#译者前言&quot; class=&quot;headerlink&quot; title=&quot;译者前言&quot;&gt;&lt;/a&gt;译者前言&lt;/h2&gt;&lt;p&gt;总是看到有人说用汇编实现&lt;code&gt;objc_msgSend&lt;/code&gt;是为了速度快，当然这个不可否认。但是难道没有别的原因？于是就看到了这篇文章，遂翻译之！=。=&lt;br&gt;我自己的理解就是，用汇编实现，是为了应对不同的“&lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calling convention&lt;/a&gt;”，把函数调用前的栈和寄存器的参数、状态设置，交给编译器去处理。&lt;br&gt;先看看原文吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原作者: &lt;a href=&quot;https://www.linkedin.com/in/ari-grant-789a1015&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ari Grant&lt;/a&gt;&lt;br&gt;原文链接: &lt;a href=&quot;http://arigrant.com/blog/2014/2/12/why-objcmsgsend-must-be-written-in-assembly&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why objc_msgSend Must be Written in Assembly&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;对于Objective-C来说，调用一个对象实例的方法，也叫作向这个对象实例&lt;strong&gt;“发送消息”&lt;/strong&gt;，而每条“消息”，在编译阶段都会转变为一次对&lt;code&gt;objc_msgSend&lt;/code&gt;函数的调用，调用的参数不仅有原本消息的所有参数，还有消息的接收者&lt;code&gt;receiver&lt;/code&gt;和对应的方法&lt;code&gt;selector&lt;/code&gt;。举个例子，下面的语句：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[receiver &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;foo &lt;span class=&quot;string&quot;&gt;beforeDate:&lt;/span&gt;bar];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将会被编译成：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objc_msgSend(&lt;span class=&quot;name&quot;&gt;receiver&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:beforeDate&lt;/span&gt;:), foo, bar)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于&lt;code&gt;objc_msgSend&lt;/code&gt;函数的实现原理，前人已经做了大量的探索。所以，本文将会把重点放在&lt;code&gt;objc_msgSend&lt;/code&gt;的一个之前没有太受到关注的点上，那就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;objc_msgSend&lt;/code&gt;是不可能用Objective-C、C或者C++实现的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;THE-RETURN-TYPE-返回类型&quot;&gt;&lt;a href=&quot;#THE-RETURN-TYPE-返回类型&quot; class=&quot;headerlink&quot; title=&quot;THE RETURN TYPE - 返回类型&quot;&gt;&lt;/a&gt;THE RETURN TYPE - 返回类型&lt;/h2&gt;&lt;p&gt;先看看如下两行代码： &lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSUInteger n = [array &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id obj = [array objectAtIndex:&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直观上看，将会被编译成：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSUInteger n = objc_msgSend(&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;,  @selector(&lt;span class=&quot;name&quot;&gt;count&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id obj = objc_msgSend(&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;objectAtIndex&lt;/span&gt;:), &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是实际上这是不可能的，因为没有函数可以同时满足这两个调用。而且它的返回值也不能同时是&lt;code&gt;NSUInteger&lt;/code&gt;和&lt;code&gt;id&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而且，上面的代码也是无法编译通过的。那么，加上类型转换怎么样？&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSUInteger n = (&lt;span class=&quot;name&quot;&gt;NSUInteger&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt;)(&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;, SEL))objc_msgSend(&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;,  @selector(&lt;span class=&quot;name&quot;&gt;count&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id obj = (&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;*&lt;/span&gt;)(&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;, SEL, NSUInteger))objc_msgSend(&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;objectAtIndex&lt;/span&gt;:), &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这下可以编译通过了，虽然看起来不直观。。。&lt;br&gt;&lt;code&gt;objc_msgSend&lt;/code&gt;是一个Public的函数，在&lt;code&gt;&amp;lt;objc/message.h&amp;gt;&lt;/code&gt;里声明，如果你想直接调用它，就必须按照上面的格式加上强制类型转换，要不然是无法编译通过的。但是&lt;code&gt;objc_msgSend&lt;/code&gt;到底是如何实现，来支持各种返回类型的？本文后面会讲到。&lt;/p&gt;
&lt;h2 id=&quot;THE-IMP-方法对应的函数指针&quot;&gt;&lt;a href=&quot;#THE-IMP-方法对应的函数指针&quot; class=&quot;headerlink&quot; title=&quot;THE IMP - 方法对应的函数指针&quot;&gt;&lt;/a&gt;THE IMP - 方法对应的函数指针&lt;/h2&gt;&lt;p&gt;&lt;code&gt;objc_msgSend&lt;/code&gt;函数的本质很简单，传入一个接受者对象实例&lt;code&gt;receiver&lt;/code&gt;和方法名&lt;code&gt;selector&lt;/code&gt;，它就会按照以下步骤执行：（译者注：只是最粗略的步骤=。=）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取&lt;code&gt;receiver&lt;/code&gt;得类Class&lt;/li&gt;
&lt;li&gt;在Class的方法列表method table里面查找对应&lt;code&gt;selector&lt;/code&gt;的方法实现&lt;/li&gt;
&lt;li&gt;找到的话就调用，返回&lt;/li&gt;
&lt;li&gt;找不到就在其父类中找，重复前面的步骤（直到没有父类为止）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个流程很简单，沿着继承链，向上找到方法&lt;code&gt;selector&lt;/code&gt;对应的函数指针即可，也就是&lt;code&gt;IMP&lt;/code&gt;。同时，在每层Class中都有缓存，加快后续的方法查找。但是，这也只是&lt;code&gt;objc_msgSend&lt;/code&gt;的实现细节，所以，接着往下看。&lt;/p&gt;
&lt;h2 id=&quot;THE-ARG-TYPES-AND-COUNT-参数类型和数量&quot;&gt;&lt;a href=&quot;#THE-ARG-TYPES-AND-COUNT-参数类型和数量&quot; class=&quot;headerlink&quot; title=&quot;THE ARG TYPES AND COUNT - 参数类型和数量&quot;&gt;&lt;/a&gt;THE ARG TYPES AND COUNT - 参数类型和数量&lt;/h2&gt;&lt;p&gt;简单来说，当&lt;code&gt;objc_msgSend&lt;/code&gt;找到对应的函数指针后，只要用传入的参数调用这个函数即可。剩下来的就是找到一种方法，可以调用任意参数类型、数量的任意函数。&lt;br&gt;参数的数量很容易计算。然后我们可以把所有的参数都放入&lt;code&gt;varargs&lt;/code&gt;，然后调用函数时传入即可。但是这样的话，每个Objective-C的方法都必须在其&lt;code&gt;prologue&lt;/code&gt;（译者注：函数执行具体的“任务”前，所做的准备环节）里面把所有的参数从&lt;code&gt;varargs&lt;/code&gt;里面提取出来。&lt;br&gt;这种把参数打包到&lt;code&gt;varargs&lt;/code&gt;里面然后又取出来的办法显然是非常糟糕的，同时也是不必要的。&lt;/p&gt;
&lt;p&gt;在C语言中，调用一个函数会被编译成对应的汇编语言指令，首先是设置参数（把参数放到寄存器、栈上），然后用如&lt;code&gt;jump&lt;/code&gt;或者&lt;code&gt;call&lt;/code&gt;的指令，跳到具体的函数代码地址处。如果我们想支持任意类型的函数类型，我们就必须写一个&lt;code&gt;switch&lt;/code&gt;语句，把所有的参数组合情况都包含起来，这样才能正确的为任何形式的函数设置参数（译者注：即按照某种&lt;strong&gt;“规范”、“约定”&lt;/strong&gt;，把参数依次存放到“约定”的寄存器、栈上），这显然是没有扩展性的，更是不可能的。&lt;/p&gt;
&lt;h2 id=&quot;UNWINDING-THE-CALL-拆解调用&quot;&gt;&lt;a href=&quot;#UNWINDING-THE-CALL-拆解调用&quot; class=&quot;headerlink&quot; title=&quot;UNWINDING THE CALL - 拆解调用&quot;&gt;&lt;/a&gt;UNWINDING THE CALL - 拆解调用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;objc_msgSend&lt;/code&gt;的解决办法，主要依据的是：&lt;strong&gt;当objc_msgSend被调用时，所有的参数已经被设置好了&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;换一种方式来说，就是：&lt;strong&gt;在objc_msgSend开始执行时，栈帧（stack frame）的状态、数据，和各个寄存器的组合形式、数据，跟调用具体的函数指针（IMP）时所需的状态、数据，是完全一致的！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下这行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id obj = objc_msgSend(&lt;span class=&quot;name&quot;&gt;array&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;objectAtIndex&lt;/span&gt;:), &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在调用&lt;code&gt;objc_msgSend&lt;/code&gt;时，需要设置三个参数，分别是被调用方&lt;code&gt;receiver&lt;/code&gt;、方法名&lt;code&gt;selector&lt;/code&gt;和最后一个整型参数6。这和具体的方法函数IMP的参数顺序、类型是完全一致的，也就是说，&lt;strong&gt;调用&lt;code&gt;objc_msgSend&lt;/code&gt;前，设置的栈、寄存器的状态、数据正是调用具体的方法函数时需要的状态！&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;所以，当&lt;code&gt;objc_msgSend&lt;/code&gt;找到要调用的函数实现IMP后，只需要把所有的对栈、寄存器的操作“倒”回到&lt;code&gt;objc_msgSend&lt;/code&gt;执行开始的状态（类似于函数执行完成return返回前，做的“收尾处理”工作一样，即epilogue），直接&lt;code&gt;jump/call&lt;/code&gt;到IMP函数指针对应的地址，执行指令即可，因为所有的参数已经被设置好了。&lt;/p&gt;
&lt;p&gt;同时，当&lt;code&gt;selector&lt;/code&gt;对应的IMP执行完成后，返回值也被正确的设置好了（在x86平台上，返回值被设置到了指定的寄存器&lt;code&gt;eax/rax&lt;/code&gt;里，在arm上，则是&lt;code&gt;r0&lt;/code&gt;寄存器），所以，我们也不必担心前文提到的不同类型的返回值问题了。&lt;/p&gt;
&lt;h2 id=&quot;WRAP-UP-总结&quot;&gt;&lt;a href=&quot;#WRAP-UP-总结&quot; class=&quot;headerlink&quot; title=&quot;WRAP UP - 总结&quot;&gt;&lt;/a&gt;WRAP UP - 总结&lt;/h2&gt;&lt;p&gt;把上面提到的所有解释综合起来，就是：在C语言里面调用函数，必须在编译时就知道调用的“状态”；而这些“状态”在运行时是无法得出或正确处理的，所以必须往底层走，用汇编处理。（译者注：这里不知道咋翻译好=。=，原文是：calling a function in C requires the signature to be known for each call-site at compile-time；doing so at run-time is not possible and so one must drop down into assembly and party there instead.）&lt;/p&gt;
&lt;h2 id=&quot;UPDATE-后续&quot;&gt;&lt;a href=&quot;#UPDATE-后续&quot; class=&quot;headerlink&quot; title=&quot;UPDATE - 后续&quot;&gt;&lt;/a&gt;UPDATE - 后续&lt;/h2&gt;&lt;p&gt;有人指出&lt;code&gt;objc_msgSend&lt;/code&gt;有可能是用GCC的扩展方法&lt;code&gt;__builtin_apply_args&lt;/code&gt;，&lt;code&gt;__builtin_apply&lt;/code&gt;，和&lt;code&gt;__builtin_return&lt;/code&gt;实现的。这也正指出了一个事实，就是这些builtins方法是非常有必要的，因为单靠语言本身无法实现这些功能。实现&lt;code&gt;objc_msgSend&lt;/code&gt;所需要的技巧，也正是实现这些builtins方法所需要的技巧。本文的目的并不是非要将什么是真正的C、什么不是真正的C分个清楚，只是为了指出&lt;code&gt;objc_msgSend&lt;/code&gt;特殊罢了。&lt;/p&gt;
&lt;h2 id=&quot;译者总结&quot;&gt;&lt;a href=&quot;#译者总结&quot; class=&quot;headerlink&quot; title=&quot;译者总结&quot;&gt;&lt;/a&gt;译者总结&lt;/h2&gt;&lt;p&gt;开头也说了，我的理解是：用汇编实现，是为了应对不同的“&lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calling convention&lt;/a&gt;”，把函数调用前的栈和寄存器的参数、状态设置，交给编译器去处理。  &lt;/p&gt;
&lt;p&gt;嗯，以后不要再说用汇编实现只是为了快了=。=&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;译者前言&quot;&gt;&lt;a href=&quot;#译者前言&quot; class=&quot;headerlink&quot; title=&quot;译者前言&quot;&gt;&lt;/a&gt;译者前言&lt;/h2&gt;&lt;p&gt;总是看到有人说用汇编实现&lt;code&gt;objc_msgSend&lt;/code&gt;是为了速度快，当然这个不可否认。但是难道没有别的原因？于是就看到了这篇文章，遂翻译之！=。=&lt;br&gt;我自己的理解就是，用汇编实现，是为了应对不同的“&lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention&quot;&gt;Calling convention&lt;/a&gt;”，把函数调用前的栈和寄存器的参数、状态设置，交给编译器去处理。&lt;br&gt;先看看原文吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原作者: &lt;a href=&quot;https://www.linkedin.com/in/ari-grant-789a1015&quot;&gt;Ari Grant&lt;/a&gt;&lt;br&gt;原文链接: &lt;a href=&quot;http://arigrant.com/blog/2014/2/12/why-objcmsgsend-must-be-written-in-assembly&quot;&gt;Why objc_msgSend Must be Written in Assembly&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="翻译" scheme="http://tutuge.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>API返回结果设计经验与总结</title>
    <link href="http://tutuge.me/2016/05/02/design-json-api-respoense/"/>
    <id>http://tutuge.me/2016/05/02/design-json-api-respoense/</id>
    <published>2016-05-02T02:44:49.000Z</published>
    <updated>2016-05-03T09:09:07.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;RESTful API的设计已经很成熟了，大家也都比较认可。本文也不再过多介绍RESTful API相关的知识，而是针对JSON型API的返回结果设计，总结下自己的经验。&lt;/p&gt;
&lt;h2 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h2&gt;&lt;p&gt;先来看看返回结果的结构示例：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt; : &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 请求数据，对象或数组均可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;user_id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;user_name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;user_avatar_url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://tutuge.me/avatar.jpg&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;msg&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;done&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 请求状态描述，调试用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 业务自定义状态码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;extra&lt;/span&gt; : &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 全局附加数据，字段、内容不定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;签到成功！&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;data字段-请求数据&quot;&gt;&lt;a href=&quot;#data字段-请求数据&quot; class=&quot;headerlink&quot; title=&quot;data字段 - 请求数据&quot;&gt;&lt;/a&gt;data字段 - 请求数据&lt;/h3&gt;&lt;p&gt;首先是本次请求结果的数据&lt;code&gt;data&lt;/code&gt;字段，其值为对象（字典）或数组均可以，根据业务而定。&lt;/p&gt;
&lt;p&gt;如请求的是某个用户的个人profile信息，就可以是对象，对象里面是用户profile的键值对数据，如&lt;code&gt;user_id: 123&lt;/code&gt;、&lt;code&gt;user_name: &amp;quot;tutuge&amp;quot;&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;如果请求的是列表数据，就可以是数组，如请求用户列表：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;data:&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;user_id:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;user_name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;user_id:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;321&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;user_name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;zekunyan&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组、对象，相互嵌套，灵活组合即可。&lt;/p&gt;
&lt;p&gt;对于iOS来说，解析&lt;code&gt;data&lt;/code&gt;字段是对象还是数组也很容易，在接收到JSON数据字典后，如AFNetworking的返回结果，对&lt;code&gt;data&lt;/code&gt;判断其类型即可：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([jsonDict[@&lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt;] &lt;span class=&quot;string&quot;&gt;isKindOfClass:&lt;/span&gt;[NSDictionary &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// JSON对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([jsonDict[@&lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt;] &lt;span class=&quot;string&quot;&gt;isKindOfClass:&lt;/span&gt;[NSArray &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// JSON数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;msg字段-请求状态描述，调试用&quot;&gt;&lt;a href=&quot;#msg字段-请求状态描述，调试用&quot; class=&quot;headerlink&quot; title=&quot;msg字段 - 请求状态描述，调试用&quot;&gt;&lt;/a&gt;msg字段 - 请求状态描述，调试用&lt;/h3&gt;&lt;p&gt;&lt;code&gt;msg&lt;/code&gt;字段是本次请求的业务、状态描述信息，主要用于调试、测试等。&lt;/p&gt;
&lt;p&gt;如“done”、“请求缺少参数！”&lt;/p&gt;
&lt;p&gt;服务端可以自由发挥，开发人员看得懂就好。 -_-|||&lt;/p&gt;
&lt;h3 id=&quot;code字段-业务自定义状态码&quot;&gt;&lt;a href=&quot;#code字段-业务自定义状态码&quot; class=&quot;headerlink&quot; title=&quot;code字段 - 业务自定义状态码&quot;&gt;&lt;/a&gt;code字段 - 业务自定义状态码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;code&lt;/code&gt;字段，业务自定义的状态码。&lt;/p&gt;
&lt;p&gt;其实是否要在API里面自定义业务状态码，&lt;strong&gt;非常有争议&lt;/strong&gt;=。=，因为Http请求本身已经有了完备的状态码，再定义一套状态码直观上感受却是不对劲。但是实际开发中，确实发现自定义业务状态码的必要性，如一次成功的Http status 200的请求，可能由于用户未登录、登录过期而有不同的返回结果和处理方式，所以还是保留了&lt;code&gt;code&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;状态码的定义也最好有一套规范，如按照用户相关、授权相关、各种业务，做简单的分类：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Code 业务自定义状态码定义示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 授权相关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt;: 无权限访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1002&lt;/span&gt;: access_token过期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1003&lt;/span&gt;: unique_token无效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 用户相关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2001&lt;/span&gt;: 未登录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2002&lt;/span&gt;: 用户信息错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2003&lt;/span&gt;: 用户不存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 业务1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3001&lt;/span&gt;: 业务&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;XXX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3002&lt;/span&gt;: 业务&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;XXX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Code&lt;/code&gt;业务状态码最好是用常量定义的，当然有能力的动态配置更新更好，这里就不再详细说明。&lt;/p&gt;
&lt;p&gt;Http的状态码参考：&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List of HTTP status codes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;extra字段-全局附加数据&quot;&gt;&lt;a href=&quot;#extra字段-全局附加数据&quot; class=&quot;headerlink&quot; title=&quot;extra字段 - 全局附加数据&quot;&gt;&lt;/a&gt;extra字段 - 全局附加数据&lt;/h3&gt;&lt;p&gt;&lt;code&gt;extra&lt;/code&gt;字段，用来表示全局的附加数据。&lt;/p&gt;
&lt;p&gt;这个字段来源于之前做项目时，用户的操作（数据请求），会导致用户的等级、经验变化，而具体什么时候产生不确定，由服务端的规则决定，并且客户端要及时向用户展示变化，所以加上了&lt;code&gt;extra&lt;/code&gt;字段。&lt;/p&gt;
&lt;p&gt;在设计&lt;code&gt;extra&lt;/code&gt;字段的时候，并没有对其结构内容做限制，所以比较灵活，但是还是要有个&lt;code&gt;type&lt;/code&gt;字段，来做约束，如：&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 升级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;show_msg:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;恭喜您升级到XXX&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 完成任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;task_desc:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;达成XXX成就&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总的来说就是自由发挥，只要服务端、客户端相互沟通好即可。当然，也要避免乱用，保证真的需要全局附加数据才使用这个字段。&lt;/p&gt;
&lt;h2 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h2&gt;&lt;p&gt;总结几点最佳实践。&lt;/p&gt;
&lt;h3 id=&quot;规范统一的命名&quot;&gt;&lt;a href=&quot;#规范统一的命名&quot; class=&quot;headerlink&quot; title=&quot;规范统一的命名&quot;&gt;&lt;/a&gt;规范统一的命名&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;命名风格统一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不管是驼峰式还是下划线式，统一就好。当然，按照目前的“大众规范”，还是统一小写加下划线比较好=。=&lt;br&gt;如：&lt;code&gt;user_id&lt;/code&gt;，&lt;code&gt;user_name&lt;/code&gt;，&lt;code&gt;user_age&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语义清晰，遵守常用缩写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字段的名字最好能体现字段的类型，遵守一些“常用”的缩写，如：&lt;/p&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user&lt;span class=&quot;number&quot;&gt;_n&lt;/span&gt;ame, task&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;desc, date&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;str, article&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;title, feed&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;content 等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;id, users&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;count, task&lt;span class=&quot;number&quot;&gt;_n&lt;/span&gt;um, xxx&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;offset 等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;login&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;at, create&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;date, logout&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;time 等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 布尔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;done, &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;vip, protected, can&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;read 等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;avatar&lt;span class=&quot;number&quot;&gt;_u&lt;/span&gt;rl, thumb&lt;span class=&quot;number&quot;&gt;_u&lt;/span&gt;rl 等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;users, profiles, thumb&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;imgs 等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;空值、空字段的处理&quot;&gt;&lt;a href=&quot;#空值、空字段的处理&quot; class=&quot;headerlink&quot; title=&quot;空值、空字段的处理&quot;&gt;&lt;/a&gt;空值、空字段的处理&lt;/h3&gt;&lt;p&gt;空值、空字段的处理也是比较容易出问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一空值用null&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了布尔类型的，其余的空值统一用&lt;code&gt;null&lt;/code&gt;表示，客户端保证每种字段的&lt;code&gt;null&lt;/code&gt;可以被正常处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给不同类型设置默认空值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;null&lt;/code&gt;，还可以对字段设置“默认值”，如数字就是&lt;code&gt;0&lt;/code&gt;，字符串就是空字符串&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，数组就是空数组&lt;code&gt;[]&lt;/code&gt;，对象就是空对象&lt;code&gt;{}&lt;/code&gt;，这样有个好处就是可以避免很多客户端（Java、OC）处理空值（Null、nil、null）产生的异常。但是危害就是容易语义不明。还是要根据具体业务、前后端约定而定。&lt;/p&gt;
&lt;p&gt;以前写过一篇&lt;a href=&quot;http://tutuge.me/2015/07/08/fill-nil-property-of-object/&quot;&gt;用Runtime的手段填充任意NSObject对象的nil属性&lt;/a&gt;，其实就是为对象空值统一设置默认值的=。=，可以参考。&lt;/p&gt;
&lt;h3 id=&quot;布尔boolean值的处理&quot;&gt;&lt;a href=&quot;#布尔boolean值的处理&quot; class=&quot;headerlink&quot; title=&quot;布尔boolean值的处理&quot;&gt;&lt;/a&gt;布尔boolean值的处理&lt;/h3&gt;&lt;p&gt;说实话，我见过各种布尔值表示方式，如：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;is_login:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;is_login:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;is_login:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;is_login:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;TRUE&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;is_login:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;YES&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...天啊&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于语言本身的限制、框架的处理方式，不对布尔类型的值做限制总觉得不踏实，像C、C++、Objective-C里面的布尔就是数字0和1，其它语言也都各自不一样，还有从数据库读写导致的布尔值类型不一致等。&lt;/p&gt;
&lt;p&gt;所以，如果可以的话，最好一开始就对所有请求参数、结果的布尔值类型做限定，个人觉得&lt;strong&gt;统一成数字0和1&lt;/strong&gt;最好。&lt;/p&gt;
&lt;p&gt;然后在客户端和服务端统一设置常量、宏定义，定义布尔的类型，所有的参数、结果的布尔字段全部做强制约束。&lt;/p&gt;
&lt;h3 id=&quot;时间、日期字段&quot;&gt;&lt;a href=&quot;#时间、日期字段&quot; class=&quot;headerlink&quot; title=&quot;时间、日期字段&quot;&gt;&lt;/a&gt;时间、日期字段&lt;/h3&gt;&lt;p&gt;时间的处理也是非常容易出错的，特别是遇上时区转换的时候。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强制GMT/UTC时间戳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一种做法就是强制所有时间参数只能传Unix时间戳，也就是标准GMT/UTC时间戳，然后由各自的客户端根据自己的时区、显示要求做处理后显示。&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从服务器接收的时间数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;login_at:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1462068610&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据时区、显示要求转换，如北京时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;显示：&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;年&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;月&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;日下午&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;点、&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;天前等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的话，客户端、服务端存储、读取时间都相当于处理纯数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用ISO 8601带时区的时间日期字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用Unix时间戳有个坏处，就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最早只能到&lt;code&gt;1970/1/1 0:0:0&lt;/code&gt;GMT时间，一旦需求早于这个时间，时间戳就成了负数=。=&lt;/li&gt;
&lt;li&gt;不方便人阅读。调试API的时候，开发人员不能直观看出具体时间，很不方便&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，可以按照&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ISO 8601&lt;/a&gt;标准，用字符串保存、传输时间。&lt;/p&gt;
&lt;p&gt;如果以&lt;code&gt;YYYY-MM-DDThh:mm:ssTZD&lt;/code&gt;格式为准, 时间的形式就是&lt;code&gt;1997-07-16T19:20:30+01:00&lt;/code&gt;，保存了时区信息，也方便阅读。&lt;/p&gt;
&lt;h3 id=&quot;type类型的处理&quot;&gt;&lt;a href=&quot;#type类型的处理&quot; class=&quot;headerlink&quot; title=&quot;type类型的处理&quot;&gt;&lt;/a&gt;type类型的处理&lt;/h3&gt;&lt;p&gt;API数据中免不了各种类型字段，如用户类型&lt;code&gt;user_type&lt;/code&gt;、登录类型&lt;code&gt;login_type&lt;/code&gt;等，类型的表示也可以分为数字、字符串两种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字表示类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个应该是最直接的方式了，客户端和服务端共同维护某个API下、某个数据类型中的type常量，靠文档约束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串表示类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数字的类型毕竟不利于直观阅读，如果可以的话，用字符串也是不错的，当然坏处就是代码里面就不能用&lt;code&gt;Switch&lt;/code&gt;语句了（除了强大的Swift=。=）&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如登录类型，QQ、微信、微博等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;login_type:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;qq&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;login_type:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;wechat&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;login_type:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sina_weibo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;完整的URL&quot;&gt;&lt;a href=&quot;#完整的URL&quot; class=&quot;headerlink&quot; title=&quot;完整的URL&quot;&gt;&lt;/a&gt;完整的URL&lt;/h3&gt;&lt;p&gt;API里面的数据也会有URL类型的，一般来说如用户的头像、各种图片、音频等资源，都是以URL链接的形式返回的。&lt;/p&gt;
&lt;p&gt;返回的URL一定要“完整”，主要指的是不要忘记URL里面的&lt;strong&gt;协议&lt;/strong&gt;部分，也就是&lt;code&gt;scheme&lt;/code&gt;部分。&lt;/p&gt;
&lt;p&gt;像&lt;code&gt;tutuge.me/imgs/1.jpg&lt;/code&gt;这种URL值，就是不完整的，没有指明网络协议，难道靠猜=。=&lt;br&gt;应该是&lt;code&gt;http://tutuge.me/imgs/1.jpg&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;嗯，规范非常重要。:-D&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;RESTful API的设计已经很成熟了，大家也都比较认可。本文也不再过多介绍RESTful API相关的知识，而是针对JSON型API的返回结果设计，总结下自己的经验。&lt;/p&gt;
&lt;h2 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h2&gt;&lt;p&gt;先来看看返回结果的结构示例：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt; : &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 请求数据，对象或数组均可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;user_id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;user_name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;user_avatar_url&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://tutuge.me/avatar.jpg&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;msg&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;done&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 请求状态描述，调试用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 业务自定义状态码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;extra&lt;/span&gt; : &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 全局附加数据，字段、内容不定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;签到成功！&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="服务端" scheme="http://tutuge.me/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>结合访问Out Parameters出现EXC_BAD_ACCESS的例子，反编译汇编解读__autoreleasing</title>
    <link href="http://tutuge.me/2016/04/30/autoreleasing-meet-autoreleasepool/"/>
    <id>http://tutuge.me/2016/04/30/autoreleasing-meet-autoreleasepool/</id>
    <published>2016-04-30T11:19:23.000Z</published>
    <updated>2016-05-03T09:00:29.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;2016-05-01: 补充了一点本文涉及的汇编知识&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文结合一段访问&lt;code&gt;Out Parameters&lt;/code&gt;出现了&lt;code&gt;EXC_BAD_ACCESS&lt;/code&gt;错误的代码，通过反编译等手段验证Objective-C中&lt;code&gt;__autoreleasing&lt;/code&gt;的一些特点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;2016-05-01更新-关于本文的反编译汇编代码&quot;&gt;&lt;a href=&quot;#2016-05-01更新-关于本文的反编译汇编代码&quot; class=&quot;headerlink&quot; title=&quot;2016-05-01更新 - 关于本文的反编译汇编代码&quot;&gt;&lt;/a&gt;2016-05-01更新 - 关于本文的反编译汇编代码&lt;/h2&gt;&lt;p&gt;本文的反编译基于MachO 64bits，即System V X86_64，读懂本文需要的最简单Calling convention如下：&lt;/p&gt;
&lt;p&gt;函数参数顺序：&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rdi, rsi, rdx, rcx等寄存器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应到&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id objc_msgSend ( id object, SEL cmd, arg1, arg2 ... );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;就是&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rdi&lt;/span&gt; = object &lt;span class=&quot;comment&quot;&gt;# 被调用对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rsi&lt;/span&gt; = cmd &lt;span class=&quot;comment&quot;&gt;# 方法selector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rdx&lt;/span&gt; = arg1 &lt;span class=&quot;comment&quot;&gt;# 方法第一个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rcx&lt;/span&gt; = arg2 &lt;span class=&quot;comment&quot;&gt;# 方法第二个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数返回值：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;本文只涉及: &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;寄存器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详细可参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS ABI Function Call Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/LowLevelABI/000-Introduction/introduction.html#//apple_ref/doc/uid/TP40002437-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OS X ABI Function Call Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/Calling_Conventions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OS DEV Calling Conventions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Out-Parameters-指针的指针&quot;&gt;&lt;a href=&quot;#Out-Parameters-指针的指针&quot; class=&quot;headerlink&quot; title=&quot;Out Parameters - 指针的指针&quot;&gt;&lt;/a&gt;Out Parameters - 指针的指针&lt;/h2&gt;&lt;p&gt;所谓&lt;code&gt;Out Parameters&lt;/code&gt;，其实就是&lt;strong&gt;指针的指针&lt;/strong&gt;，熟悉C/C++的朋友应该不陌生，通过指针的指针可以改变指针的值，在Objective-C里面很多地方用到了这种方法，来在函数、方法内部改变参数的原始值，如：&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NSFileManager的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL&lt;/span&gt;)removeItemAtURL:(NSURL *)URL &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;:(NSError **)&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二个参数&lt;code&gt;(NSError **)error&lt;/code&gt;，就是&lt;code&gt;Out Parameters&lt;/code&gt;，调用时传递NSError类型指针的地址即可：&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSError *&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt; = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSFileManager defaultManager] removeItemAtURL:url &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;:&amp;amp;&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 处理error...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;出现EXC-BAD-ACCESS的代码示例&quot;&gt;&lt;a href=&quot;#出现EXC-BAD-ACCESS的代码示例&quot; class=&quot;headerlink&quot; title=&quot;出现EXC_BAD_ACCESS的代码示例&quot;&gt;&lt;/a&gt;出现EXC_BAD_ACCESS的代码示例&lt;/h2&gt;&lt;p&gt;假设有如下遍历数组检查数值零的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)checkZeroInArray:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *&amp;gt; *)array error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [array enumerateObjectsUsingBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; * _Nonnull number, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (number.integerValue == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 指针是否有效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                *error = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;me.tutuge&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 创建NSError实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *stop = &lt;span class=&quot;literal&quot;&gt;TRUE&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 停止遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用的时候如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSError *&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self checkZeroInArray:numbers &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;:&amp;amp;&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 取地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Error: %@&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// EXC_BAD_ACCESS错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以得出，&lt;code&gt;NSLog(@&amp;quot;Error: %@&amp;quot;, error)&lt;/code&gt;访问&lt;code&gt;error&lt;/code&gt;的时候，&lt;code&gt;error&lt;/code&gt;的地址指向的内存空间已经被释放，所以才会出现&lt;code&gt;EXC_BAD_ACCESS&lt;/code&gt;错误。&lt;/p&gt;
&lt;p&gt;但是为什么会被释放？什么时候被释放的？经过一番查证，发现跟&lt;code&gt;__autoreleasing&lt;/code&gt;和&lt;code&gt;@autoreleasepool&lt;/code&gt;有关。&lt;/p&gt;
&lt;p&gt;下面先对&lt;code&gt;__autoreleasing&lt;/code&gt;做点研究=。=&lt;/p&gt;
&lt;h2 id=&quot;autoreleasing-变量所有权-ownership-修饰符&quot;&gt;&lt;a href=&quot;#autoreleasing-变量所有权-ownership-修饰符&quot; class=&quot;headerlink&quot; title=&quot;__autoreleasing - 变量所有权(ownership)修饰符&quot;&gt;&lt;/a&gt;__autoreleasing - 变量所有权(ownership)修饰符&lt;/h2&gt;&lt;p&gt;先看看&lt;code&gt;__autoreleasing&lt;/code&gt;的定义及一些特点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__autoreleasing&lt;/code&gt;是变量所有权修饰符的一种，除了它，还有&lt;code&gt;__strong&lt;/code&gt;、&lt;code&gt;__weak&lt;/code&gt;和&lt;code&gt;__unsafe_unretained&lt;/code&gt;，详细的说明可以参考：&lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#ownership-qualification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang文档-Objective-C Automatic Reference Counting (ARC)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，就是被&lt;code&gt;__autoreleasing&lt;/code&gt;修饰的变量会被加入到当前的autoreleasepool中，可以理解为如下两段分别在ARC和MRC中的代码等价：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ARC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id __autoreleasing obj = someObj&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MRC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id obj = [[someObj retain] autorelease]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再进一步，除开各种影响因素，假设有如下函数：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)funcWithObj:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)someObj &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; __autoreleasing obj = someObj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用Hopper Disassembler反编译后为如下汇编代码(MachO 64bits)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/autoreleasing-meet-autoreleasepool_1.jpg&quot; alt=&quot;funcWithObj:反汇编&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;var_18&lt;/code&gt;就是obj变量：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;lea rax, qword [ss:rbp+var_18]&lt;/code&gt;和&lt;code&gt;mov rdi, rax&lt;/code&gt;取了var_18的地址放在&lt;code&gt;rdi&lt;/code&gt;寄存器中，&lt;code&gt;mov rsi, rdx&lt;/code&gt;将&lt;code&gt;someObj&lt;/code&gt;值放到了rsi寄存器中，然后调用&lt;code&gt;id objc_storeStrong(id *object, id value)&lt;/code&gt;函数最终将&lt;code&gt;someObj&lt;/code&gt;值保存在&lt;code&gt;var_18&lt;/code&gt;变量中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;__autoreleasing&lt;/code&gt;导致了&lt;code&gt;id objc_retainAutorelease(id value)&lt;/code&gt;函数的调用：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;call imp___stubs__objc_retainAutorelease&lt;/code&gt;，就是对&lt;code&gt;obj&lt;/code&gt;变量，也就是&lt;code&gt;var_18&lt;/code&gt;，调用了&lt;code&gt;objc_retainAutorelease&lt;/code&gt;函数，先retain然后autorelease了一次，其实现大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;id &lt;span class=&quot;title&quot;&gt;objc_retainAutorelease&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; objc_autorelease(objc_retain(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;objc_storeStrong&lt;/code&gt;和&lt;code&gt;objc_retainAutorelease&lt;/code&gt;可参考：&lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-retainautorelease&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang文档-Objective-C Automatic Reference Counting (ARC)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可验证，用&lt;code&gt;__autoreleasing&lt;/code&gt;修饰的变量会被添加到当前的autoreleasepool中。&lt;/p&gt;
&lt;h2 id=&quot;方法的Out-Parameters参数会自动添加-autoreleasing属性&quot;&gt;&lt;a href=&quot;#方法的Out-Parameters参数会自动添加-autoreleasing属性&quot; class=&quot;headerlink&quot; title=&quot;方法的Out Parameters参数会自动添加__autoreleasing属性&quot;&gt;&lt;/a&gt;方法的Out Parameters参数会自动添加__autoreleasing属性&lt;/h2&gt;&lt;p&gt;当方法参数里面有Out Parameters参数时，就是有指针的指针类型时，编译器会自动为参数加上&lt;code&gt;__autoreleasing&lt;/code&gt;属性，如以下两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)generateError1:(NSError **)&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; = [NSError &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)generateError2:(NSError * __autoreleasing *)&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; = [NSError &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译时，&lt;code&gt;generateError1:&lt;/code&gt;会对参数&lt;code&gt;error&lt;/code&gt;自动添加&lt;code&gt;__autoreleasing&lt;/code&gt;，然后就跟&lt;code&gt;generateError2:&lt;/code&gt;的实现完全一致了。&lt;/p&gt;
&lt;p&gt;通过反汇编也可看出两者完全一致：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/autoreleasing-meet-autoreleasepool_2.jpg&quot; alt=&quot;Out Parameters参数会自动添加__autoreleasing属性&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;call imp___stubs__objc_msgSend&lt;/code&gt;完成后，&lt;code&gt;rax&lt;/code&gt;寄存器保存了&lt;code&gt;[NSError new]&lt;/code&gt;的对象，然后&lt;code&gt;mov rdi, rax&lt;/code&gt;，转移到&lt;code&gt;rdi&lt;/code&gt;寄存器，作为&lt;code&gt;objc_autorelease&lt;/code&gt;函数的参数被调用，&lt;code&gt;*error&lt;/code&gt;被加到了当前的autoreleasepool中。&lt;/p&gt;
&lt;h2 id=&quot;如果传给Out-Parameters参数的变量没有用-autoreleasing修饰，编译器会创建一个临时变量并以-autoreleasing修饰再传入&quot;&gt;&lt;a href=&quot;#如果传给Out-Parameters参数的变量没有用-autoreleasing修饰，编译器会创建一个临时变量并以-autoreleasing修饰再传入&quot; class=&quot;headerlink&quot; title=&quot;如果传给Out Parameters参数的变量没有用__autoreleasing修饰，编译器会创建一个临时变量并以__autoreleasing修饰再传入&quot;&gt;&lt;/a&gt;如果传给Out Parameters参数的变量没有用__autoreleasing修饰，编译器会创建一个临时变量并以__autoreleasing修饰再传入&lt;/h2&gt;&lt;p&gt;根据苹果的&lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transitioning to ARC Release Notes&lt;/a&gt;文档可知，如果有如下调用:&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSError *&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 默认__strong类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self generateError1:&amp;amp;&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;]；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译器检测到&lt;code&gt;generateError1:&lt;/code&gt;方法的Out Parameters类型参数，但是调用时的&lt;code&gt;error&lt;/code&gt;又不是&lt;code&gt;__autoreleasing&lt;/code&gt;修饰的，就会自动创建一个&lt;code&gt;__autoreleasing&lt;/code&gt;修饰的临时变量，用来代替&lt;code&gt;error&lt;/code&gt;传入，编译器重写后如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * error; &lt;span class=&quot;comment&quot;&gt;// 默认__strong类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * __autoreleasing tmp = error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; generateError1:&amp;amp;tmp]；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过汇编来验证一下：&lt;/p&gt;
&lt;p&gt;假如有如下调用：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)runTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; generateError1:&amp;amp;error]; &lt;span class=&quot;comment&quot;&gt;// 就是上面的实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;反汇编后，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/autoreleasing-meet-autoreleasepool_3.jpg&quot; alt=&quot;自动添加__autoreleasing临时变量&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码有点多=。=，从图中汇编可知：&lt;code&gt;var_20&lt;/code&gt;就是自动生成的临时变量，&lt;code&gt;var_18&lt;/code&gt;是我们定义的&lt;code&gt;error&lt;/code&gt;变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov qword [ss:rbp+var_18], 0x0&lt;/code&gt;对&lt;code&gt;var_18&lt;/code&gt;做初始化，也就是赋&lt;code&gt;nil&lt;/code&gt;值，然后&lt;code&gt;mov rdi, qword [ss:rbp+var_18]&lt;/code&gt;和&lt;code&gt;mov qword [ss:rbp+var_20], rdi&lt;/code&gt;就是用&lt;code&gt;var_18&lt;/code&gt;初始化了&lt;code&gt;var_20&lt;/code&gt;临时变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lea rdx, qword [ss:rbp+var_20]&lt;/code&gt;将&lt;code&gt;var_20&lt;/code&gt;临时变量的地址存到了&lt;code&gt;rdx&lt;/code&gt;寄存器中，作为&lt;code&gt;objc_msgSend&lt;/code&gt;实现&lt;code&gt;generateError1:&lt;/code&gt;调用时的第三个参数，也就是&lt;code&gt;(NSError **):error&lt;/code&gt;参数，完成调用。&lt;/p&gt;
&lt;p&gt;调用完成后，通过如下调用，将临时变量&lt;code&gt;var_20&lt;/code&gt;的值保存到&lt;code&gt;var_18&lt;/code&gt;，即&lt;code&gt;error&lt;/code&gt;变量中。&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lea&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rbp&lt;/span&gt;+var_18] # var_18为objc_storeStrong第一个参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rbp&lt;/span&gt;+var_20] # var_20为objc_storeStrong第二个参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt; imp___stubs__objc_storeStrong&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;开头例子出现EXC-BAD-ACCESS错误的原因&quot;&gt;&lt;a href=&quot;#开头例子出现EXC-BAD-ACCESS错误的原因&quot; class=&quot;headerlink&quot; title=&quot;开头例子出现EXC_BAD_ACCESS错误的原因&quot;&gt;&lt;/a&gt;开头例子出现EXC_BAD_ACCESS错误的原因&lt;/h2&gt;&lt;p&gt;经过上面一番对&lt;code&gt;__autoreleasing&lt;/code&gt;的总结，再来看看开头例子的错误原因就比较容易懂了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;enumerateObjectsUsingBlock会在循环内部自动添加autoreleasepool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先应该明确的就是&lt;code&gt;enumerateObjectsUsingBlock:&lt;/code&gt;在用block迭代遍历NSArray的元素时，会自动添加autoreleasepool，对于例子来说，相当于：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 枚举遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[array enumerateObjectsUsingBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; * _Nonnull number, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (number.integerValue == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *error = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;me.tutuge&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *stop = &lt;span class=&quot;literal&quot;&gt;TRUE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结合&lt;code&gt;__autoreleasing&lt;/code&gt;后，重写为：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; stop = &lt;span class=&quot;literal&quot;&gt;FALSE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; index &amp;lt; array.count &amp;amp;&amp;amp; !stop; index++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 自动添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        number = array[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *error = [[&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;me.tutuge&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] autorelease]; &lt;span class=&quot;comment&quot;&gt;// 注意这个autorelease !&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stop = &lt;span class=&quot;literal&quot;&gt;TRUE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而&lt;code&gt;autorelease&lt;/code&gt;对应的函数&lt;code&gt;id objc_autorelease(id value)&lt;/code&gt;的官方解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If value is null, this call has no effect. Otherwise, it adds the object to the innermost autorelease pool exactly as if the object had been sent the autorelease message.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中的&lt;strong&gt;innermost autorelease pool&lt;/strong&gt;表示的就是“最内层”的autoreleasepool，对于例子来说就是&lt;code&gt;*error&lt;/code&gt;被添加到了循环内的autoreleasepool中，当然，导致的结果就是本次循环结束后，&lt;code&gt;*error&lt;/code&gt;也随着一起被释放了。&lt;/p&gt;
&lt;p&gt;最终导致了外部访问了已经被释放的&lt;code&gt;*error&lt;/code&gt;，出现了EXC_BAD_ACCESS错误。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;很多时候不能想当然的写代码=。=，要不然出了问题找都找不到，每个细节都很重要。&lt;br&gt;嗯，现在读汇编快多了。。。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang document: Objective-C Automatic Reference Counting (ARC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transitioning to ARC Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/10/15/behind-autorelease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑幕背后的Autorelease&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;2016-05-01: 补充了一点本文涉及的汇编知识&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文结合一段访问&lt;code&gt;Out Parameters&lt;/code&gt;出现了&lt;code&gt;EXC_BAD_ACCESS&lt;/code&gt;错误的代码，通过反编译等手段验证Objective-C中&lt;code&gt;__autoreleasing&lt;/code&gt;的一些特点。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>总结一些iOS项目中组织代码的方法</title>
    <link href="http://tutuge.me/2016/04/10/summary-of-code-organization/"/>
    <id>http://tutuge.me/2016/04/10/summary-of-code-organization/</id>
    <published>2016-04-10T12:10:56.000Z</published>
    <updated>2016-05-03T08:42:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;总结一些组织代码的方法，大到各个子项目模块之间，小到单个文件内部，涉及到了CocoaPods私有库、Carthage构建私有Framework、项目内Group和文件夹、类内用Category组织、文件内的#pragam mark、// MARK -。虽然有些老生常谈，就当是重新梳理一遍吧=。=。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;多个子项目-CocoaPods加私有仓库&quot;&gt;&lt;a href=&quot;#多个子项目-CocoaPods加私有仓库&quot; class=&quot;headerlink&quot; title=&quot;多个子项目 - CocoaPods加私有仓库&quot;&gt;&lt;/a&gt;多个子项目 - CocoaPods加私有仓库&lt;/h2&gt;&lt;p&gt;感觉目前CocoaPods已经成了搞iOS开发的标配了，基本上所有的第三方库和组件都可以通过CocoaPods来集成管理。但是CocoaPods的功能其实不止管理第三方库和组件，团队内部的拆分出来的子项目和子模块，同样可以用CocoaPods来集成管理。&lt;/p&gt;
&lt;p&gt;先看看如下Podfile的示例：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 源配置 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source &lt;span class=&quot;string&quot;&gt;&#39;git@gitlab.xxx.com:cocoapods/specs.git&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 团队内部Gitlab源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source &lt;span class=&quot;string&quot;&gt;&#39;https://git.coding.net/xxx/specs.git&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Coding等私有Git托管平台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iOS版本支持 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开发中的子项目 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;XXXCommonUI&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:path=&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;/Users/tutuge/projects/Xcode/XXXCommonUI&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 本地路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 依赖的内部子项目 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;XXXModuleA&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:git=&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;git@gitlab.xxx.com:cocoapods/XXXModuleA&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:branch=&amp;gt;&lt;span class=&quot;string&quot;&gt;&#39;develop&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;XXXModuleB&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1.0.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 依赖的开源第三方库 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;AFNetworking&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;3.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;DTCoreText&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 额外的脚本 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;私有Git仓库&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;虽然我们有万能的Github了，但是还是有些代码是不能公开的=。=，所以需要一个私有的Git仓库。&lt;br&gt;有自己服务器的，完全可以用&lt;a href=&quot;https://about.gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab&lt;/a&gt;(或者&lt;a href=&quot;https://gogs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gogs&lt;/a&gt;)搭建一个功能强大的私有Git仓库，管理项目代码，搭建CocoaPods私有源都很不错。&lt;br&gt;当然，懒得折腾的，也可以用第三方的私有Git服务，如：&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt;、&lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私有CocoaPods源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搭建一个私有CocoaPods源其实就是创建一个私有的&lt;code&gt;Spec Repo&lt;/code&gt;，说白了就是一个存放了所有私有Pods的&lt;code&gt;Podspec&lt;/code&gt;文件的，按照特定结构组织的目录，然后把这个目录推到私有Git仓库就成了一个私有的CocoaPods源。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spec Repo&lt;/code&gt;的目录结构示例如下：  &lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;Specs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── &lt;span class=&quot;selector-attr&quot;&gt;[XXXModuleA]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── &lt;span class=&quot;selector-attr&quot;&gt;[0.0.1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            └── &lt;span class=&quot;selector-attr&quot;&gt;[XXXModuleA]&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.podspec&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── &lt;span class=&quot;selector-attr&quot;&gt;[0.0.2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            └── &lt;span class=&quot;selector-attr&quot;&gt;[XXXModuleA]&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.podspec&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后添加私有源即可：  &lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod repo add XXXSpecRepo &lt;span class=&quot;string&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//git.coding.net/xxx/specs.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;创建私有CocoaPods项目的具体步骤&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;至于具体的创建步骤，CocoaPods的官方文档和一些优秀的博客已经说得很清楚了，我就不再重复了。推荐阅读：&lt;a href=&quot;https://guides.cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods Guides&lt;/a&gt;，还有&lt;a href=&quot;http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Cocoapods创建私有podspec&lt;/a&gt;，这篇很详细！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用正在本地开发的子项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主工程依赖的子项目也是可以同时开发的，用&lt;code&gt;path&lt;/code&gt;指定路径即可，如&lt;code&gt;pod &amp;#39;XXXCommonUI&amp;#39;, :path=&amp;gt; &amp;#39;/Users/tutuge/projects/Xcode/XXXCommonUI&amp;#39;&lt;/code&gt;，然后&lt;code&gt;pod install&lt;/code&gt;一下，依赖的本地工程就会集成到主工程的&lt;code&gt;Development Pods&lt;/code&gt;目录下，开发时，就可以同时修改主项目和子项目了。&lt;/p&gt;
&lt;h2 id=&quot;构建私有Framework-Carthage&quot;&gt;&lt;a href=&quot;#构建私有Framework-Carthage&quot; class=&quot;headerlink&quot; title=&quot;构建私有Framework - Carthage&quot;&gt;&lt;/a&gt;构建私有Framework - Carthage&lt;/h2&gt;&lt;p&gt;除了抽离出子项目，用Framework的方式来管理公共代码也是不错的选择，Framework的好处也是多多的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质上是个bundle，不仅可以打包代码，还可以打包资源Assets、视图XIB等&lt;/li&gt;
&lt;li&gt;可以有选择的开放头文件、接口，避免了用CocoaPods集成子项目时，所有代码全部暴露的问题，只暴露需要的，代码更加清晰。&lt;/li&gt;
&lt;li&gt;从iOS 8开始支持的Cocoa Touch Framework可以支持动态Framework，能在主App和各种Extension之间共享一份二进制目标代码，加快应用加载速度，减小体积，加快编译速度等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于Cocoa Touch Framework动态框架的种种优点，“去中心化”的轻量级依赖包管理工具&lt;a href=&quot;https://github.com/Carthage/Carthage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carthage&lt;/a&gt;也越来越受欢迎。&lt;br&gt;总的来说，Carthage没有CocoaPods那样的&lt;code&gt;Spec Repo&lt;/code&gt;中心，不会对现有项目工程修改，只是完成了拉取代码、构建Framework的工作，非常的轻量级，所以用来构建团队内公用的Framework非常不错~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建Framework&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;这里的Framework指的是Cocoa Touch Framework动态框架，静态Framework的缺点不少(如不能共享已加载到内存的二进制目标代码、构建麻烦等)，如果项目可以从iOS 8开始支持，为啥不用动态框架呢~&lt;/p&gt;
&lt;p&gt;创建Framework的过程非常简单，Xcode 6以后就有了Framework项目模板，直接选中”Cocoa Touch Framework”模板，按照提示来即可。记得在&lt;code&gt;TARGETS-&amp;gt;Build Phases-&amp;gt;Headers-&amp;gt;Public&amp;quot;&lt;/code&gt;加入要暴露的头文件（Swift的话，将要暴露的类、方法标记public）就好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用Carthage构建Framework&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Carthage只支持构建标记为“Shared”的项目Target，所以创建好了Framework工程后，还要设置Scheme为“Shared”，可以在当前Scheme的&lt;code&gt;Edit Scheme&lt;/code&gt;里面设置，也可以在Xcode的菜单&lt;code&gt;Product-&amp;gt;Scheme-&amp;gt;Manage Schemes&lt;/code&gt;里面设置。&lt;/p&gt;
&lt;p&gt;然后就可以将Framework工程推送到Git仓库中，可以是Github，也可以是私有Git仓库，如上一节提到的Coding、Bitbucket等，只要本机可以正常访问即可。记住打上版本号tag。&lt;/p&gt;
&lt;p&gt;然后就可以在一个测试工程中创建一个&lt;code&gt;Cartfile&lt;/code&gt;文件，输入Framework的Git路径，按照官方文档设置一下”Run Script”，运行&lt;code&gt;carthage update&lt;/code&gt;生成对应的Framework，就可以集成测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最终的Cartfile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于Carthage的去中心化，用Carthage管理项目的Framework依赖就非常灵活，一个简单的示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 开发中的本地Framework&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;string&quot;&gt;&quot;file:///directory/to/project&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;develop&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 依赖的私有Framework&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;string&quot;&gt;&quot;git@gitlab.xxx.com:cocoapods/XXXFramework.git&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# 第三方开源库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;github &lt;span class=&quot;string&quot;&gt;&quot;Mantle/Mantle&quot;&lt;/span&gt; ~&amp;gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，Carthage可以方便的管理构建本地、私有、第三方的Framework库，而且更加方便~  &lt;/p&gt;
&lt;p&gt;详细的创建流程Google一下就有很多，如&lt;a href=&quot;https://medium.com/@PyBaig/build-your-own-cocoa-touch-frameworks-in-swift-d4ea3d1f9ca3#.z38fy8psd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build your own Cocoa Touch Frameworks, in pure Swift&lt;/a&gt;、&lt;a href=&quot;https://robots.thoughtbot.com/creating-your-first-ios-framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating your first iOS Framework&lt;/a&gt;、&lt;a href=&quot;http://blog.mat.tc/how-to-make-a-carthage-compatible-framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Make a Carthage-compatible Framework in Swift&lt;/a&gt;。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;和CocoaPods混用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Carthage是没有任何侵入性的，不会对项目工程有修改，只是构建出了Framework文件，所以完全可以把Carthage当做纯粹的Framework构建工具，跟CocoaPods一起愉快的使用=。=&lt;/p&gt;
&lt;h2 id=&quot;项目内文件组织-Group和文件夹&quot;&gt;&lt;a href=&quot;#项目内文件组织-Group和文件夹&quot; class=&quot;headerlink&quot; title=&quot;项目内文件组织 - Group和文件夹&quot;&gt;&lt;/a&gt;项目内文件组织 - Group和文件夹&lt;/h2&gt;&lt;p&gt;项目内的代码组织，其实就是代码文件的组织，总的来说，其实有以下三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;具有物理文件夹结构的Folder reference&lt;/li&gt;
&lt;li&gt;从Xcode创建的逻辑上的Group&lt;/li&gt;
&lt;li&gt;具有物理文件夹结构的Group&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;排除Folder reference&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Folder reference说白了就是硬盘上一个文件夹的逻辑引用，有点像Linux文件系统里面的软连接=。=，图标是蓝色的，将一个文件夹拖到Xcode中时，&lt;code&gt;Create folder references&lt;/code&gt;选项创建的就是。  &lt;/p&gt;
&lt;p&gt;虽然编译时也会被打包到程序中，更能同步真正文件夹内部的修改，但是遗憾是的里面的代码文件是不能自动的加入到Xcode的编译中的，要手动一个一个加，而且图片资源也不能在IB里面使用，代码里面使用也要加上路径，所以一般是纯资源文件夹用Folder reference的方式引用，对于组织代码文件，就可以排除Folder reference的方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;纯逻辑Group文件平铺，脱离Xcode不方便查看&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先要明确的是，Group是Xcode对文件的一种逻辑上的引用，并且在编译时Xcode会把所有的Group展开，所以代码里面也就不用像Folder reference一样加上路径，还可以针对Target作区分，很方便。  &lt;/p&gt;
&lt;p&gt;但是Xcode中创建的Group并没有对应到文件系统中的文件夹，导致一旦脱离Xcode看代码，所有的文件都平铺在了根目录下，非常不方便。&lt;/p&gt;
&lt;p&gt;难道没有办法了？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有物理文件夹结构的Group最好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有一种Group是可以有物理文件夹结构的，其实将一个文件夹拖到Xcode中，选择&lt;code&gt;Create groups for any added folders&lt;/code&gt;创建的Group就是既有Group的有点，又可以保持物理文件夹结构。这样无意是最好的~&lt;/p&gt;
&lt;p&gt;手动创建:&lt;br&gt;可以&lt;code&gt;Add Files To XXXX&lt;/code&gt;，然后选择&lt;code&gt;New Folder&lt;/code&gt;创建文件夹，然后把代码文件拖进去，再添加回Xcode。&lt;/p&gt;
&lt;p&gt;自动创建：&lt;br&gt;对于现有的大量的Group，手动一个一个创建实在不方便，还好有个命令行工具：&lt;a href=&quot;https://github.com/venmo/synx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;synx&lt;/a&gt;，直接在工程根目录运行&lt;code&gt;synx XXX.xcodeproj&lt;/code&gt;就可以自动为Group创建物理文件夹。&lt;br&gt;当然，CocoaPods管理的库要重新&lt;code&gt;pod install&lt;/code&gt;一次，手动添加的Framework也要重新添加。&lt;/p&gt;
&lt;h2 id=&quot;类内代码组织-Category&quot;&gt;&lt;a href=&quot;#类内代码组织-Category&quot; class=&quot;headerlink&quot; title=&quot;类内代码组织 - Category&quot;&gt;&lt;/a&gt;类内代码组织 - Category&lt;/h2&gt;&lt;p&gt;Objective-C中的Category实在是太方便了，可以灵活的为现有的类增加方法，甚至是系统的类。&lt;br&gt;但是其实Category也可以拿来组织一个类的实现，将类的Property、方法按照业务、功能拆分到不同的Category里面，使类的结构更加清晰。 &lt;/p&gt;
&lt;p&gt;系统API本身就有大量的例子，如UIViewController的：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; UIViewController (UIContainerViewControllerCallbacks)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; UIViewController(UIViewControllerTransitioning)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现的时候还可以每个Category对应一个头文件和.m文件，类的结构更加清晰：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XXXClass&lt;span class=&quot;selector-class&quot;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XXXClass&lt;span class=&quot;selector-class&quot;&gt;.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XXXClass+XXXModuleA&lt;span class=&quot;selector-class&quot;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XXXClass+XXXModuleA&lt;span class=&quot;selector-class&quot;&gt;.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XXXClass+XXXModuleB&lt;span class=&quot;selector-class&quot;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XXXClass+XXXModuleB.m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;文件内代码组织-pragam-mark、-MARK&quot;&gt;&lt;a href=&quot;#文件内代码组织-pragam-mark、-MARK&quot; class=&quot;headerlink&quot; title=&quot;文件内代码组织 - #pragam mark、// MARK -&quot;&gt;&lt;/a&gt;文件内代码组织 - #pragam mark、// MARK -&lt;/h2&gt;&lt;p&gt;整理文件内的代码时，最好的手段就是用&lt;code&gt;#pragam mark&lt;/code&gt;宏定义，Swift的话就是&lt;code&gt;// MARK -&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;Objective-C冗长的语法注定了一个代码文件的行数不会少=。=，如果没有一定的规范，实在是难以迭代，所以最好就是开发前约定一种规则，对主要的类的实现都约定出一套规范，如UIViewController的子类、UIView的子类、UITableViewCell的子类等，然后开发人员按照这个规范写代码，这样才能使代码更好维护。&lt;/p&gt;
&lt;p&gt;如，UIViewController的子类实现时，可以按照如下顺序组织代码：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation XXXViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 内存相关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Memory manager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 类生命周期相关的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Life cycle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 类的Public方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Public methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所有的Actions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Actions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)didTapCancelButton:(UIButton *button)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通知回调，具体可以细分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Notifications - XXX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 系统的Delegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - UITableViewDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自定义类的Delegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - XXXDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自定义View、初始化等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Custom views&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 类私有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;pragma&lt;/span&gt; mark - Private methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，具体的组织方法还要根据项目本身的架构、模式决定，上面的只是参考。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进一步：创建项目专属文件模板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然定下了文件内的组织顺序，每次写代码手工输入也还是有点麻烦，所以更进一步的话就是创建自定义的Xcode文件模板，把不同类的&lt;code&gt;#pragma mark&lt;/code&gt;顺序规则直接写到模板里面，以后开发人员创建文件时直接用项目专属的模板就可以了~&lt;/p&gt;
&lt;p&gt;具体的创建Xcode模板的步骤不在本文范畴=。=，不过倒是发现了一个Xcode插件，专门用来创建模板的：&lt;a href=&quot;https://github.com/samdods/Stencil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stencil: A plugin for Xcode allowing you to easily create custom file templates&lt;/a&gt;，以及对应的文章：&lt;a href=&quot;http://sam.dods.co/blog/2015/05/02/stencil-xcode-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing Stencil&lt;/a&gt;，还有一些教程：&lt;a href=&quot;http://www.telerik.com/blogs/how-to-create-custom-project-templates-in-xcode-7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Create Custom Project Templates in Xcode 7&lt;/a&gt;，&lt;a href=&quot;https://robots.thoughtbot.com/creating-custom-xcode-templates&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating Custom Xcode Templates&lt;/a&gt;，读者可自行阅读~&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;一切为了更加干净整洁的代码，“May the clean code be with you”&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carthage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vocaro.com/trevor/blog/2012/10/21/xcode-groups-vs-folder-references/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode Groups vs. Folder References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.knowstack.com/framework-vs-library-cocoa-ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Framework vs Library (Static &amp;amp; Shared) in (Cocoa/OSX, Cocoa Touch/iOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://onevcat.com/2016/01/create-framework/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;onevcat-如何打造一个让人愉快的框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;总结一些组织代码的方法，大到各个子项目模块之间，小到单个文件内部，涉及到了CocoaPods私有库、Carthage构建私有Framework、项目内Group和文件夹、类内用Category组织、文件内的#pragam mark、// MARK -。虽然有些老生常谈，就当是重新梳理一遍吧=。=。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>对组件化与模块化的思考与总结</title>
    <link href="http://tutuge.me/2016/03/29/modular-and-component-summary/"/>
    <id>http://tutuge.me/2016/03/29/modular-and-component-summary/</id>
    <published>2016-03-29T14:19:54.000Z</published>
    <updated>2016-05-03T08:42:34.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间反复研读了&lt;a href=&quot;http://limboy.me/ios/2016/03/10/mgj-components.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蘑菇街 App 的组件化之路&lt;/a&gt;、&lt;a href=&quot;http://limboy.me/ios/2016/03/14/mgj-components-continued.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蘑菇街 App 的组件化之路·续&lt;/a&gt;和&lt;a href=&quot;http://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;，然后又找到了其它一些研究组件化、模块化方案的文章，但是总觉得差点什么，所以还是决定从头开始思考。文章的标题起的好宽泛，感觉给自己挖了个深坑-。-，其实只是自己对组件化、模块化的一些看法、总结。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h2&gt;&lt;p&gt;先总结下为什么要大动干戈的对代码分模块、拆组件。   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码量膨胀，不利于维护，更不利于新功能的开发&lt;/strong&gt;&lt;br&gt; 现在随便开发一个App的代码行数都是数以万计的，如果不对代码做合理的拆分，那简直就是灾难性的，估计只有最初的开发人员知道如何维护修改，如果换人开发的话，难以下手，更不用说开发新功能了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同业务代码耦合严重，难以多人合作，职责不分明&lt;/strong&gt;&lt;br&gt;多人一起开发时，如果代码结构、模块化的不好，就很难对不同业务划分出分界线，难以明确各自的职责，牵一发动全身，出了问题更是容易相互扯皮（这个时候只能说一句“怪我咯o(╯□╰)o”），更不用提合并代码时的冲突了。&lt;/p&gt;
&lt;p&gt;所以，合理的组织代码，划分模块、拆分组件是项目可以高效迭代的基础。&lt;/p&gt;
&lt;h2 id=&quot;疑问&quot;&gt;&lt;a href=&quot;#疑问&quot; class=&quot;headerlink&quot; title=&quot;疑问&quot;&gt;&lt;/a&gt;疑问&lt;/h2&gt;&lt;p&gt;那到底什么是模块化、组件化？查资料的时候一会儿模块，一会儿组件，有什么联系，有什么区别？有人说这只是叫法习惯问题，知道大概意思就好，不用咬文嚼字，但是总觉得没有个“定义”感觉不踏实，所以还是求助了万能的维基百科=。=&lt;/p&gt;
&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;维基百科的&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modular programming&lt;/a&gt;的开头定义如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着，在&lt;strong&gt;Key aspects&lt;/strong&gt;部分的开头也说了:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With modular programming, concerns are separated such that modules perform logically discrete functions, interacting through well-defined interfaces. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以总结为：模块化的目的在于将一个程序按照其功能做拆分，分成相互独立的模块，以便于每个模块只包含与其功能相关的内容，模块之间通过接口调用。&lt;/p&gt;
&lt;p&gt;当然，模块化编程的具体概念是包含了很多内容的，读者可以详细阅读下维基百科的定义。&lt;/p&gt;
&lt;h2 id=&quot;组件化&quot;&gt;&lt;a href=&quot;#组件化&quot; class=&quot;headerlink&quot; title=&quot;组件化&quot;&gt;&lt;/a&gt;组件化&lt;/h2&gt;&lt;p&gt;关于组件化，能找到的比较接近的就是维基百科的&lt;a href=&quot;https://en.wikipedia.org/wiki/Component-based_software_engineering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Component-based software engineering&lt;/a&gt;，其开头内容如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Component-based software engineering (CBSE), also known as component-based development (CBD), is a branch of software engineering that emphasizes the separation of concerns in respect of the wide-ranging functionality available throughout a given software system. It is a reuse-based approach to defining, implementing and composing loosely coupled independent components into systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;乍一看，这不是跟模块化&lt;strong&gt;Modular programming&lt;/strong&gt;的定义很相似嘛=。=&lt;br&gt;的确，文中也提到组件化跟模块化是很类似的，都是主要为了对一个系统做拆分，比如文中提到：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All system processes are placed into separate components so that all of the data and functions inside each component are semantically related (just as with the contents of classes). Because of this principle, it is often said that components are modular and cohesive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时，组件还具有其他属性，如可替代性(substitutable)，通过接口(interface)访问，可重用性(Reusability)等，读者可自行阅读。&lt;/p&gt;
&lt;h2 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h2&gt;&lt;p&gt;难道模块化跟组件化真的是完全一样的？的确，很多时候两者的概念完全可以相互替换，在实践中更是经常混用。&lt;br&gt;在求助谷歌，甚至阅读了大量的前端技术等其它技术领域的组件化、模块化的文章后，我觉得如果真要将它们两者做个对比，大概总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化强调的是&lt;strong&gt;拆分&lt;/strong&gt;，无论是从业务角度还是从架构、技术角度，模块化首先意味着将代码、数据等内容按照其职责不同分离，使其变得更加容易维护、迭代，使开发人员可以分而治之。&lt;/li&gt;
&lt;li&gt;组件化则着重于&lt;strong&gt;可重用性&lt;/strong&gt;，不管是界面上反复使用的用户头像按钮，还是处理数据的流程中的某个部件，只要可以被反复使用，并且进行了高度封装，只能通过接口访问，就可以称其为“组件”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，并不是说模块就不能被复用，还是要根据实际情况来看，使系统更加容易维护，开发更加方便，才是最终目的。&lt;/p&gt;
&lt;h2 id=&quot;如何拆分&quot;&gt;&lt;a href=&quot;#如何拆分&quot; class=&quot;headerlink&quot; title=&quot;如何拆分&quot;&gt;&lt;/a&gt;如何拆分&lt;/h2&gt;&lt;p&gt;无论是模块化还是组件化，首先肯定是做拆分，但是如何拆分？怎么下手？依照什么标准？&lt;br&gt;下面简单总结一些方法。&lt;/p&gt;
&lt;h4 id=&quot;横向拆分业务、功能模块&quot;&gt;&lt;a href=&quot;#横向拆分业务、功能模块&quot; class=&quot;headerlink&quot; title=&quot;横向拆分业务、功能模块&quot;&gt;&lt;/a&gt;横向拆分业务、功能模块&lt;/h4&gt;&lt;p&gt;很多时候，一个完整的软件程序是同时为多种业务服务的，所有可以优先按照业务的不同，将整个系统进行拆分。  &lt;/p&gt;
&lt;p&gt;如一个电商类型的App，就可以分出商品浏览模块、订单模块、购物车模块、消息模块、支付模块等。又如微信这种社交型应用，可以拆分出联系人模块、朋友圈模块、聊天模块、消息模块等。  &lt;/p&gt;
&lt;p&gt;其实就是从用户使用的角度，按照功能的不同划分模块，当然，这种业务模块是要由各种技术模块作支撑的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/modular_and_component_summary_1.jpg&quot; alt=&quot;横向拆分业务模块示例&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;纵向拆分技术、架构模块&quot;&gt;&lt;a href=&quot;#纵向拆分技术、架构模块&quot; class=&quot;headerlink&quot; title=&quot;纵向拆分技术、架构模块&quot;&gt;&lt;/a&gt;纵向拆分技术、架构模块&lt;/h4&gt;&lt;p&gt;如果脱离业务，只从技术角度来看，则可以尝试纵向对系统拆分模块。&lt;/p&gt;
&lt;p&gt;其实这里的纵向拆分跟对系统的架构做分层有点像=。=，现如今只要需要联网请求API的App都免不了有网络请求、数据缓存、数据加工处理、数据展示、反馈用户操作等行为，所有这些环节层层递进才能完成一个功能。  &lt;/p&gt;
&lt;p&gt;当开始着手规划一个完整软件系统，或者说App时，就可以按照这些环节划分模块，纵向分层次的组合，搭建出一个以技术模块组成的简易系统架构图，方便后续的开发，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/modular_and_component_summary_2.jpg&quot; alt=&quot;纵向拆分技术模块示例&quot;&gt;&lt;/p&gt;
&lt;p&gt;大体上的技术模块划分好以后，就可以按照具体的需求，实现每个技术模块，乃至细分出更多的子模块，如缓存模块可能由键值对缓存（NSUserDefaults）、数据库缓存（SQLite、Realm）、图片缓存等子模块组成，根据具体情况而定。&lt;/p&gt;
&lt;h4 id=&quot;从界面入手，拆分可视化组件&quot;&gt;&lt;a href=&quot;#从界面入手，拆分可视化组件&quot; class=&quot;headerlink&quot; title=&quot;从界面入手，拆分可视化组件&quot;&gt;&lt;/a&gt;从界面入手，拆分可视化组件&lt;/h4&gt;&lt;p&gt;现在再来看看如何从界面入手拆分可复用的组件。假如有如下布局的界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/modular_and_component_summary_3.jpg&quot; alt=&quot;从界面入手拆分可视化组件&quot;&gt;&lt;/p&gt;
&lt;p&gt;很多时候，像界面里面的“搜索框”、“头像按钮”、“内容框”和显示提示用的“加载中”HUD，甚至整个内容的Cell，都是可能在很多地方出现的，而且本身的样式、功能比较集中。&lt;br&gt;如头像可能要支持点击跳转，头像图片圆角，内容框有特定的Padding和字体大小等，所以可以将这些界面上的元素“提”出来，单独封装成一个组件，供整个App复用。或者直接用第三方的组件，如图中的“加载中”HUD，就可以用SVProgressHUD、MBProgressHUD等开源库。&lt;/p&gt;
&lt;p&gt;其实这里的组件有种sunnyxx大大提到过的“Self-Manager”的味道=。=，组件本身负责自己的所有功能、样式，参考：&lt;a href=&quot;http://blog.sunnyxx.com/2015/12/19/self-manager-pattern-in-ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 开发中的 Self-Manager 模式&lt;/a&gt;。当然跟前端的组件化也挺像的，如React里面的component，样式、功能都封装到component里面，以便更好地解耦复用。&lt;/p&gt;
&lt;h4 id=&quot;从数据入手，拆分数据加工组件&quot;&gt;&lt;a href=&quot;#从数据入手，拆分数据加工组件&quot; class=&quot;headerlink&quot; title=&quot;从数据入手，拆分数据加工组件&quot;&gt;&lt;/a&gt;从数据入手，拆分数据加工组件&lt;/h4&gt;&lt;p&gt;再来看看从数据入手，拆分可复用的组件。假如有如下数据处理流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/modular_and_component_summary_4.jpg&quot; alt=&quot;一数据处理流程示例&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实大部分时候，拆分模块、组件都是以清晰的流程、逻辑为基础的，就如上图的过程，当流程清晰后，可以拆分复用的组件也就“出来了”。&lt;br&gt;如从JSON数据实例化出对应的Entity对象，这个功能就是一个完整独立的组件，当然实际开发中会用Mantle、JSONModel等库实现。&lt;br&gt;以此类推，校验、格式化日期（如“几秒钟前、几天前”）、多语言等环节，都可以独立成一个个的组件。&lt;br&gt;当然，这里的组件一般是指能在多个模块使用的功能组件，如果只是在某个界面上才用的，倒不如放到ViewModel、Presenter等这些直接跟界面有关的类里面。&lt;/p&gt;
&lt;h4 id=&quot;小节&quot;&gt;&lt;a href=&quot;#小节&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h4&gt;&lt;p&gt;上面的几种方法比较适合不知道如何下手时使用=。=，真正的开发中，还是要根据实际情况考虑，情况也会复杂些。不过倒是可以总结几点原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单一职责&lt;/strong&gt;，意味着一个模块、一个组件只做一件事，绝不多做。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;正交性&lt;/strong&gt;，意思是不重复，一个模块跟另一个模块的职责是正交的，没有重叠，组件也是一样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单向依赖&lt;/strong&gt;，模块之间最多是单向的依赖，如果出现A依赖B，B也依赖A，那么要么是A、B应该属于一个模块，要么就是整体的拆分有问题。一个完整的软件系统的模块依赖应该是一张有向无环图。（当然这是最终理想=。=）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;紧凑性&lt;/strong&gt;，模块、组件对外暴露的接口、属性应该尽可能的少，接口的参数个数也要少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向接口&lt;/strong&gt;，模块、组件对外提供服务时最好是面向接口的，以便后期可以灵活的变更实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;一切为了更加干净整洁的代码，“May the clean code be with you”&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Component-based_software_engineering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Component-based software engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modular programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间反复研读了&lt;a href=&quot;http://limboy.me/ios/2016/03/10/mgj-components.html&quot;&gt;蘑菇街 App 的组件化之路&lt;/a&gt;、&lt;a href=&quot;http://limboy.me/ios/2016/03/14/mgj-components-continued.html&quot;&gt;蘑菇街 App 的组件化之路·续&lt;/a&gt;和&lt;a href=&quot;http://casatwy.com/iOS-Modulization.html&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;，然后又找到了其它一些研究组件化、模块化方案的文章，但是总觉得差点什么，所以还是决定从头开始思考。文章的标题起的好宽泛，感觉给自己挖了个深坑-。-，其实只是自己对组件化、模块化的一些看法、总结。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>开源项目-TTGTagCollectionView</title>
    <link href="http://tutuge.me/2015/12/31/TTGTagCollectionView/"/>
    <id>http://tutuge.me/2015/12/31/TTGTagCollectionView/</id>
    <published>2015-12-31T13:56:04.000Z</published>
    <updated>2016-03-20T09:03:56.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2016-02-18: 修复了超长标签导致排版错误的Bug。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这段时间做项目的时候，总是需要显示一些“标签”样式的内容，但是又找不到用的顺手的库，所以琢磨了几天，自己实现了出来，就有了这个库：TTGTagCollectionView。如果只需要显示文字标签的话，直接使用&lt;code&gt;TTGTextTagCollectionView&lt;/code&gt;，需要自己定义标签的话，就用&lt;code&gt;TTGTagCollectionView&lt;/code&gt;，效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGTagCollectionView_screenshot.jpeg&quot; alt=&quot;ScreenShot&quot;&gt;&lt;/p&gt;
&lt;p&gt;CocoaPods: &lt;code&gt;pod &amp;quot;TTGTagCollectionView&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Github地址: &lt;a href=&quot;https://github.com/zekunyan/TTGTagCollectionView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/TTGTagCollectionView&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;只显示文字标签-TTGTextTagCollectionView&quot;&gt;&lt;a href=&quot;#只显示文字标签-TTGTextTagCollectionView&quot; class=&quot;headerlink&quot; title=&quot;只显示文字标签 - TTGTextTagCollectionView&quot;&gt;&lt;/a&gt;只显示文字标签 - TTGTextTagCollectionView&lt;/h2&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;p&gt;只显示文字标签的话，直接用&lt;code&gt;TTGTextTagCollectionView&lt;/code&gt;类就可以了：&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;TTGTextTagCollectionView&lt;/span&gt; *tagCollectionView = [[&lt;span class=&quot;symbol&quot;&gt;TTGTextTagCollectionView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;symbol&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.view addSubview:tagCollectionView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[tagCollectionView addTags:@[@&lt;span class=&quot;string&quot;&gt;&quot;TTG&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;Tag&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;collection&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;view&quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;接收点击事件-实现Delegate&quot;&gt;&lt;a href=&quot;#接收点击事件-实现Delegate&quot; class=&quot;headerlink&quot; title=&quot;接收点击事件 - 实现Delegate&quot;&gt;&lt;/a&gt;接收点击事件 - 实现Delegate&lt;/h3&gt;&lt;p&gt;如果想在标签被点击时得到通知，实现对应的Protocol即可，定义如下:&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@protocol&lt;/span&gt; TTGTextTagCollectionViewDelegate &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)&lt;span class=&quot;attribute&quot;&gt;textTagCollectionView&lt;/span&gt;:(TTGTextTagCollectionView *)textTagCollectionView &lt;span class=&quot;attribute&quot;&gt;didTapTag&lt;/span&gt;:(NSString *)tagText &lt;span class=&quot;attribute&quot;&gt;atIndex&lt;/span&gt;:(NSUInteger)index &lt;span class=&quot;attribute&quot;&gt;selected&lt;/span&gt;:(BOOL)selected;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;自定义文字标签样式&quot;&gt;&lt;a href=&quot;#自定义文字标签样式&quot; class=&quot;headerlink&quot; title=&quot;自定义文字标签样式&quot;&gt;&lt;/a&gt;自定义文字标签样式&lt;/h3&gt;&lt;p&gt;如果想对标签的样式做定制，可以设置以下属性：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 标签是否可以被选中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; enableTagSelection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; *tagTextFont;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 未选中和选中时的文字颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tagTextColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tagSelectedTextColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 未选中和选中时的标签背景颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tagBackgroundColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tagSelectedBackgroundColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 圆角值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; tagCornerRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 边框&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; tagBorderWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tagBorderColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 标签宽高的扩展值，可以理解为padding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGSize&lt;/span&gt; extraSpace;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 水平间隔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; horizontalSpacing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 行距&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; verticalSpacing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所有标签总体高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; contentHeight;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;增加、删除标签&quot;&gt;&lt;a href=&quot;#增加、删除标签&quot; class=&quot;headerlink&quot; title=&quot;增加、删除标签&quot;&gt;&lt;/a&gt;增加、删除标签&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 增加一个标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addTag:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)tag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addTags:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *)tags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 删除标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)removeTag:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)tag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)removeTagAtIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)removeAllTags;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在代码里控制标签的选中状态&quot;&gt;&lt;a href=&quot;#在代码里控制标签的选中状态&quot; class=&quot;headerlink&quot; title=&quot;在代码里控制标签的选中状态&quot;&gt;&lt;/a&gt;在代码里控制标签的选中状态&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;setTagAtIndex:&lt;span class=&quot;params&quot;&gt;(NSUInteger)&lt;/span&gt;index selected:&lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;selected;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取所有、选中、未选中标签&quot;&gt;&lt;a href=&quot;#获取所有、选中、未选中标签&quot; class=&quot;headerlink&quot; title=&quot;获取所有、选中、未选中标签&quot;&gt;&lt;/a&gt;获取所有、选中、未选中标签&lt;/h3&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;name&quot;&gt;NSArray&lt;/span&gt; &amp;lt;NSString *&amp;gt; *)allTags&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;name&quot;&gt;NSArray&lt;/span&gt; &amp;lt;NSString *&amp;gt; *)allSelectedTags&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;name&quot;&gt;NSArray&lt;/span&gt; &amp;lt;NSString *&amp;gt; *)allNotSelectedTags&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;重新加载-Reload&quot;&gt;&lt;a href=&quot;#重新加载-Reload&quot; class=&quot;headerlink&quot; title=&quot;重新加载 - Reload&quot;&gt;&lt;/a&gt;重新加载 - Reload&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;- (void)reload&lt;/code&gt;方法重新加载所有标签。&lt;/p&gt;
&lt;h2 id=&quot;显示自定义的标签控件View-TTGTagCollectionView&quot;&gt;&lt;a href=&quot;#显示自定义的标签控件View-TTGTagCollectionView&quot; class=&quot;headerlink&quot; title=&quot;显示自定义的标签控件View - TTGTagCollectionView&quot;&gt;&lt;/a&gt;显示自定义的标签控件View - TTGTagCollectionView&lt;/h2&gt;&lt;p&gt;如果想自己定义标签View，如同时显示图像、文字、按钮，可以用&lt;code&gt;TTGTagCollectionView&lt;/code&gt;类实现。&lt;/p&gt;
&lt;h3 id=&quot;基本要求-实现DataSource和Delegate&quot;&gt;&lt;a href=&quot;#基本要求-实现DataSource和Delegate&quot; class=&quot;headerlink&quot; title=&quot;基本要求 - 实现DataSource和Delegate&quot;&gt;&lt;/a&gt;基本要求 - 实现DataSource和Delegate&lt;/h3&gt;&lt;p&gt;DataSource的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TTGTagCollectionViewDataSource&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@required&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回标签数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)numberOfTagsInTagCollectionView:(TTGTagCollectionView *)tagCollectionView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回对应标签View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)tagCollectionView:(TTGTagCollectionView *)tagCollectionView tagViewForIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Delegate的定义如下:&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@protocol&lt;/span&gt; TTGTagCollectionViewDelegate &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 必须实现：返回对应的标签Size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (CGSize)&lt;span class=&quot;string&quot;&gt;tagCollectionView:&lt;/span&gt;(TTGTagCollectionView *)tagCollectionView &lt;span class=&quot;string&quot;&gt;sizeForTagAtIndex:&lt;/span&gt;(NSUInteger)index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 点击标签时回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;tagCollectionView:&lt;/span&gt;(TTGTagCollectionView *)tagCollectionView &lt;span class=&quot;string&quot;&gt;didSelectTag:&lt;/span&gt;(UIView *)tagView &lt;span class=&quot;string&quot;&gt;atIndex:&lt;/span&gt;(NSUInteger)index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所有标签总体高度更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;tagCollectionView:&lt;/span&gt;(TTGTagCollectionView *)tagCollectionView &lt;span class=&quot;string&quot;&gt;updateContentHeight:&lt;/span&gt;(CGFloat)newContentHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;跟UITableView的思路一致~&lt;/p&gt;
&lt;h3 id=&quot;设置标签的行距、间隔&quot;&gt;&lt;a href=&quot;#设置标签的行距、间隔&quot; class=&quot;headerlink&quot; title=&quot;设置标签的行距、间隔&quot;&gt;&lt;/a&gt;设置标签的行距、间隔&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 水平间隔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; horizontalSpacing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 行距&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; verticalSpacing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所有标签总体高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; contentHeight;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;重新加载-Reload-1&quot;&gt;&lt;a href=&quot;#重新加载-Reload-1&quot; class=&quot;headerlink&quot; title=&quot;重新加载 - Reload&quot;&gt;&lt;/a&gt;重新加载 - Reload&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;- (void)reload&lt;/code&gt;方法重新加载所有标签。&lt;/p&gt;
&lt;h2 id=&quot;End&quot;&gt;&lt;a href=&quot;#End&quot; class=&quot;headerlink&quot; title=&quot;End&quot;&gt;&lt;/a&gt;End&lt;/h2&gt;&lt;p&gt;2015最后一天~&lt;br&gt;新年快乐~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2016-02-18: 修复了超长标签导致排版错误的Bug。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这段时间做项目的时候，总是需要显示一些“标签”样式的内容，但是又找不到用的顺手的库，所以琢磨了几天，自己实现了出来，就有了这个库：TTGTagCollectionView。如果只需要显示文字标签的话，直接使用&lt;code&gt;TTGTextTagCollectionView&lt;/code&gt;，需要自己定义标签的话，就用&lt;code&gt;TTGTagCollectionView&lt;/code&gt;，效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGTagCollectionView_screenshot.jpeg&quot; alt=&quot;ScreenShot&quot;&gt;&lt;/p&gt;
&lt;p&gt;CocoaPods: &lt;code&gt;pod &amp;quot;TTGTagCollectionView&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Github地址: &lt;a href=&quot;https://github.com/zekunyan/TTGTagCollectionView&quot;&gt;https://github.com/zekunyan/TTGTagCollectionView&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="开源" scheme="http://tutuge.me/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>有趣的Autolayout示例3-Masonry实现</title>
    <link href="http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/"/>
    <id>http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/</id>
    <published>2015-12-14T13:36:08.000Z</published>
    <updated>2016-06-02T13:27:04.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;2016-06-02: 感谢&lt;a href=&quot;http://weibo.com/u/2953626141&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我不是蜡笔小新但是我有小白&lt;/a&gt;，发现了Case 2的最后两个cell展开动画问题，原来是tableView的&lt;code&gt;estimatedRowHeight&lt;/code&gt;会跟展开动画冲突的缘故。&lt;br&gt;2015-12-23: 感谢&lt;a href=&quot;https://github.com/XVXVXXX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XVXVXXX&lt;/a&gt;的PR,Case 1不再需要Fake Header View，直接用contentInset就好~&lt;br&gt;2015-12-17：Case3的等间距，用UIStackView实现最优雅，但是无奈只有iOS9以上支持。兼容方案如OAStackView也可以，但是在UITableViewCell里面用，或者需要频繁的增减内部View的数量时，性能损耗有点厉害，会卡。所以，还是要看需求=。=&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;第三篇来了。&lt;br&gt;依然是3个小例子，主要部分用Masonry手写代码实现，其它的约束在storyboard里面直接拖拽搭建。&lt;br&gt;至于为啥不用VFL，主要是因为它的“描述性”的写法很容易出错，没有补全、不好调试，写起来没有“代码”的感觉=。=。当然，这个仁者见仁智者见智~&lt;br&gt;三个例子分别是：&lt;strong&gt;Parallax Header&lt;/strong&gt;，&lt;strong&gt;动态变高度的UITableViewCell&lt;/strong&gt;，以及&lt;strong&gt;两种方式实现等间距&lt;/strong&gt;。原理其实都很简单，例子也都是平时积累起来的。&lt;/p&gt;
&lt;p&gt;前两篇：&lt;br&gt;第一篇：&lt;a href=&quot;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&quot;&gt;有趣的Autolayout示例-Masonry实现&lt;/a&gt;&lt;br&gt;第二篇：&lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github地址：&lt;br&gt;&lt;a href=&quot;https://github.com/zekunyan/AutolayoutExampleWithMasonry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/AutolayoutExampleWithMasonry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry3_1.gif&quot; alt=&quot;Gif示例&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Case-1-Parallax-Header&quot;&gt;&lt;a href=&quot;#Case-1-Parallax-Header&quot; class=&quot;headerlink&quot; title=&quot;Case 1: Parallax Header&quot;&gt;&lt;/a&gt;Case 1: Parallax Header&lt;/h2&gt;&lt;p&gt;Parallax翻译过来就是“视差”，我个人觉得就是一种“联动”的效果，在许多应用里面都能见到。当前这个例子，就是最简单的一种。&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;原理其实就是根据UITableView当前下拉的位移值，同步改变Parallax Header的高度，即&lt;code&gt;NSLayoutConstraint&lt;/code&gt;的&lt;code&gt;constant&lt;/code&gt;属性，对应到Masonry里面就是重新让约束&lt;code&gt;equalTo()&lt;/code&gt;一次。&lt;/p&gt;
&lt;h3 id=&quot;主要步骤&quot;&gt;&lt;a href=&quot;#主要步骤&quot; class=&quot;headerlink&quot; title=&quot;主要步骤&quot;&gt;&lt;/a&gt;主要步骤&lt;/h3&gt;&lt;p&gt;主要的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置UITableView背景透明。&lt;/li&gt;
&lt;li&gt;在UITableView正下方放置一个UIImageView，作为我们的Parallax Header，设置&lt;code&gt;contentMode&lt;/code&gt;为&lt;code&gt;UIViewContentModeScaleAspectFill&lt;/code&gt;，并加上&lt;strong&gt;上左右&lt;/strong&gt;的固定约束，使其与UITableView对其，然后加上一个固定高度的约束，并在代码里面保存。&lt;/li&gt;
&lt;li&gt;设置UITableView的&lt;code&gt;contentInset&lt;/code&gt;跟Parallax Header等高，使UITableView的头部“撑开”，让后面的Parallax Header露出来。&lt;/li&gt;
&lt;li&gt;在代码里面监听UITableView的&lt;code&gt;contentOffset&lt;/code&gt;属性，当y小于0时，增加Parallax Header高度，使其产生联动效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;约束示意图如下：&lt;br&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry3_6.png&quot; alt=&quot;Parallax Header&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;创建Parallax Header的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_parallaxHeaderView = [UIImageView new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 把Parallax Header放在UITableView的下面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.view insertSubview:_parallaxHeaderView belowSubview:_tableView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置contentMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_parallaxHeaderView.contentMode = UIViewContentModeScaleAspectFill&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_parallaxHeaderView.image = [UIImage imageNamed:@&lt;span class=&quot;string&quot;&gt;&quot;parallax_header_back&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_parallaxHeaderView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.right.equalTo(self.view)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(self.mas_topLayoutGuideBottom)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 保存高度约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _parallaxHeaderHeightConstraint = make.height.equalTo(@(ParallaxHeaderHeight))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置UITableView的&lt;code&gt;contentInset&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_tableView.contentInset = UIEdgeInsetsMake(ParallaxHeaderHeight, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;监听contentOffset属性的两种方法&quot;&gt;&lt;a href=&quot;#监听contentOffset属性的两种方法&quot; class=&quot;headerlink&quot; title=&quot;监听contentOffset属性的两种方法&quot;&gt;&lt;/a&gt;监听&lt;code&gt;contentOffset&lt;/code&gt;属性的两种方法&lt;/h3&gt;&lt;h4 id=&quot;方法1：直接实现scrollViewDidScroll&quot;&gt;&lt;a href=&quot;#方法1：直接实现scrollViewDidScroll&quot; class=&quot;headerlink&quot; title=&quot;方法1：直接实现scrollViewDidScroll:&quot;&gt;&lt;/a&gt;方法1：直接实现&lt;code&gt;scrollViewDidScroll:&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;这种方法应该是最直接的：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;attribute&quot;&gt;scrollViewDidScroll&lt;/span&gt;:(UIScrollView *)&lt;span class=&quot;decorator&quot;&gt;scrollView&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scrollView.contentOffset.y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 增加Parallax Header对应的高度，y是负数，所以减去&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _parallaxHeaderHeightConstraint.equalTo(@(ParallaxHeaderHeight - scrollView.contentOffset.y));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;decorator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _parallaxHeaderHeightConstraint.equalTo(@(ParallaxHeaderHeight));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;方法2：KVO监听contentOffset变化&quot;&gt;&lt;a href=&quot;#方法2：KVO监听contentOffset变化&quot; class=&quot;headerlink&quot; title=&quot;方法2：KVO监听contentOffset变化&quot;&gt;&lt;/a&gt;方法2：KVO监听&lt;code&gt;contentOffset&lt;/code&gt;变化&lt;/h4&gt;&lt;p&gt;用KVO的好处就是不用要求当前类实现UITableView的delegate，对于代码的拆分有好处。&lt;/p&gt;
&lt;p&gt;增加KVO：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[_tableView &lt;span class=&quot;string&quot;&gt;addObserver:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;forKeyPath:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;contentOffset&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;options:&lt;/span&gt;NSKeyValueObservingOptionNew &lt;span class=&quot;string&quot;&gt;context:&lt;/span&gt;nil];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现监听:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)observeValueForKeyPath:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)keyPath ofObject:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)object change:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *,&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;gt; *)change context:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)context &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([keyPath isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;contentOffset&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 取出contentOffset值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; contentOffset = ((&lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; *)change[&lt;span class=&quot;built_in&quot;&gt;NSKeyValueChangeNewKey&lt;/span&gt;]).CGPointValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 改变高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (contentOffset.y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _parallaxHeaderHeightConstraint.equalTo(@(ParallaxHeaderHeight - contentOffset.y));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _parallaxHeaderHeightConstraint.equalTo(@(ParallaxHeaderHeight));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后别忘了取消KVO:&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;decorator&quot;&gt;dealloc&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_tableView &lt;span class=&quot;attribute&quot;&gt;removeObserver&lt;/span&gt;:&lt;span class=&quot;attribute&quot;&gt;self forKeyPath&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;contentOffset&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;小节&quot;&gt;&lt;a href=&quot;#小节&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h3&gt;&lt;p&gt;&lt;code&gt;NSLayoutConstraint&lt;/code&gt;的&lt;code&gt;constant&lt;/code&gt;属性非常有用，既可以做动画，也可以方便的调整现有布局，大家多多挖掘哈~&lt;/p&gt;
&lt;h2 id=&quot;Case-2-动态变高度的UITableViewCell&quot;&gt;&lt;a href=&quot;#Case-2-动态变高度的UITableViewCell&quot; class=&quot;headerlink&quot; title=&quot;Case 2: 动态变高度的UITableViewCell&quot;&gt;&lt;/a&gt;Case 2: 动态变高度的UITableViewCell&lt;/h2&gt;&lt;p&gt;嗯，又是UITableViewCell=。=&lt;br&gt;只不过这次的是“动态改变高度”，就是类似于微信朋友圈里面的“全文”那种效果。&lt;/p&gt;
&lt;p&gt;单纯的不定高UITableViewCell不是本例子的重点，详细请看&lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;里面的Case1。&lt;/p&gt;
&lt;p&gt;先说一点我觉得在代码设计上比较重要的地方：&lt;strong&gt;Cell只负责显示内容，不应该保存具体的状态信息&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;我们都知道，UITableViewCell是会被重用的，也就是说，不能保证UITableView里面的哪一行一定由哪一个UITableViewCell实例展示。&lt;br&gt;动态展开、收回Cell的时候，我们需要一个BOOL变量，用于保存当前Cell的展开、收回的状态。这个BOOL变量就是所谓的“&lt;strong&gt;状态&lt;/strong&gt;”，这个状态应该保存在当前Cell的数据里面，如Entity、ViewModel里面。对Cell填充数据的时候，再根据这个“状态”，修改对应的约束。&lt;/p&gt;
&lt;h3 id=&quot;主要步骤-1&quot;&gt;&lt;a href=&quot;#主要步骤-1&quot; class=&quot;headerlink&quot; title=&quot;主要步骤&quot;&gt;&lt;/a&gt;主要步骤&lt;/h3&gt;&lt;p&gt;先看看大致的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过点击的Cell找到对应的数据Entity。&lt;/li&gt;
&lt;li&gt;改变这一行数据Entity用于保存状态的BOOL变量的值。&lt;/li&gt;
&lt;li&gt;让UITableView刷新这一行。&lt;/li&gt;
&lt;li&gt;刷新的时候，Cell根据这个BOOL变量重新调整约束、填充数据，得到新的高度。&lt;/li&gt;
&lt;li&gt;最后就是Cell的高度变化。（此时的这一行的Cell实例并不一定是之前的那个实例）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h3&gt;&lt;p&gt;为了尽量简单，例子里面的Cell只有三个子控件，第一个UILabel是标题等调试信息，第二个UILabel用来显示多行文本，最后一个UIButton用来切换展开、收回的状态。大致的布局如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry3_3.png&quot; alt=&quot;Case2 UITableViewCell布局示意&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;布局的代码&quot;&gt;&lt;a href=&quot;#布局的代码&quot; class=&quot;headerlink&quot; title=&quot;布局的代码&quot;&gt;&lt;/a&gt;布局的代码&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;标题UIlabel&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_titleLabel = [UILabel new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:_titleLabel]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_titleLabel mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.height.equalTo(@&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.right.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.top.equalTo(self.contentView).with.insets(UIEdgeInsetsMake(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;底部“More”按钮&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_moreButton = [UIButton &lt;span class=&quot;string&quot;&gt;buttonWithType:&lt;/span&gt;UIButtonTypeSystem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_moreButton &lt;span class=&quot;string&quot;&gt;setTitle:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;More&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;forState:&lt;/span&gt;UIControlStateNormal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_moreButton &lt;span class=&quot;string&quot;&gt;addTarget:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;action:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;switchExpandedState:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;forControlEvents:&lt;/span&gt;UIControlEventTouchUpInside];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView &lt;span class=&quot;string&quot;&gt;addSubview:&lt;/span&gt;_moreButton];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_moreButton &lt;span class=&quot;string&quot;&gt;mas_makeConstraints:&lt;/span&gt;^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.height.equalTo(@&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.and.right.and.bottom.equalTo(self.contentView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;正文UIlabel&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CGFloat preferredMaxWidth = [UIScreen mainScreen].bounds.size.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Content - 多行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel = [UILabel new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel.numberOfLines = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel.lineBreakMode = NSLineBreakByCharWrapping&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel.clipsToBounds = YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel.preferredMaxLayoutWidth = preferredMaxWidth&lt;span class=&quot;comment&quot;&gt;; // 多行时必须设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:_contentLabel]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_contentLabel mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.right.equalTo(self.contentView).with.insets(UIEdgeInsetsMake(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(_titleLabel.mas_bottom).with.offset(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.bottom.equalTo(_moreButton.mas_top).with.offset(&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 先加上高度的限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _contentHeightConstraint = make.height.equalTo(@&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;).with.priorityHigh()&lt;span class=&quot;comment&quot;&gt;; // 优先级只设置成High,比正常的高度约束低一些,防止冲突&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;为什么要加正文UIlabel高度约束&quot;&gt;&lt;a href=&quot;#为什么要加正文UIlabel高度约束&quot; class=&quot;headerlink&quot; title=&quot;为什么要加正文UIlabel高度约束&quot;&gt;&lt;/a&gt;为什么要加正文UIlabel高度约束&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;里面的Case1也讲过，获取Cell的高度的方法是&lt;code&gt;systemLayoutSizeFittingSize:&lt;/code&gt;，如果不对正文UILabel加上高度约束，获取的高度就是根据正文的内容计算出来的，这与之前的例子里面一致。&lt;/p&gt;
&lt;p&gt;为了使高度固定，就需要加上一个高度约束，使得&lt;code&gt;systemLayoutSizeFittingSize:&lt;/code&gt;计算时按照这个约束去计算。&lt;/p&gt;
&lt;h4 id=&quot;为什么正文UILabel的高度约束的优先级要调整为High&quot;&gt;&lt;a href=&quot;#为什么正文UILabel的高度约束的优先级要调整为High&quot; class=&quot;headerlink&quot; title=&quot;为什么正文UILabel的高度约束的优先级要调整为High&quot;&gt;&lt;/a&gt;为什么正文UILabel的高度约束的优先级要调整为&lt;code&gt;High&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在UITableView刷新时，会先计算高度，即先调用&lt;code&gt;tableView: heightForRowAtIndexPath:&lt;/code&gt;方法，如果高度约束为默认的1000最高的话，会产生冲突。&lt;/p&gt;
&lt;p&gt;因为在计算的时候，我们的高度是由一个“template cell”填充内容后计算得来，这个时候的高度已经是展开以后的高度，当前的Cell还来不及调整约束（甚至不会调整，如果只用&lt;code&gt;beginUpdates和endUpdates&lt;/code&gt;更新的话，Cell不会reload），所以降低这个高度约束的优先级，去掉冲突。&lt;/p&gt;
&lt;h3 id=&quot;使用install和uninstall控制约束&quot;&gt;&lt;a href=&quot;#使用install和uninstall控制约束&quot; class=&quot;headerlink&quot; title=&quot;使用install和uninstall控制约束&quot;&gt;&lt;/a&gt;使用install和uninstall控制约束&lt;/h3&gt;&lt;p&gt;为了能得正确高度，Cell需要根据具体的数据、状态更新约束。&lt;br&gt;这里可以使用&lt;code&gt;install&lt;/code&gt;和&lt;code&gt;uninstall&lt;/code&gt;来控制正文UILabel高度约束是否生效。在填充Cell的数据时，就可以根据状态BOOL值来选择调用：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;setEntity&lt;/span&gt;:(Case8DataEntity *)&lt;span class=&quot;selector-tag&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;indexPath&lt;/span&gt;:(NSIndexPath *)&lt;span class=&quot;selector-tag&quot;&gt;indexPath&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置数据...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 改变约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (_entity.expanded) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-attr&quot;&gt;[_contentHeightConstraint uninstall]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;selector-tag&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-attr&quot;&gt;[_contentHeightConstraint install]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建Delegate，使得Cell的事件得以回传到ViewController&quot;&gt;&lt;a href=&quot;#创建Delegate，使得Cell的事件得以回传到ViewController&quot; class=&quot;headerlink&quot; title=&quot;创建Delegate，使得Cell的事件得以回传到ViewController&quot;&gt;&lt;/a&gt;创建Delegate，使得Cell的事件得以回传到ViewController&lt;/h3&gt;&lt;p&gt;在点击Cell的“More”按钮时，需要改变当前的展开收回状态BOOL值，还需要让UITableView刷新。&lt;br&gt;直接在Cell里面修改Entity数据，或者持有UITableView实例都是不恰当的，这个时候可以用Delegate模式实现。&lt;/p&gt;
&lt;p&gt;Delegate如下：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@protocol&lt;/span&gt; Case8CellDelegate &lt;span class=&quot;variable&quot;&gt;&amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)case8Cell:(Case8Cell &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;)cell switchExpandedStateWithIndexPath:(NSIndexPath &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;)index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后ViewController实现这个Protocol&lt;/p&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;Cell:(Case&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;Cell *)cell switchExpandedStateWithIndexPath:(NSIndexPath *)index &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 取出对应数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Case&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;DataEntity *&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;DataEntity = &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;data[(NSUInteger) index.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 修改状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;DataEntity.expanded = !&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;DataEntity.expanded; &lt;span class=&quot;comment&quot;&gt;// 切换展开还是收回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;DataEntity.cellHeight = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 重置高度缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 刷新UITableView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cell保存ViewController这个delegate，然后在按钮点击时回调&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Cellb保存delegate，注意weak&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (weak, nonatomic) id &amp;lt;Case8CellDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Cell的“More”按钮点击&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;switchExpandedState&lt;/span&gt;:(UIButton *)&lt;span class=&quot;selector-tag&quot;&gt;button&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[_delegate case8Cell:self switchExpandedStateWithIndexPath:_indexPath]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;刷新的方式&quot;&gt;&lt;a href=&quot;#刷新的方式&quot; class=&quot;headerlink&quot; title=&quot;刷新的方式&quot;&gt;&lt;/a&gt;刷新的方式&lt;/h3&gt;&lt;p&gt;UITableView的刷新可以用以下几种方法：&lt;/p&gt;
&lt;h4 id=&quot;1-reloadData&quot;&gt;&lt;a href=&quot;#1-reloadData&quot; class=&quot;headerlink&quot; title=&quot;1. reloadData&quot;&gt;&lt;/a&gt;1. reloadData&lt;/h4&gt;&lt;p&gt;用&lt;code&gt;reloadData&lt;/code&gt;刷新，其实就是把所有Cell都刷新了一次，代价有点大，不推荐。&lt;/p&gt;
&lt;h4 id=&quot;2-reloadRowsAtIndexPaths-withRowAnimation&quot;&gt;&lt;a href=&quot;#2-reloadRowsAtIndexPaths-withRowAnimation&quot; class=&quot;headerlink&quot; title=&quot;2. reloadRowsAtIndexPaths:withRowAnimation:&quot;&gt;&lt;/a&gt;2. reloadRowsAtIndexPaths:withRowAnimation:&lt;/h4&gt;&lt;p&gt;这个方法的好处就是可以指定要刷新的哪几行，而且可以指定刷新时的动画形式，一般来说用&lt;code&gt;UITableViewRowAnimationFade&lt;/code&gt;就不错。&lt;br&gt;刷新的时候，&lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt;会被调用，原来的Cell实例会被替换。&lt;/p&gt;
&lt;h4 id=&quot;3-beginUpdates和endUpdates&quot;&gt;&lt;a href=&quot;#3-beginUpdates和endUpdates&quot; class=&quot;headerlink&quot; title=&quot;3. beginUpdates和endUpdates&quot;&gt;&lt;/a&gt;3. beginUpdates和endUpdates&lt;/h4&gt;&lt;p&gt;这两个方法一般都是成对使用的，在中间可以执行插入、删除等调整Cell的操作，改变Cell的高度也可以用它。&lt;br&gt;不过要注意的是，这两个方法并不会重新加载Cell，只是单纯的改变了高度，所以如果Cell原来的约束里面有高度约束这种，而又保持默认的优先级，就会产生约束冲突。&lt;/p&gt;
&lt;p&gt;从效果上来讲，我个人觉得用&lt;code&gt;reloadRowsAtIndexPaths:withRowAnimation:&lt;/code&gt;会更好一些~&lt;/p&gt;
&lt;h3 id=&quot;小节-1&quot;&gt;&lt;a href=&quot;#小节-1&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h3&gt;&lt;p&gt;想用好Autolayout不容易啊，要仔细研究UITableView的机制=。=&lt;/p&gt;
&lt;h2 id=&quot;Case-3-两种方式实现等间距&quot;&gt;&lt;a href=&quot;#Case-3-两种方式实现等间距&quot; class=&quot;headerlink&quot; title=&quot;Case 3: 两种方式实现等间距&quot;&gt;&lt;/a&gt;Case 3: 两种方式实现等间距&lt;/h2&gt;&lt;p&gt;等间距，也就是View之间的X或Y轴上的坐标等差，在这里我只举出水平方向上的等间距，垂直方向上一个道理。&lt;/p&gt;
&lt;h3 id=&quot;方法1：利用透明等宽的占位View填充空白处，实现等间距&quot;&gt;&lt;a href=&quot;#方法1：利用透明等宽的占位View填充空白处，实现等间距&quot; class=&quot;headerlink&quot; title=&quot;方法1：利用透明等宽的占位View填充空白处，实现等间距&quot;&gt;&lt;/a&gt;方法1：利用透明等宽的占位View填充空白处，实现等间距&lt;/h3&gt;&lt;p&gt;步骤很简单，就是循环创建真正要展示的View和占位View，布局如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry3_4.png?refresh&quot; alt=&quot;利用占位View实现等间距&quot;&gt;&lt;/p&gt;
&lt;p&gt;说明一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;占位View的宽度不能定死，这样外部的父级View宽度变化时，内部的View仍然可以保持等间距。&lt;/li&gt;
&lt;li&gt;既然占位View宽度不定，总得有个宽度的参照，这个参照就是其它的占位View，也就是说，要给占位View加上两两宽度相等的约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 先创建第一个占位View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIView *lastSpaceView = [UIView new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lastSpaceView.backgroundColor = [UIColor greenColor]&lt;span class=&quot;comment&quot;&gt;; // 用绿色标出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_containerView1 addSubview:lastSpaceView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加上左下三个约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[lastSpaceView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.top.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.bottom.equalTo(_containerView1)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 循环创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (NSUInteger i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; ITEM_COUNT; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建ItemView，即真正显示内容的View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *itemView = [self getItemViewWithIndex:i]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_containerView1 addSubview:itemView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 固定宽高，左边、垂直方向中心与上一个占位View对齐。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [itemView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.height.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.equalTo(@(ITEM_SIZE))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.left.equalTo(lastSpaceView.mas_right)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.centerY.equalTo(_containerView1.mas_centerY)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建下一个占位View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *spaceView = [UIView new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spaceView.backgroundColor = [UIColor greenColor]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_containerView1 addSubview:spaceView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 左边与当前ItemView对齐，上下与边界对齐，宽度与上一个占位View相等！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 但是右边的约束不能加，因为要留给下一次循环与下一个ItemView的左边界添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [spaceView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.left.equalTo(itemView.mas_right).with.priorityHigh()&lt;span class=&quot;comment&quot;&gt;; // 降低优先级，防止宽度不够出现约束冲突&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.top.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.bottom.equalTo(_containerView1)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.equalTo(lastSpaceView.mas_width)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lastSpaceView = spaceView&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为最后一个占位View添加右边约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[lastSpaceView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.right.equalTo(_containerView1.mas_right)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像这种重复添加View和约束，合理使用变量保存“上一次循环”创建的占位View，就可以大大简化代码，而且可以任意调整数量~&lt;/p&gt;
&lt;h3 id=&quot;方法2：直接按比例设置multiplier&quot;&gt;&lt;a href=&quot;#方法2：直接按比例设置multiplier&quot; class=&quot;headerlink&quot; title=&quot;方法2：直接按比例设置multiplier&quot;&gt;&lt;/a&gt;方法2：直接按比例设置multiplier&lt;/h3&gt;&lt;p&gt;等间距，其实就是按比例，再进一步就是x坐标是按比例的。&lt;br&gt;延伸到View上，可以理解为centerX的值与父级View的宽度按比例增减。&lt;/p&gt;
&lt;p&gt;但是，读者可以尝试一下，直接设置一个View的边界、位置属性，如centerX，等于其父级View的宽度是会报错的。&lt;/p&gt;
&lt;p&gt;难道就没有办法了？当然不是。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;始终在坐标系上考虑约束&lt;/strong&gt;&lt;br&gt;在上一篇&lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;的开头我也提到过，Autolayout最终都是体现在坐标系上，一切都会按照&lt;code&gt;viewA-attribute = viewB-attribute * multiplier + constant&lt;/code&gt;这种公式去计算，既然centerX不能跟父级的Width宽度一起加约束，那就换一个，如父级的&lt;strong&gt;右边界&lt;/strong&gt;，父级View的&lt;strong&gt;右边界&lt;/strong&gt;在父级本身的参照系下的Y坐标值不就等于其宽度吗~&lt;/p&gt;
&lt;p&gt;所以，可以按照如下方式加约束：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry3_5.png&quot; alt=&quot;按比例设置multiplier实现等间距&quot;&gt;&lt;/p&gt;
&lt;p&gt;对应的代码也会异常简单：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 循环创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (NSUInteger i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; ITEM_COUNT; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *itemView = [self getItemViewWithIndex:i]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_containerView2 addSubview:itemView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [itemView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 宽高一定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.height.equalTo(@(ITEM_SIZE))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 确定Y坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.centerY.equalTo(_containerView2.mas_centerY)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 确定X坐标，注意分子分母都要加1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.centerX.equalTo(_containerView2.mas_right).multipliedBy(((CGFloat)i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / ((CGFloat)ITEM_COUNT + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;小节-2&quot;&gt;&lt;a href=&quot;#小节-2&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h3&gt;&lt;p&gt;很多时候，灵活的使用multiplier能大大简化开发~&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;三个例子说完了，你有啥收获呢~？:-D&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;2016-06-02: 感谢&lt;a href=&quot;http://weibo.com/u/2953626141&quot;&gt;我不是蜡笔小新但是我有小白&lt;/a&gt;，发现了Case 2的最后两个cell展开动画问题，原来是tableView的&lt;code&gt;estimatedRowHeight&lt;/code&gt;会跟展开动画冲突的缘故。&lt;br&gt;2015-12-23: 感谢&lt;a href=&quot;https://github.com/XVXVXXX&quot;&gt;XVXVXXX&lt;/a&gt;的PR,Case 1不再需要Fake Header View，直接用contentInset就好~&lt;br&gt;2015-12-17：Case3的等间距，用UIStackView实现最优雅，但是无奈只有iOS9以上支持。兼容方案如OAStackView也可以，但是在UITableViewCell里面用，或者需要频繁的增减内部View的数量时，性能损耗有点厉害，会卡。所以，还是要看需求=。=&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;第三篇来了。&lt;br&gt;依然是3个小例子，主要部分用Masonry手写代码实现，其它的约束在storyboard里面直接拖拽搭建。&lt;br&gt;至于为啥不用VFL，主要是因为它的“描述性”的写法很容易出错，没有补全、不好调试，写起来没有“代码”的感觉=。=。当然，这个仁者见仁智者见智~&lt;br&gt;三个例子分别是：&lt;strong&gt;Parallax Header&lt;/strong&gt;，&lt;strong&gt;动态变高度的UITableViewCell&lt;/strong&gt;，以及&lt;strong&gt;两种方式实现等间距&lt;/strong&gt;。原理其实都很简单，例子也都是平时积累起来的。&lt;/p&gt;
&lt;p&gt;前两篇：&lt;br&gt;第一篇：&lt;a href=&quot;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&quot;&gt;有趣的Autolayout示例-Masonry实现&lt;/a&gt;&lt;br&gt;第二篇：&lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github地址：&lt;br&gt;&lt;a href=&quot;https://github.com/zekunyan/AutolayoutExampleWithMasonry&quot;&gt;https://github.com/zekunyan/AutolayoutExampleWithMasonry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry3_1.gif&quot; alt=&quot;Gif示例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="Autolayout" scheme="http://tutuge.me/tags/Autolayout/"/>
    
      <category term="Masonry" scheme="http://tutuge.me/tags/Masonry/"/>
    
  </entry>
  
  <entry>
    <title>Swift开源项目: TTGEmojiRate的实现</title>
    <link href="http://tutuge.me/2015/10/25/ttgemojirate-lib/"/>
    <id>http://tutuge.me/2015/10/25/ttgemojirate-lib/</id>
    <published>2015-10-25T11:32:42.000Z</published>
    <updated>2016-03-20T09:03:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间在Dribbble上发现了一个&lt;a href=&quot;https://dribbble.com/shots/2211556-Rating-Version-A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rating控件&lt;/a&gt;的演示动画，控件以Emoji表情为基础，结合了上下滑动手势，正好最近正在深入学习iOS动画、绘图相关的知识，就尝试着用&lt;code&gt;UIBezierPath&lt;/code&gt;实现了出来。本文就是TTGEmojiRate的实现过程。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/zekunyan/TTGEmojiRate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/TTGEmojiRate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGEmojiRate_screenshot2.gif&quot; alt=&quot;TTGEmojiRate Example&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;先看看原本的效果：&lt;a href=&quot;https://dribbble.com/shots/2211556-Rating-Version-A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rating Version A - Hoang Nguyen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGEmojiRate_Dribbble.gif&quot; alt=&quot;Rating Version A - Hoang Nguyen&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，主要的特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以上下拖动，改变Emoji表情嘴的弧度。&lt;/li&gt;
&lt;li&gt;拖动的时候Rate的值也会随之变化，从0到5，并且跟表情的“喜怒”相对应。&lt;/li&gt;
&lt;li&gt;颜色也会变化，从绿色到蓝色再到红色，也对应表情的“喜怒”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际实现的时候，增加了眼睛元素，并且增强了自定义，如颜色的变化范围、线条的粗细等都可以设定，基本的思路还是不变的。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;开始写代码之前，先理理思路。&lt;br&gt;拖动的时候，直接影响的应该是Rate值，然后在Rate值改变的时候刷新整个控件，刷新的时候重绘。重绘的时候，嘴、眼睛的弧度，颜色的值都要根据Rate值重新计算，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_ttgemojirate_1.png&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;拖动改变Rate值&quot;&gt;&lt;a href=&quot;#拖动改变Rate值&quot; class=&quot;headerlink&quot; title=&quot;拖动改变Rate值&quot;&gt;&lt;/a&gt;拖动改变Rate值&lt;/h3&gt;&lt;p&gt;这个还是很容易实现的，直接重写&lt;code&gt;UIView&lt;/code&gt;的touch相关的三个方法，在里面记录拖动在Y轴上的变化值，然后映射到Rate值上就可以了。&lt;/p&gt;
&lt;p&gt;先声明一个CGPoint属性，用来保存手指按下时的点位置：&lt;br&gt;&lt;figure class=&quot;highlight delphi&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; touchPoint: CGPoint? = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在手指移动的时候，在&lt;code&gt;touchesMoved&lt;/code&gt;方法里面计算当前点跟上一次触摸点的Y轴上的&lt;strong&gt;差值&lt;/strong&gt;，然后映射到Rate值上。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;touchesMoved&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(touches: Set&amp;lt;UITouch&amp;gt;, withEvent event: UIEvent?)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取当前触摸点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; currentPoint = touches.first?.locationInView(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 改变Rate值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rateValue = rateValue + &lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;((currentPoint!.y - touchPoint!.y) / &lt;span class=&quot;type&quot;&gt;CGRectGetHeight&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds) * rateDragSensitivity)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 保存当前触摸点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    touchPoint = currentPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算Y轴差值的时候，除以了当前控件的高度，这是为了保证Rate值按比例增减。&lt;/li&gt;
&lt;li&gt;增加了一个&lt;code&gt;rateDragSensitivity&lt;/code&gt;属性，用来调节改变Rate值的“灵敏度”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UIBezierPath-贝塞尔曲线&quot;&gt;&lt;a href=&quot;#UIBezierPath-贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;UIBezierPath - 贝塞尔曲线&quot;&gt;&lt;/a&gt;UIBezierPath - 贝塞尔曲线&lt;/h3&gt;&lt;p&gt;控件的主要内容都是用&lt;code&gt;UIBezierPath&lt;/code&gt;绘制出来的。网上关于&lt;code&gt;UIBezierPath&lt;/code&gt;的讲解很多，在这里就不详细说了。&lt;br&gt;简单来说，&lt;code&gt;UIBezierPath&lt;/code&gt;用来绘制矢量路径，是一种参数曲线，在使用的时候，只需要先设定好锚点、控制点，系统就可以根据贝塞尔曲线的算法，绘制出对应的线，并且保证锚点和对应的控制点的连线与曲线相切。&lt;br&gt;这里有一个演示绘制贝塞尔曲线过程的网站：&lt;a href=&quot;http://myst729.github.io/bezier-curve/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bézier curve&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;脸&quot;&gt;&lt;a href=&quot;#脸&quot; class=&quot;headerlink&quot; title=&quot;脸&quot;&gt;&lt;/a&gt;脸&lt;/h3&gt;&lt;p&gt;脸是最简单的，就是一个圆，直接用一个方法就可以：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawFaceWithRect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(rect: CGRect)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; facePath = &lt;span class=&quot;type&quot;&gt;UIBezierPath&lt;/span&gt;(ovalInRect: rect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rateColor.setStroke()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    facePath.lineWidth = rateLineWidth &lt;span class=&quot;comment&quot;&gt;// 线粗细&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    facePath.stroke()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际实现的时候可以加上Margin，防止线画到View的边界之外。&lt;/p&gt;
&lt;h3 id=&quot;嘴、眼睛&quot;&gt;&lt;a href=&quot;#嘴、眼睛&quot; class=&quot;headerlink&quot; title=&quot;嘴、眼睛&quot;&gt;&lt;/a&gt;嘴、眼睛&lt;/h3&gt;&lt;p&gt;先看看&lt;code&gt;UIBezierPath&lt;/code&gt;提供的可以用来绘制曲线的方法：&lt;br&gt;&lt;code&gt;addCurveToPoint(_:controlPoint1:controlPoint2:)&lt;/code&gt;和&lt;code&gt;addQuadCurveToPoint(_:controlPoint:)&lt;/code&gt;，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_ttgemojirate_2.png&quot; alt=&quot;UIBezierPath&quot;&gt;&lt;/p&gt;
&lt;p&gt;直观上来讲，嘴、眼睛的绘制跟&lt;code&gt;addQuadCurveToPoint&lt;/code&gt;方法绘制的效果基本一致，但是这样的效果没法调整，因为只能控制唯一的一个控制点，所以还是要用&lt;code&gt;addCurveToPoint&lt;/code&gt;方法，对称的绘制两条曲线，拼接起来，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_ttgemojirate_3.png&quot; alt=&quot;Curve拼接&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的话，就可以通过调整两个控制点，来控制嘴、眼睛的弯曲宽度、形状。&lt;/p&gt;
&lt;p&gt;以绘制嘴为例：&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private func drawMouthWithRect(&lt;span class=&quot;attribute&quot;&gt;rect&lt;/span&gt;: CGRect) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; width = CGRectGetWidth(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; height = CGRectGetWidth(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 左端点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; leftPoint = CGPointMake(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width * (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - rateMouthWidth) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height * (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - rateMouthVerticalPosition))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 右端点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; rightPoint = CGPointMake(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width - leftPoint.x,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leftPoint.y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 中间点 - Y值根据当前的Rate值计算，0.3为系数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; centerPoint = CGPointMake(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leftPoint.y + height * &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt; * (CGFloat(rateValue) - &lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 控制点跟中间点在X轴上的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; halfLipWidth = width * rateMouthWidth * rateLipWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建贝塞尔曲线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; mouthPath = UIBezierPath()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 移动到起始点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mouthPath.moveToPoint(leftPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 添加左半边曲线路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mouthPath.addCurveToPoint(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        centerPoint,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;controlPoint1&lt;/span&gt;: leftPoint,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;controlPoint2&lt;/span&gt;: CGPointMake(centerPoint.x - halfLipWidth, centerPoint.y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 添加右半边曲线路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mouthPath.addCurveToPoint(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rightPoint,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;controlPoint1&lt;/span&gt;: CGPointMake(centerPoint.x + halfLipWidth, centerPoint.y),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;controlPoint2&lt;/span&gt;: rightPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设定样式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mouthPath.lineCapStyle = CGLineCap.Round;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rateColor.setStroke()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mouthPath.lineWidth = rateLineWidth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mouthPath.stroke()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的距离、坐标都是根据当前控件的大小计算出来的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rateMouthWidth&lt;/code&gt;为嘴的宽度与整个控件宽度的比值，即相对值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rateMouthVerticalPosition&lt;/code&gt;为嘴的左右两个端点的Y轴坐标值，也为相对值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rateLipWidth&lt;/code&gt;为中心点的两个控制点的距离与嘴宽度的比值，也是相对值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;眼睛的绘制跟嘴原理一致，就不再说明。&lt;/p&gt;
&lt;h3 id=&quot;颜色的渐变&quot;&gt;&lt;a href=&quot;#颜色的渐变&quot; class=&quot;headerlink&quot; title=&quot;颜色的渐变&quot;&gt;&lt;/a&gt;颜色的渐变&lt;/h3&gt;&lt;p&gt;Dribbble的演示中，控件的线条颜色也是会变化的，从红色到蓝色再到绿色，是连续变化的。这个时候用常见的&lt;strong&gt;RGB色彩模式&lt;/strong&gt;是不好控制的，效果也不好。&lt;/p&gt;
&lt;p&gt;所以这个时候要用&lt;strong&gt;HSB色彩模式&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HSB 色彩模式是基于人眼的一种颜色模式。是普及型设计软件中常见的色彩模式，其中H代表色相；S代表饱和度；B代表亮度。- &lt;a href=&quot;http://baike.baidu.com/view/1006662.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_ttgemojirate_4.jpg?imageView2/1/w/240/h/192&quot; alt=&quot;HSB色彩模式&quot;&gt;&lt;/p&gt;
&lt;p&gt;对应到&lt;code&gt;UIColor&lt;/code&gt;类，就是下面两个方法：&lt;br&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建UIColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;init(&lt;span class=&quot;built_in&quot;&gt;hue&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hue&lt;/span&gt;: CGFloat, &lt;span class=&quot;built_in&quot;&gt;saturation&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;saturation&lt;/span&gt;: CGFloat, &lt;span class=&quot;built_in&quot;&gt;brightness&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;brightness&lt;/span&gt;: CGFloat, &lt;span class=&quot;built_in&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;alpha&lt;/span&gt;: CGFloat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取HSB值，注意参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func getHue(_ &lt;span class=&quot;built_in&quot;&gt;hue&lt;/span&gt;: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;, &lt;span class=&quot;built_in&quot;&gt;saturation&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;saturation&lt;/span&gt;: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;, &lt;span class=&quot;built_in&quot;&gt;brightness&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;brightness&lt;/span&gt;: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;, &lt;span class=&quot;built_in&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;alpha&lt;/span&gt;: UnsafeMutablePointer&amp;lt;CGFloat&amp;gt;) -&amp;gt; Bool&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实现的时候，为了增加可定制性，控件颜色的变化范围是可以设置的，用以下属性保存：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; var &lt;span class=&quot;string&quot;&gt;rateColorRange:&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;from:&lt;/span&gt; UIColor, &lt;span class=&quot;string&quot;&gt;to:&lt;/span&gt; UIColor)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;刷新时，就可以根据当前的Rate值，重新计算颜色的HSB和alpha值：&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rate&lt;/span&gt;: CGFloat = CGFloat(rateValue / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// Rate值归一化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.rateColor = UIColor.init(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;hue&lt;/span&gt;: hueFrom + hueDelta * rate, &lt;span class=&quot;comment&quot;&gt;// 色相&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;saturation&lt;/span&gt;: saturationFrom + saturationDelta * rate, &lt;span class=&quot;comment&quot;&gt;// 饱和度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;brightness&lt;/span&gt;: brightnessFrom + brightnessDelta * rate, &lt;span class=&quot;comment&quot;&gt;// 亮度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;alpha&lt;/span&gt;: alphaFrom + alphaDelta * rate &lt;span class=&quot;comment&quot;&gt;// 透明度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的颜色参数都是根据Rate值做线性增减。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxxFrom&lt;/code&gt;、&lt;code&gt;xxxDelta&lt;/code&gt;分别指HSB和alpha的起始值与变化范围，在设置&lt;code&gt;rateColorRange&lt;/code&gt;时计算保存下来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样，颜色就能做到跟Rate值做连续的线性变化。&lt;/p&gt;
&lt;h3 id=&quot;善于使用didSet&quot;&gt;&lt;a href=&quot;#善于使用didSet&quot; class=&quot;headerlink&quot; title=&quot;善于使用didSet&quot;&gt;&lt;/a&gt;善于使用didSet&lt;/h3&gt;&lt;p&gt;实现控件的时候，对外暴露了很多属性，如线的宽度&lt;code&gt;rateLineWidth&lt;/code&gt;、嘴的宽度&lt;code&gt;rateMouthWidth&lt;/code&gt;等。为了对这些属性做校验，并且在设置后刷新控件，就要用到&lt;code&gt;didSet&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;didSet&lt;/code&gt;在Swift里面，跟类的属性是一一绑定的，在对属性赋值后会被调用。&lt;/p&gt;
&lt;p&gt;控件的大部分属性都做了校验、刷新，如下：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Mouth width. From 0.2 to 0.7.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBInspectable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rateMouthWidth: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0.6&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 判断上限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rateMouthWidth &amp;gt; &lt;span class=&quot;number&quot;&gt;0.7&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rateMouthWidth = &lt;span class=&quot;number&quot;&gt;0.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 判断下限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rateMouthWidth &amp;lt; &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rateMouthWidth = &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 刷新、重绘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.setNeedsDisplay()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;IBDesignable、-IBInspectable&quot;&gt;&lt;a href=&quot;#IBDesignable、-IBInspectable&quot; class=&quot;headerlink&quot; title=&quot;@IBDesignable、@IBInspectable&quot;&gt;&lt;/a&gt;@IBDesignable、@IBInspectable&lt;/h3&gt;&lt;p&gt;为了能在XIB、StoryBoard里面使用、编辑控件，就要用到&lt;code&gt;@IBDesignable&lt;/code&gt;和&lt;code&gt;@IBInspectable&lt;/code&gt;这两个关键字。&lt;/p&gt;
&lt;p&gt;在类的前面加上&lt;code&gt;@IBDesignable&lt;/code&gt;关键字，使IB可以预览控件：&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@IBDesignable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EmojiRateView&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;UIView &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在属性前面加上&lt;code&gt;@IBInspectable&lt;/code&gt;，就可以在IB里面编辑属性，实时预览：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBInspectable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; var &lt;span class=&quot;string&quot;&gt;rateLineWidth:&lt;/span&gt; CGFloat = &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;详细的使用可以参考NSHipster上的文章：&lt;a href=&quot;http://nshipster.cn/ibinspectable-ibdesignable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IBInspectable / IBDesignable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，在IB里面就是下面这样：&lt;br&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGEmojiRate_IBExample.png?imageView2/0/w/640&quot; alt=&quot;IB example&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By the way =。=&lt;/strong&gt;&lt;br&gt;属性名字太长，在IB里面显示不完整，咋办。。。&lt;/p&gt;
&lt;h3 id=&quot;回调&quot;&gt;&lt;a href=&quot;#回调&quot; class=&quot;headerlink&quot; title=&quot;回调&quot;&gt;&lt;/a&gt;回调&lt;/h3&gt;&lt;p&gt;拖动改变Rate值的时候，肯定要有回调，如下定义：&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rateValueChangeCallback&lt;/span&gt;: ((newRateValue: &lt;span class=&quot;keyword&quot;&gt;Float&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;Void&lt;/span&gt;)? = nil&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;rateValue&lt;/code&gt;的&lt;code&gt;didSet&lt;/code&gt;里面回调：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBInspectable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rateValue: &lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.rateValueChangeCallback?(newRateValue: rateValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;看似简单的一个Rating控件，从构思到实现，再到完善，一点一点朝着完美去做，收获不少~&lt;/p&gt;
&lt;p&gt;最后，Dribbble是个好地方，贝塞尔曲线好强大，XCode 7.1写Swift还是有点卡=。=&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科 - 贝塞尔曲线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Drawing Shapes Using Bézier Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/1006662.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HSB色彩模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nshipster.cn/ibinspectable-ibdesignable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IBInspectable / IBDesignable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间在Dribbble上发现了一个&lt;a href=&quot;https://dribbble.com/shots/2211556-Rating-Version-A&quot;&gt;Rating控件&lt;/a&gt;的演示动画，控件以Emoji表情为基础，结合了上下滑动手势，正好最近正在深入学习iOS动画、绘图相关的知识，就尝试着用&lt;code&gt;UIBezierPath&lt;/code&gt;实现了出来。本文就是TTGEmojiRate的实现过程。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/zekunyan/TTGEmojiRate&quot;&gt;https://github.com/zekunyan/TTGEmojiRate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGEmojiRate_screenshot2.gif&quot; alt=&quot;TTGEmojiRate Example&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="开源" scheme="http://tutuge.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Swift" scheme="http://tutuge.me/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift写的库-TTGSnackbar</title>
    <link href="http://tutuge.me/2015/10/09/ttgsnackbar-lib/"/>
    <id>http://tutuge.me/2015/10/09/ttgsnackbar-lib/</id>
    <published>2015-10-09T11:49:09.000Z</published>
    <updated>2016-03-24T16:23:11.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2016-03-25: 版本更新到了0.5.1，补充些说明、示例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;TTGSnackbar&quot;&gt;&lt;a href=&quot;#TTGSnackbar&quot; class=&quot;headerlink&quot; title=&quot;TTGSnackbar&quot;&gt;&lt;/a&gt;TTGSnackbar&lt;/h2&gt;&lt;p&gt;用Swift写了个简单的控件库：TTGSnackbar，模仿Android的Snackbar。目前更新到了版本0.5.1。支持多种动画，增强了自定义。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/zekunyan/TTGSnackbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/TTGSnackbar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGSnackbar_8.gif&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;需要Swift 2.2，iOS 8+  &lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;platform &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&quot;TTGSnackbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;简单的使用案例&quot;&gt;&lt;a href=&quot;#简单的使用案例&quot; class=&quot;headerlink&quot; title=&quot;简单的使用案例&quot;&gt;&lt;/a&gt;简单的使用案例&lt;/h2&gt;&lt;h3 id=&quot;只显示文字&quot;&gt;&lt;a href=&quot;#只显示文字&quot; class=&quot;headerlink&quot; title=&quot;只显示文字&quot;&gt;&lt;/a&gt;只显示文字&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGSnackbar_2.png&quot; alt=&quot;Example&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; snackbar = TTGSnackbar.init(&lt;span class=&quot;attribute&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Message&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;duration&lt;/span&gt;: .Short)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;显示文字和一个动作按钮&quot;&gt;&lt;a href=&quot;#显示文字和一个动作按钮&quot; class=&quot;headerlink&quot; title=&quot;显示文字和一个动作按钮&quot;&gt;&lt;/a&gt;显示文字和一个动作按钮&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGSnackbar_3.png&quot; alt=&quot;Example&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; snackbar = TTGSnackbar.init(message: &lt;span class=&quot;string&quot;&gt;&quot;Message&quot;&lt;/span&gt;, duration: .Middle, actionText: &lt;span class=&quot;string&quot;&gt;&quot;Action&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(snackbar)&lt;/span&gt; -&amp;gt;&lt;/span&gt; Void &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(&lt;span class=&quot;string&quot;&gt;&quot;Click action!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;显示文字和一个耗时操作按钮&quot;&gt;&lt;a href=&quot;#显示文字和一个耗时操作按钮&quot; class=&quot;headerlink&quot; title=&quot;显示文字和一个耗时操作按钮&quot;&gt;&lt;/a&gt;显示文字和一个耗时操作按钮&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGSnackbar_5.png&quot; alt=&quot;Example&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; snackbar = TTGSnackbar.init(message: &lt;span class=&quot;string&quot;&gt;&quot;Message&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;duration&lt;/span&gt;: .Forever, actionText: &lt;span class=&quot;string&quot;&gt;&quot;Action&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; (snackbar) -&amp;gt; &lt;span class=&quot;literal&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(&lt;span class=&quot;string&quot;&gt;&quot;Click action!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Dismiss manually after 3 seconds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * Double(NSEC_PER_SEC))), dispatch_get_main_queue()) &amp;#123; () -&amp;gt; &lt;span class=&quot;literal&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        snackbar.dismiss()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;显示文字和两个动作按钮&quot;&gt;&lt;a href=&quot;#显示文字和两个动作按钮&quot; class=&quot;headerlink&quot; title=&quot;显示文字和两个动作按钮&quot;&gt;&lt;/a&gt;显示文字和两个动作按钮&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGSnackbar_9.png&quot; alt=&quot;Example&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let snackbar: TTGSnackbar = TTGSnackbar.init(message: &lt;span class=&quot;string&quot;&gt;&quot;Two actions !&quot;&lt;/span&gt;, duration: .Long)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Action 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar&lt;span class=&quot;selector-class&quot;&gt;.actionText&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Yes&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar&lt;span class=&quot;selector-class&quot;&gt;.actionTextColor&lt;/span&gt; = UIColor.greenColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar&lt;span class=&quot;selector-class&quot;&gt;.actionBlock&lt;/span&gt; = &amp;#123; (snackbar) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; NSLog(&lt;span class=&quot;string&quot;&gt;&quot;Click Yes !&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Action 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar&lt;span class=&quot;selector-class&quot;&gt;.secondActionText&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;No&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar&lt;span class=&quot;selector-class&quot;&gt;.secondActionTextColor&lt;/span&gt; = UIColor.yellowColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar&lt;span class=&quot;selector-class&quot;&gt;.secondActionBlock&lt;/span&gt; = &amp;#123; (snackbar) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; NSLog(&lt;span class=&quot;string&quot;&gt;&quot;Click No !&quot;&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snackbar.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自定义&quot;&gt;&lt;a href=&quot;#自定义&quot; class=&quot;headerlink&quot; title=&quot;自定义&quot;&gt;&lt;/a&gt;自定义&lt;/h2&gt;&lt;p&gt;可以自定义文字的字体、颜色，动作按钮的字体、颜色，回调等等，详细的请看Github的README说明。😊&lt;/p&gt;
&lt;h2 id=&quot;总之&quot;&gt;&lt;a href=&quot;#总之&quot; class=&quot;headerlink&quot; title=&quot;总之&quot;&gt;&lt;/a&gt;总之&lt;/h2&gt;&lt;p&gt;一时兴起写了个简单的库，后来发现居然有人提交PR、issue，不敢怠慢啊，也就坚持了下来，断断续续更新了10个小版本了=。=（2016年3月25号，25周岁前一天-_-|||）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2016-03-25: 版本更新到了0.5.1，补充些说明、示例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;TTGSnackbar&quot;&gt;&lt;a href=&quot;#TTGSnackbar&quot; class=&quot;headerlink&quot; title=&quot;TTGSnackbar&quot;&gt;&lt;/a&gt;TTGSnackbar&lt;/h2&gt;&lt;p&gt;用Swift写了个简单的控件库：TTGSnackbar，模仿Android的Snackbar。目前更新到了版本0.5.1。支持多种动画，增强了自定义。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/zekunyan/TTGSnackbar&quot;&gt;https://github.com/zekunyan/TTGSnackbar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/TTGSnackbar_8.gif&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="开源" scheme="http://tutuge.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Swift" scheme="http://tutuge.me/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>有趣的Autolayout示例2-Masonry实现</title>
    <link href="http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/"/>
    <id>http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/</id>
    <published>2015-08-07T16:55:52.000Z</published>
    <updated>2016-03-20T08:56:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Masonry写的Autolayout示例又来了，仍然是三个小例子，分别是&lt;strong&gt;变高度的UITableViewCell、topLayoutGuide与bottomLayoutGuide，还有自定义的baseline&lt;/strong&gt;，外加两个基本的知识点讲解，说不上“有趣”=。=，比较基础，写了很多，各位随意看看吧~&lt;/p&gt;
&lt;p&gt;第一篇: &lt;a href=&quot;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&quot;&gt;有趣的Autolayout示例-Masonry实现&lt;/a&gt;&lt;br&gt;第三篇: &lt;a href=&quot;http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/&quot;&gt;有趣的Autolayout示例3-Masonry实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github地址：&lt;br&gt;&lt;a href=&quot;https://github.com/zekunyan/AutolayoutExampleWithMasonry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/AutolayoutExampleWithMasonry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_1.gif&quot; alt=&quot;Gif示例&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;&lt;p&gt;先讲讲两个知识点，很基础，但是很容易被忽略。&lt;/p&gt;
&lt;h3 id=&quot;坐标系、top、right、offset&quot;&gt;&lt;a href=&quot;#坐标系、top、right、offset&quot; class=&quot;headerlink&quot; title=&quot;坐标系、top、right、offset&quot;&gt;&lt;/a&gt;坐标系、top、right、offset&lt;/h3&gt;&lt;p&gt;先看看Masonry的Github主页的示例代码：&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIEdgeInsets padding = UIEdgeInsetsMake(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[view1 mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(superview.mas_top).&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;offset&lt;/span&gt;(padding.top);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.equalTo(superview.mas_left).&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;offset&lt;/span&gt;(padding.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.bottom.equalTo(superview.mas_bottom).&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;offset&lt;/span&gt;(-padding.bottom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.right.equalTo(superview.mas_right).&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;offset&lt;/span&gt;(-padding.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码的意思很简单，就是view1的上下左右边距为padding对应的值。&lt;/p&gt;
&lt;p&gt;但是，为什么bottom、right的offset是&lt;strong&gt;负数&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;其实无论是Autolayout还是直接写frame，最终的结果都是要把我们的控件按照正确的位置绘制在屏幕上，也就是说，在一个统一的坐标系下，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_2.png&quot; alt=&quot;坐标系&quot;&gt;&lt;/p&gt;
&lt;p&gt;而在Masonry里面，offset只是做了“加法”运算，举个例，上面的：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.top&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.equalTo&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.mas_top&lt;/span&gt;)&lt;span class=&quot;selector-class&quot;&gt;.with&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.offset&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.top&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实等于下面的式子：&lt;br&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;view1.top = superview.top + padding.top&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;转换到坐标系里面，即是：&lt;br&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;view1顶部的y坐标 = superview顶部的y坐标 + padding.top&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以，如果我们想view1的bottom距底部间距为10，按照offset的“加法运算”，应该是下面这样：&lt;br&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;view1底部的y坐标 = superview底部的y坐标 + (-&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以，代码里面的bottom的offset是负数。right也是一个道理。&lt;/p&gt;
&lt;p&gt;总的来说，就是布局的时候，始终要在坐标系下考虑。&lt;/p&gt;
&lt;h3 id=&quot;约束的“等价”性&quot;&gt;&lt;a href=&quot;#约束的“等价”性&quot; class=&quot;headerlink&quot; title=&quot;约束的“等价”性&quot;&gt;&lt;/a&gt;约束的“等价”性&lt;/h3&gt;&lt;p&gt;语文不好，还是用公式说明吧=。=&lt;br&gt;先看看Autolayout的基本公式：&lt;br&gt;&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;viewA-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; = viewB-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; * multiplier + &lt;span class=&quot;keyword&quot;&gt;constant&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个公式，跟下面的是等价的：&lt;br&gt;&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;viewB-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; = (viewA-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;constant&lt;/span&gt;) / multiplier&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个转换是如此的简单，小学生都会=。=，只是为了说明，我们在设置约束的时候，既可以从ViewA的角度考虑，也可以从ViewB的角度，两者完全&lt;strong&gt;等价&lt;/strong&gt;！。&lt;/p&gt;
&lt;p&gt;说白了就是：“ViewA跟ViewB相距10”和“ViewB跟ViewA相距10”是一样的，如下两段代码，效果是一样的（注意正负数）：&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View2的顶部距离View1的底部10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[view2 mas_makeConstraints:^(MASConstraintMaker *&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.top.equalTo(view1.mas_bottom).with.offset(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View1的底部距离View2的顶部10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[view1 mas_makeConstraints:^(MASConstraintMaker *&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.bottom.equalTo(view2.mas_top).with.offset(&lt;span class=&quot;number&quot;&gt;-10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更进一步说，就是约束只是两个View之间的关系，对于系统来说，ViewA和ViewB的地位是&lt;strong&gt;平等&lt;/strong&gt;的，我们设置约束的时候，没有&lt;strong&gt;主次&lt;/strong&gt;之分。&lt;/p&gt;
&lt;p&gt;所以，我们在设置约束的时候，要从“&lt;strong&gt;整体&lt;/strong&gt;”、“&lt;strong&gt;宏观&lt;/strong&gt;”上考虑，更好地把握布局，避免重复约束。&lt;/p&gt;
&lt;h2 id=&quot;Case-1-变高UITableViewCell&quot;&gt;&lt;a href=&quot;#Case-1-变高UITableViewCell&quot; class=&quot;headerlink&quot; title=&quot;Case 1: 变高UITableViewCell&quot;&gt;&lt;/a&gt;Case 1: 变高UITableViewCell&lt;/h2&gt;&lt;p&gt;变高的UITableViewCell，这是个永恒的话题=。=&lt;/p&gt;
&lt;p&gt;不用Autolayout的话，计算Cell的高度的时候，就只能用sizeThatFits等方法，加上各种“魔鬼”数据的margin、padding来手动拼凑出Cell的高度。这种方法非常耗时，并且难以调试。&lt;/p&gt;
&lt;p&gt;有了Autolayout，就再也不用手动算高度了~&lt;/p&gt;
&lt;h3 id=&quot;UITableViewCell&quot;&gt;&lt;a href=&quot;#UITableViewCell&quot; class=&quot;headerlink&quot; title=&quot;UITableViewCell&quot;&gt;&lt;/a&gt;UITableViewCell&lt;/h3&gt;&lt;p&gt;先看看Cell的约束。&lt;/p&gt;
&lt;h4 id=&quot;“自我约束”的Cell&quot;&gt;&lt;a href=&quot;#“自我约束”的Cell&quot; class=&quot;headerlink&quot; title=&quot;“自我约束”的Cell&quot;&gt;&lt;/a&gt;“自我约束”的Cell&lt;/h4&gt;&lt;p&gt;既然要能让系统自己计算出Cell的高度，我们在设置约束的时候，就要让约束整体是“完整”、“自我约束”的。（这个很难用语言描述。。。）Cell里面的每一个View的大小、位置，都可以从约束中得到体现，而Cell的整体大小，也是从子View的约束综合计算得出的。&lt;/p&gt;
&lt;p&gt;如下面的Cell：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_3.png&quot; alt=&quot;Cell&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左上角的图片固定大小。&lt;/li&gt;
&lt;li&gt;标题的Label只显示一行，固定高度。&lt;/li&gt;
&lt;li&gt;内容的Label根据内容决定高度。&lt;/li&gt;
&lt;li&gt;两个Label宽度整体随着Cell的宽度变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;约束的设定如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_4.png&quot; alt=&quot;约束示意&quot;&gt;&lt;/p&gt;
&lt;p&gt;关键点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内容Label的bottom和Cell的contentView的约束不可以省，因为cell的高度要由内部的约束决定，所以上下左右的约束一个不能少。&lt;/li&gt;
&lt;li&gt;内容Label的高度随着内容变化，即cell的高度随内容变化，这个时候可以设置Label的ContentHugging的优先级最高。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;UILabel的preferredMaxLayoutWidth&quot;&gt;&lt;a href=&quot;#UILabel的preferredMaxLayoutWidth&quot; class=&quot;headerlink&quot; title=&quot;UILabel的preferredMaxLayoutWidth&quot;&gt;&lt;/a&gt;UILabel的preferredMaxLayoutWidth&lt;/h4&gt;&lt;p&gt;Autolayout下，UILabel在多行显示时，有个很“坑”的属性需要设定，就是preferredMaxLayoutWidth。&lt;/p&gt;
&lt;p&gt;定义如下:&lt;br&gt;&lt;em&gt;&lt;br&gt;This property affects the size of the label when layout constraints are applied to it. During layout, if the text extends beyond the width specified by this property, the additional text is flowed to one or more new lines, thereby increasing the height of the label.
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果我们要使用Autolayout自动计算多行UILabel的高度，这个属性就必须在运行时指定，要不然系统计算不出UILabel的宽度，例如：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算UILabel的preferredMaxLayoutWidth值，多行时必须设置这个值，否则系统无法决定Label的宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.preferredMaxWidth&lt;/span&gt; = [UIScreen mainScreen]&lt;span class=&quot;selector-class&quot;&gt;.bounds&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.width&lt;/span&gt; - &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt; - padding;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;手动计算宽度，感觉回到了没有Autolayout的时代=。=&lt;/p&gt;
&lt;h4 id=&quot;Cell的关键代码&quot;&gt;&lt;a href=&quot;#Cell的关键代码&quot; class=&quot;headerlink&quot; title=&quot;Cell的关键代码&quot;&gt;&lt;/a&gt;Cell的关键代码&lt;/h4&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Avatar - 头像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_avatarImageView = [UIImageView new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:_avatarImageView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_avatarImageView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.height.equalTo(@&lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; // 宽高固定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;.top.equalTo(self.contentView).with.offset(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Title - 单行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_titleLabel = [UILabel new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:_titleLabel]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_titleLabel mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.height.equalTo(@&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; // 宽高固定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(self.contentView).with.offset(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.equalTo(_avatarImageView.mas_right).with.offset(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.right.equalTo(self.contentView).with.offset(&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算UILabel的preferredMaxLayoutWidth值，多行时必须设置这个值，否则系统无法决定Label的宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CGFloat preferredMaxWidth = [UIScreen mainScreen].bounds.size.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; - (&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Content - 多行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel = [UILabel new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel.numberOfLines = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_contentLabel.preferredMaxLayoutWidth = preferredMaxWidth&lt;span class=&quot;comment&quot;&gt;; // 多行时必须设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:_contentLabel]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_contentLabel mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(_titleLabel.mas_bottom).with.offset(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.equalTo(_avatarImageView.mas_right).with.offset(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.right.equalTo(self.contentView).with.offset(&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.bottom.equalTo(self.contentView).with.offset(&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置高度的Content Hugging&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_contentLabel setContentHuggingPriority:UILayoutPriorityRequired forAxis:UILayoutConstraintAxisVertical]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;UITableView&quot;&gt;&lt;a href=&quot;#UITableView&quot; class=&quot;headerlink&quot; title=&quot;UITableView&quot;&gt;&lt;/a&gt;UITableView&lt;/h3&gt;&lt;p&gt;再看看UITableView。&lt;/p&gt;
&lt;h4 id=&quot;用systemLayoutSizeFittingSize-获取Cell的高度&quot;&gt;&lt;a href=&quot;#用systemLayoutSizeFittingSize-获取Cell的高度&quot; class=&quot;headerlink&quot; title=&quot;用systemLayoutSizeFittingSize:获取Cell的高度&quot;&gt;&lt;/a&gt;用systemLayoutSizeFittingSize:获取Cell的高度&lt;/h4&gt;&lt;p&gt;在设定好Cell的约束以后，就可以用systemLayoutSizeFittingSize:方法获取Cell的实际高度，它的参数可以设定为两个系统常量，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UILayoutFittingCompressedSize: 返回合适的最小大小。&lt;/li&gt;
&lt;li&gt;UILayoutFittingExpandedSize: 返回合适的最大大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;模板Cell&quot;&gt;&lt;a href=&quot;#模板Cell&quot; class=&quot;headerlink&quot; title=&quot;模板Cell&quot;&gt;&lt;/a&gt;模板Cell&lt;/h4&gt;&lt;p&gt;为了在“- (CGFloat)tableView:(UITableView &lt;em&gt;)tableView heightForRowAtIndexPath:(NSIndexPath &lt;/em&gt;)indexPath ”方法中计算Cell的高度，我们需要一个专门用于计算高度的Cell实例，可以说算是Cell的“模板”。一般来说，这个实例可以设置成函数的static变量，并只在第一次使用时初始化一次。&lt;/p&gt;
&lt;h4 id=&quot;简单缓存高度&quot;&gt;&lt;a href=&quot;#简单缓存高度&quot; class=&quot;headerlink&quot; title=&quot;简单缓存高度&quot;&gt;&lt;/a&gt;简单缓存高度&lt;/h4&gt;&lt;p&gt;为了避免每次滑动时计算高度，可以将Cell的高度缓存下来。如，保存在每一行对应的数据Model(Entity)中，例如：&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Entity &lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (copy, nonatomic) NSString *title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Cache height&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (assign, nonatomic) CGFloat cellHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每次要获取高度时，就可以先检查一下是否有缓存，减少计算量。&lt;/p&gt;
&lt;h4 id=&quot;设置estimatedRowHeight以减少首次显示的计算量&quot;&gt;&lt;a href=&quot;#设置estimatedRowHeight以减少首次显示的计算量&quot; class=&quot;headerlink&quot; title=&quot;设置estimatedRowHeight以减少首次显示的计算量&quot;&gt;&lt;/a&gt;设置estimatedRowHeight以减少首次显示的计算量&lt;/h4&gt;&lt;p&gt;默认情况下，首次显示之前，系统都会一次性全部计算出所有Cell的高度，这简直不能忍啊！要是有10000行，那岂不是要卡死=。=&lt;/p&gt;
&lt;p&gt;所以iOS 7以后，UITableView有了一个新的属性：estimatedRowHeight。&lt;/p&gt;
&lt;p&gt;从属性名上就可以看出，这个属性可以为Cell预先指定一个“估计”的高度值，这样的话，系统就可以先按照估计值布局，然后只获取显示范围内的Cell的高度，这样就不会一次性计算全部的了。&lt;/p&gt;
&lt;h4 id=&quot;关键代码&quot;&gt;&lt;a href=&quot;#关键代码&quot; class=&quot;headerlink&quot; title=&quot;关键代码&quot;&gt;&lt;/a&gt;关键代码&lt;/h4&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Case4Cell *templateCell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        templateCell = [tableView dequeueReusableCellWithIdentifier:&lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([Case4Cell class])];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取对应的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Case4DataEntity *dataEntity = _data[(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;) indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 填充数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [templateCell setupData:dataEntity];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断高度是否已经计算过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dataEntity.cellHeight &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 根据当前数据，计算Cell的高度，注意+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataEntity.cellHeight = [templateCell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataEntity.cellHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;iOS-8的新特性&quot;&gt;&lt;a href=&quot;#iOS-8的新特性&quot; class=&quot;headerlink&quot; title=&quot;iOS 8的新特性&quot;&gt;&lt;/a&gt;iOS 8的新特性&lt;/h3&gt;&lt;p&gt;iOS 8大大简化了Cell的高度计算，只要设置好Cell的约束，添加下面几行代码：&lt;br&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tableView.rowHeight = UITableViewAutomaticDimension&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tableView.estimatedRowHeight = &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 只用返回这个！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对！就只用这么几行代码就行！&lt;/p&gt;
&lt;h2 id=&quot;Case-2-topLayoutGuide和bottomLayoutGuide&quot;&gt;&lt;a href=&quot;#Case-2-topLayoutGuide和bottomLayoutGuide&quot; class=&quot;headerlink&quot; title=&quot;Case 2: topLayoutGuide和bottomLayoutGuide&quot;&gt;&lt;/a&gt;Case 2: topLayoutGuide和bottomLayoutGuide&lt;/h2&gt;&lt;h3 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h3&gt;&lt;p&gt;topLayoutGuide和bottomLayoutGuide都是iOS 7以后，UIViewController的属性。&lt;/p&gt;
&lt;p&gt;在文档、头文件中，topLayoutGuide和bottomLayoutGuide的定义如下：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,retain) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UILayoutSupport&lt;/span&gt;&amp;gt; topLayoutGuide &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,retain) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UILayoutSupport&lt;/span&gt;&amp;gt; bottomLayoutGuide &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而UILayoutSupport的定义更是简单：&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@protocol&lt;/span&gt; UILayoutSupport &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(nonatomic,readonly) CGFloat length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以topLayoutGuide为例&lt;/strong&gt;：&lt;br&gt;&lt;em&gt;&lt;br&gt;The topLayoutGuide property comes into play when a view controller is frontmost onscreen. It indicates the highest vertical extent for content that you don’t want to appear behind a translucent or transparent UIKit bar (such as a status or navigation bar). This property implements the UILayoutSupport protocol and you can employ it as a constraint item when using the NSLayoutConstraint class.
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;简单来说，topLayoutGuide表示当前页面的上方被status bar、navigation bar遮挡的部分。同理，bottomLayoutGuide表示下方被遮挡的部分。&lt;/p&gt;
&lt;p&gt;如下图:&lt;br&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_5.jpg?imageView2/0/w/400/q/100&quot; alt=&quot;topLayoutGuide和bottomLayoutGuide&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;解决的问题&quot;&gt;&lt;a href=&quot;#解决的问题&quot; class=&quot;headerlink&quot; title=&quot;解决的问题&quot;&gt;&lt;/a&gt;解决的问题&lt;/h3&gt;&lt;p&gt;有些时候，一个ViewController可能单独显示出来，也可能内嵌在UINavigationController里面显示出来。在这两种情况下，页面的“&lt;strong&gt;可视范围&lt;/strong&gt;”是不一样的，很明显，NavigationBar会遮挡住一部分，用了UITabBarController时，tabBar也会遮挡住下方一部分。再加上各种Bar都可以隐藏，情况会变得更复杂。&lt;/p&gt;
&lt;p&gt;难道要为每种情况去写一份布局代码？&lt;/p&gt;
&lt;h3 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h3&gt;&lt;p&gt;为了解决上面的问题，就需要在设置约束时，加进topLayoutGuide和bottomLayoutGuide。&lt;/p&gt;
&lt;h4 id=&quot;用法1-强制转换为UIView&quot;&gt;&lt;a href=&quot;#用法1-强制转换为UIView&quot; class=&quot;headerlink&quot; title=&quot;用法1: 强制转换为UIView&quot;&gt;&lt;/a&gt;用法1: 强制转换为UIView&lt;/h4&gt;&lt;p&gt;定义上，topLayoutGuide和bottomLayoutGuide都是id，但是实际中是什么呢？跟UIView有什么关系？&lt;br&gt;看看如下代码的运行结果：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.topLayoutGuide &lt;span class=&quot;symbol&quot;&gt;isKindOfClass:&lt;/span&gt;[UIView &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果是：”1”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说，在运行期间，topLayoutGuide和bottomLayoutGuide就是UIView的子类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，第一种方法就是强制转换成UIView，直接运用在Masonry的约束里面，正如较旧的Masonry官方示例中的一样：&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[topView makeConstraints:^(&lt;span class=&quot;name&quot;&gt;MASConstraintMaker&lt;/span&gt; *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 强制转换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *topLayoutGuide = (&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;)self.topLayoutGuide;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(&lt;span class=&quot;name&quot;&gt;topLayoutGuide.mas_bottom&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这样存在着风险，万一哪天苹果改变了topLayoutGuide和bottomLayoutGuide的实现方法，这么用就Crash了=。=&lt;/p&gt;
&lt;h4 id=&quot;用法2-直接使用length属性&quot;&gt;&lt;a href=&quot;#用法2-直接使用length属性&quot; class=&quot;headerlink&quot; title=&quot;用法2: 直接使用length属性&quot;&gt;&lt;/a&gt;用法2: 直接使用length属性&lt;/h4&gt;&lt;p&gt;第二种方法，就是直接使用UILayoutSupport定义的length属性。&lt;br&gt;这个时候就有个地方要特别注意，在运行到viewDidLoad的时候，length的值是0，因为这个时候界面还没有被绘制，所以一个解决方法就是在ViewController的&lt;strong&gt;updateViewConstraints&lt;/strong&gt;方法里面去使用length值添加约束。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight roboconf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)updateViewConstraints &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;attribute&quot;&gt;_topView mas_updateConstraints&lt;/span&gt;:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 直接利用其length属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make&lt;span class=&quot;variable&quot;&gt;.top&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.equalTo&lt;/span&gt;(self&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.mas_top&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.with&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.offset&lt;/span&gt;(self&lt;span class=&quot;variable&quot;&gt;.topLayoutGuide&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.length&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super updateViewConstraints];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;用法3-使用新版的mas-topLayoutGuide和mas-bottomLayoutGuide&quot;&gt;&lt;a href=&quot;#用法3-使用新版的mas-topLayoutGuide和mas-bottomLayoutGuide&quot; class=&quot;headerlink&quot; title=&quot;用法3: 使用新版的mas_topLayoutGuide和mas_bottomLayoutGuide&quot;&gt;&lt;/a&gt;用法3: 使用新版的mas_topLayoutGuide和mas_bottomLayoutGuide&lt;/h4&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/SnapKit/Masonry/commit/c99e65c2eb40a02106d87a1487f96c0f4b1b72c0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Masonry的新版&lt;/a&gt;中，为UIViewController增加了一个新的Category: “MASAdditions”，增加了mas_topLayoutGuide和mas_bottomLayoutGuide两个方法，这样的话，我们就可以优雅的使用topLayoutGuide和bottomLayoutGuide了~&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[_topView mas_makeConstraints:^(&lt;span class=&quot;name&quot;&gt;MASConstraintMaker&lt;/span&gt; *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 不用强制转换，也不用在updateViewConstraints里面更新了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(&lt;span class=&quot;name&quot;&gt;self.mas_topLayoutGuide&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;直接看Demo吧，比较简单。&lt;/p&gt;
&lt;h2 id=&quot;Case-3-自定义baseline&quot;&gt;&lt;a href=&quot;#Case-3-自定义baseline&quot; class=&quot;headerlink&quot; title=&quot;Case 3: 自定义baseline&quot;&gt;&lt;/a&gt;Case 3: 自定义baseline&lt;/h2&gt;&lt;p&gt;最后一个Case，讲讲baseline。&lt;br&gt;baseline，翻译过来就是“基线”，在Autolayout里面对应着&lt;strong&gt;NSLayoutFormatAlignAllBaseline&lt;/strong&gt;，也是一种对齐的标准。例如，UIButton的baseline就是内部的文字，如果一排button按照baseline对齐的话，就是下面这样：&lt;br&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_6.jpg&quot; alt=&quot;按钮按照baseline对其&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于自定义的View来说，baseline默认就是整个view的底部，如果想改变baseline的话，可以重写UIView的&lt;strong&gt;viewForBaselineLayout&lt;/strong&gt;，返回当成baseline的view即可。&lt;/p&gt;
&lt;p&gt;如下面的自定义view：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_7.jpg&quot; alt=&quot;自定义baseline&quot;&gt;&lt;/p&gt;
&lt;p&gt;很明显，baseline就是显示图片的UIImageView，代码也很简单:&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自定义的View中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回自定义的baseline的view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIView *)viewForBaselineLayout &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _imageView&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;灵活的使用baseline，可以更加方便的进行布局。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;写了好长，能全部看完的朋友，嗯，你是个优秀的程序员=。=&lt;/p&gt;
&lt;p&gt;后面打算用Swift的SnapKit把所有的Case全部实现一次。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chun.tips/blog/2014/10/23/xi-shu-autolayoutyi-lai-uiviewhe-uiviewcontrollerxin-zeng-de-xiang-guan-api-uiviewpian/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;细数AutoLayout以来UIView和UIViewController新增的相关API – UIView篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/qa/qa1797/_index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Preventing the Status Bar from Covering Your Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/#intrinsic-content-size&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced Auto Layout Toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chun.tips/blog/2014/10/25/xi-shu-autolayoutyi-lai-uiviewhe-uiviewcontrollerxin-zeng-de-xiang-guan-api-uiviewcontrollerpian/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;细数AutoLayout以来UIView和UIViewController新增的相关API – UIViewController篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wugaojun.com/blog/2015/05/24/autolayoutshi-zhan-cellgao-du-bu-gu-ding-de-uitableview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoLayout实战:cell高度不固定的UITableView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/d5d897ffe118&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoLayout下多行UILabel无法显示多行文本的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://grayluo.github.io/WeiFocusIo/autolayout/2015/02/01/autolayout5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoLayout深入浅出五-UITableView动态高度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.brynbodayle.com/faster-uitableviews-with-ios-7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Faster UITableViews with iOS 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Masonry写的Autolayout示例又来了，仍然是三个小例子，分别是&lt;strong&gt;变高度的UITableViewCell、topLayoutGuide与bottomLayoutGuide，还有自定义的baseline&lt;/strong&gt;，外加两个基本的知识点讲解，说不上“有趣”=。=，比较基础，写了很多，各位随意看看吧~&lt;/p&gt;
&lt;p&gt;第一篇: &lt;a href=&quot;http://tutuge.me/2015/05/23/autolayout-example-with-masonry/&quot;&gt;有趣的Autolayout示例-Masonry实现&lt;/a&gt;&lt;br&gt;第三篇: &lt;a href=&quot;http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/&quot;&gt;有趣的Autolayout示例3-Masonry实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github地址：&lt;br&gt;&lt;a href=&quot;https://github.com/zekunyan/AutolayoutExampleWithMasonry&quot;&gt;https://github.com/zekunyan/AutolayoutExampleWithMasonry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_autolayout_example_with_masonry2_1.gif&quot; alt=&quot;Gif示例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="Autolayout" scheme="http://tutuge.me/tags/Autolayout/"/>
    
      <category term="Masonry" scheme="http://tutuge.me/tags/Masonry/"/>
    
  </entry>
  
  <entry>
    <title>解决iOS项目的版本兼容问题-结合宏、Category和Runtime</title>
    <link href="http://tutuge.me/2015/07/25/compatibility-with-macro-category-and-runtime/"/>
    <id>http://tutuge.me/2015/07/25/compatibility-with-macro-category-and-runtime/</id>
    <published>2015-07-24T16:39:03.000Z</published>
    <updated>2016-03-20T09:02:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;h3 id=&quot;2015-11-16&quot;&gt;&lt;a href=&quot;#2015-11-16&quot; class=&quot;headerlink&quot; title=&quot;2015-11-16&quot;&gt;&lt;/a&gt;2015-11-16&lt;/h3&gt;&lt;p&gt;感谢微博好友&lt;strong&gt;@zyyy_000&lt;/strong&gt;的评论，补充了为什么要在&lt;code&gt;+ (void)load&lt;/code&gt;方法里面做&lt;strong&gt;Method Swizzling&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近，在做项目时，因为某种原因，突然要“适配”iOS6（也是醉了。。。），保证极少数的iOS6用户可以“用上”新的版本。哪怕界面上有瑕疵，只要功能正常就行。于是就只好花几天时间对iOS6进行紧急适配（心中一万头驼羊奔跑而过。。。）&lt;/p&gt;
&lt;p&gt;本文总结了一些常规的，和“非常规”的iOS项目向老版本兼容的办法，结合了&lt;strong&gt;宏定义&lt;/strong&gt;、&lt;strong&gt;Category&lt;/strong&gt;和&lt;strong&gt;Runtime&lt;/strong&gt;，大家看着消遣一下就好哈~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;重点概念&quot;&gt;&lt;a href=&quot;#重点概念&quot; class=&quot;headerlink&quot; title=&quot;重点概念&quot;&gt;&lt;/a&gt;重点概念&lt;/h2&gt;&lt;p&gt;首先强调一些概念。&lt;/p&gt;
&lt;h3 id=&quot;Deployment-Target-和-Base-SDK&quot;&gt;&lt;a href=&quot;#Deployment-Target-和-Base-SDK&quot; class=&quot;headerlink&quot; title=&quot;Deployment Target 和 Base SDK&quot;&gt;&lt;/a&gt;Deployment Target 和 Base SDK&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Deployment Target&lt;/strong&gt;&lt;br&gt;指的是你的APP能支持的最低系统版本，如要支持iOS6以上，就设置成iOS6即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base SDK&lt;/strong&gt;&lt;br&gt;指的是用来编译APP的SDK（Software Development Kit）的版本，一般保持当前XCode支持的最新的就好，如iOS8.4。SDK其实就是包含了所有的你要用到的头文件、链接库的集合，你的APP里面用的各种类、函数，能编译、链接成最后的安装包，就要靠它，苹果每次升级系统，新推出的各种API，也是在SDK里面。所以一般Base SDK肯定是大于等于Deployment Target的版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区分&lt;/strong&gt;&lt;br&gt;既然Base SDK的版本大于等于Deployment Target的版本，那么就要小心了，因为&lt;strong&gt;“只要用到的类、方法，在当前的Base SDK版本里面存在，就可以&lt;em&gt;编译通过&lt;/em&gt;！但是一旦运行APP的手机的系统版本低于这些类、方法的最低版本要求，APP就会Crash！”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以并不是说，能编译通过的，就一定能&lt;em&gt;运行成功&lt;/em&gt;！还要在&lt;em&gt;运行时检查&lt;/em&gt;！简单来说，就是如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7nj2iz.com1.z0.glb.clouddn.com/blog_compatibility-with-macro-category-and-runtime_1.png&quot; alt=&quot;兼容示意图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;宏只在编译时生效！&quot;&gt;&lt;a href=&quot;#宏只在编译时生效！&quot; class=&quot;headerlink&quot; title=&quot;宏只在编译时生效！&quot;&gt;&lt;/a&gt;宏只在编译时生效！&lt;/h3&gt;&lt;p&gt;宏定义只是纯粹的文本替换，只在编译时起作用。如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; __IPHONE_OS_VERSION_MIN_REQUIRED &amp;gt;= &lt;span class=&quot;number&quot;&gt;70000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Tutuge&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;被宏定义包起来的代码是否会执行，在编译时就决定好了，无论你是用什么系统运行，宏定义再也没有什么卵用=。=&lt;/p&gt;
&lt;h2 id=&quot;编译时检查SDK版本，运行时检查系统版本&quot;&gt;&lt;a href=&quot;#编译时检查SDK版本，运行时检查系统版本&quot; class=&quot;headerlink&quot; title=&quot;编译时检查SDK版本，运行时检查系统版本&quot;&gt;&lt;/a&gt;编译时检查SDK版本，运行时检查系统版本&lt;/h2&gt;&lt;p&gt;这个是最基本的适配手段。&lt;/p&gt;
&lt;p&gt;用到的宏如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;__IPHONE_OS_VERSION_MAX_ALLOWED&lt;/strong&gt;: 值等于Base SDK，即用于检查SDK版本的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;__IPHONE_OS_VERSION_MIN_REQUIRED&lt;/strong&gt;: 值等于Deployment Target，检查支持的最小系统版本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行时检查系统版本：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([UIDevice currentDevice]&lt;span class=&quot;selector-class&quot;&gt;.systemVersion&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.floatValue&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;f) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假如我们现在想用iOS8新的&lt;strong&gt;UIAlertController&lt;/strong&gt;来显示提示框，应该如下判断：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译时判断：检查SDK版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if __IPHONE_OS_VERSION_MAX_ALLOWED &amp;gt; 80000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 运行时判断：检查当前系统版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;built_in&quot;&gt;UIDevice&lt;/span&gt; currentDevice].systemVersion.floatValue &amp;gt; &lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;f) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIAlertController&lt;/span&gt; *alertController =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIAlertController&lt;/span&gt; alertControllerWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Tutuge&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            message:&lt;span class=&quot;string&quot;&gt;@&quot;Compatibility&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     preferredStyle:&lt;span class=&quot;built_in&quot;&gt;UIAlertControllerStyleAlert&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [alertController addAction:[&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; actionWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Cancel&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            style:&lt;span class=&quot;built_in&quot;&gt;UIAlertActionStyleCancel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          handler:^(&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; *action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                              &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Cancel&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &amp;#125;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:alertController animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 用旧的代替&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; *alertView = [[&lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; alloc] initWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Tutuge&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            message:&lt;span class=&quot;string&quot;&gt;@&quot;Compatibility&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                           delegate:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  cancelButtonTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Cancel&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  otherButtonTitles:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [alertView show];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总的来说就是编译时、运行时的判断均不能少。&lt;/p&gt;
&lt;h2 id=&quot;Weakly-Linked-运行时检查类、方法是否可用&quot;&gt;&lt;a href=&quot;#Weakly-Linked-运行时检查类、方法是否可用&quot; class=&quot;headerlink&quot; title=&quot;Weakly Linked - 运行时检查类、方法是否可用&quot;&gt;&lt;/a&gt;Weakly Linked - 运行时检查类、方法是否可用&lt;/h2&gt;&lt;p&gt;除了用宏、系统版本检测，还可以用&lt;strong&gt;Weakly Linked&lt;/strong&gt;特性做运行时的检查。&lt;/p&gt;
&lt;p&gt;对于iOS4.2以上的，有&lt;strong&gt;NS_CLASS_AVAILABLE&lt;/strong&gt;标示的类，可以如下判断是否可用：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; __IPHONE_OS_VERSION_MAX_ALLOWED &amp;gt; 80000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Weakly Linked判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;if&lt;/span&gt; ([UIAlertController &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 使用UIAlertController...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;built_in&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 使用旧的方案...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以如下判断：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;/span&gt;= NSClassFromString (@&lt;span class=&quot;string&quot;&gt;&quot;UIAlertController&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用UIAlertController...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用旧的方案...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于方法，如下判断:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; ([UITableViewCell &lt;span class=&quot;attribute&quot;&gt;instancesRespondToSelector&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;@selector&lt;/span&gt; (&lt;span class=&quot;attribute&quot;&gt;setSeparatorInset&lt;/span&gt;:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;selector-tag&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于用哪种方法，统一一下即可。&lt;/p&gt;
&lt;h2 id=&quot;用Method-Swizzling做兼容&quot;&gt;&lt;a href=&quot;#用Method-Swizzling做兼容&quot; class=&quot;headerlink&quot; title=&quot;用Method Swizzling做兼容&quot;&gt;&lt;/a&gt;用Method Swizzling做兼容&lt;/h2&gt;&lt;p&gt;有关Runtime、Method Swizzling的资料很多，各位自行阅读哈~&lt;/p&gt;
&lt;h3 id=&quot;在-void-load方法里面做替换&quot;&gt;&lt;a href=&quot;#在-void-load方法里面做替换&quot; class=&quot;headerlink&quot; title=&quot;在+ (void)load方法里面做替换&quot;&gt;&lt;/a&gt;在&lt;code&gt;+ (void)load&lt;/code&gt;方法里面做替换&lt;/h3&gt;&lt;p&gt;这里提一下为什么要在&lt;code&gt;+ (void)load&lt;/code&gt;方法里面做Method Swizzling。&lt;/p&gt;
&lt;p&gt;在Objective-C中，运行时会自动调用每个类的两个方法。&lt;code&gt;+ (void)load&lt;/code&gt;会在类、Category初始加载时调用，&lt;code&gt;+ (void)initialize&lt;/code&gt;会在第一次调用类的类方法或实例方法之前被调用。&lt;/p&gt;
&lt;p&gt;但是需要注意的是，&lt;code&gt;+ (void)initialize&lt;/code&gt;是可以被Category覆盖重写的，并且有多个Category都重写了&lt;code&gt;+ (void)initialize&lt;/code&gt;方法时，只会运行其中一个，所以在&lt;code&gt;+ (void)initialize&lt;/code&gt;里面做Method Swizzling显然是不行的。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;+ (void)load&lt;/code&gt;方法只要实现了，就一定会调用。具体为什么大家可以自行阅读Runtime的源码，或者查阅相关文章。&lt;/p&gt;
&lt;h3 id=&quot;用dispatch-once保证只运行一次&quot;&gt;&lt;a href=&quot;#用dispatch-once保证只运行一次&quot; class=&quot;headerlink&quot; title=&quot;用dispatch_once保证只运行一次&quot;&gt;&lt;/a&gt;用dispatch_once保证只运行一次&lt;/h3&gt;&lt;p&gt;因为Method Swizzling的影响是全局的，而且一旦多次调用，会出错，所以这个时候用dispatch_once就再合适不过了~&lt;/p&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;p&gt;下面就是利用Method Swizzling做兼容的一个例子。&lt;br&gt;有时候，不同版本之间，同一个类、View控件的默认属性可能都会变化，如UILabel的背景色在iOS6上，默认是白色，而iOS6以后是透明的！如果在每个用到UILabel的地方，都手动设置一次背景色，代价太大。这个时候就需要Runtime的“黑魔法”上场。&lt;/p&gt;
&lt;p&gt;就以设置UILabel的默认背景色透明为例，就是在UILabel初始化时，如initWithFrame之前，先设置好透明背景色，简单的示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建Category&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UILabel&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;TTGCompatibility&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 先判断系统版本，尽量减少Runtime的作用范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;built_in&quot;&gt;UIDevice&lt;/span&gt; currentDevice].systemVersion.floatValue &amp;lt; &lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;f) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Method Swizzling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// initWithFrame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Method oriMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(initWithFrame:));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Method newMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(compatible_initWithFrame:));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method_exchangeImplementations(oriMethod, newMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// initWithCoder...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// initWithFrame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)compatible_initWithFrame:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)frame &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; newSelf = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; compatible_initWithFrame:frame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置透明背景色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *)newSelf).backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newSelf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// initWithCoder...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;运行时添加“Dummy”方法，减少代码改动&quot;&gt;&lt;a href=&quot;#运行时添加“Dummy”方法，减少代码改动&quot; class=&quot;headerlink&quot; title=&quot;运行时添加“Dummy”方法，减少代码改动&quot;&gt;&lt;/a&gt;运行时添加“Dummy”方法，减少代码改动&lt;/h2&gt;&lt;p&gt;Dummy，意思是“假的、假动作、假人”，在这里指的是为旧版本不存在的方法提供一个“假的”替代方法，防止因新API找不到而导致的Crash。&lt;/p&gt;
&lt;p&gt;以UITableViewCell的&lt;strong&gt;“setSeparatorInset:”&lt;/strong&gt;方法为例，在iOS6中，压根就不存在separatorInset，但是现有的代码里面大量的调用了这个方法，怎么办？难道一个一个的去加上判断条件？代价太大。&lt;/p&gt;
&lt;p&gt;这个时候就可以用Runtime的手段，在运行时添加一个Dummy方法，去“&lt;strong&gt;代替接收&lt;/strong&gt;”setSeparatorInset消息，防止在iOS6上的Crash。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UITableViewCell&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;TTGCompatibility&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译时判断SDK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if __IPHONE_OS_VERSION_MAX_ALLOWED &amp;gt; __IPHONE_7_0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 运行时判断系统版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;built_in&quot;&gt;UIDevice&lt;/span&gt; currentDevice].systemVersion.floatValue &amp;lt; &lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;f) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method newMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(compatible_setSeparatorInset:));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 增加Dummy方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        class_addMethod(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(setSeparatorInset:),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                method_getImplementation(newMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                method_getTypeEncoding(newMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// setSeparatorInset: 的Dummy方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)compatible_setSeparatorInset:(&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt;) inset &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 空方法都可以，只是为了接收setSeparatorInset:消息。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在适配旧版本时，除了基本的宏定义、[UIDevice currentDevice].systemVersion判断，适当的用Runtime，可以大大减少对现有代码的“干涉”，多种方法相结合才是最好的。&lt;/p&gt;
&lt;p&gt;嗯，还在用iOS6的用户，升个级呗=。=&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Introduction/Introduction.html#//apple_ref/doc/uid/10000163-BCICHGIE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SDK Compatibility Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git.devzeng.com/blog/ios-multiple-version-compatible.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发之多系统版本兼容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3057325/weak-linking-check-if-a-class-exists-and-use-that-class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weak Linking - check if a class exists and use that class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19789958/xcode-preprocessor-macro-to-check-if-base-sdk-ios-7-0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode preprocessor macro to check if Base SDK &amp;gt;= iOS 7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xuzhongzhou.net/post/ios-sdk-compatibility-guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS SDK 兼容性指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;h3 id=&quot;2015-11-16&quot;&gt;&lt;a href=&quot;#2015-11-16&quot; class=&quot;headerlink&quot; title=&quot;2015-11-16&quot;&gt;&lt;/a&gt;2015-11-16&lt;/h3&gt;&lt;p&gt;感谢微博好友&lt;strong&gt;@zyyy_000&lt;/strong&gt;的评论，补充了为什么要在&lt;code&gt;+ (void)load&lt;/code&gt;方法里面做&lt;strong&gt;Method Swizzling&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近，在做项目时，因为某种原因，突然要“适配”iOS6（也是醉了。。。），保证极少数的iOS6用户可以“用上”新的版本。哪怕界面上有瑕疵，只要功能正常就行。于是就只好花几天时间对iOS6进行紧急适配（心中一万头驼羊奔跑而过。。。）&lt;/p&gt;
&lt;p&gt;本文总结了一些常规的，和“非常规”的iOS项目向老版本兼容的办法，结合了&lt;strong&gt;宏定义&lt;/strong&gt;、&lt;strong&gt;Category&lt;/strong&gt;和&lt;strong&gt;Runtime&lt;/strong&gt;，大家看着消遣一下就好哈~&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://tutuge.me/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>用Runtime的手段填充任意NSObject对象的nil属性</title>
    <link href="http://tutuge.me/2015/07/08/fill-nil-property-of-object/"/>
    <id>http://tutuge.me/2015/07/08/fill-nil-property-of-object/</id>
    <published>2015-07-08T15:23:23.000Z</published>
    <updated>2016-03-20T09:03:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;好久没有写东西了，忙啊。&lt;br&gt;前段时间参加了一下我们华科联创的HackDay（本人在读研=。=，目前在阿里实习），作品是一款&lt;strong&gt;实时在线对战游戏 - 波波攒&lt;/strong&gt;，（介绍请看&lt;a href=&quot;http://www.zhihu.com/question/24402279&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;）&lt;br&gt;从iOS游戏客户端（用的&lt;strong&gt;SpriteKit&lt;/strong&gt;）到后台（&lt;strong&gt;PHP CI + Node + SocketIO + MySQL&lt;/strong&gt;）全是自己一个人倒腾出来的，做了一把真正的全栈工程师，爽啊~&lt;br&gt;后面会完善整个游戏，增加角色、优化啥的，过上一段时间会上线的哈~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回到正文&lt;/strong&gt;，本文主要介绍了怎么用Runtime的手段遍历任意NSObject对象的所有property，检查其值是否是nil，是的话根据其类型为其填充一个默认值。&lt;br&gt;Runtime毕竟是个“危险”的技术，本文的代码只是个初步的尝试。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h2&gt;&lt;p&gt;在做项目的过程中，总是会写一大堆if、else语句去检查对象的Property是否是nil，如从服务器返回的JSON中缺少属性，导致Entity的某些值为空；或者创建的对象没有对所有属性做初始化等等。写多了觉得好烦啊=。=&lt;br&gt;所以想到本文的方法，嗯，程序员总是懒的。&lt;/p&gt;
&lt;h2 id=&quot;解决步骤&quot;&gt;&lt;a href=&quot;#解决步骤&quot; class=&quot;headerlink&quot; title=&quot;解决步骤&quot;&gt;&lt;/a&gt;解决步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;遍历一个对象的所有属性（默认不包括父类属性）。&lt;/li&gt;
&lt;li&gt;判断属性是否是nil。&lt;/li&gt;
&lt;li&gt;为nil的属性，获取它的类型。&lt;/li&gt;
&lt;li&gt;根据类型设置初始值（如NSString可以设为空字符串；NSNumber可以设为@0）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Runtime&quot;&gt;&lt;a href=&quot;#Runtime&quot; class=&quot;headerlink&quot; title=&quot;Runtime&quot;&gt;&lt;/a&gt;Runtime&lt;/h2&gt;&lt;p&gt;OC是一门“动态”、“基于消息”的语言，而Runtime就是利用OC的动态特性，在运行时对程序做出“调整”的技术。有关Runtime的官方文档、网上的资料很多，大家自学哈~&lt;/p&gt;
&lt;p&gt;本文主要用了如下几个Runtime的函数：&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 获取类的所有&lt;span class=&quot;keyword&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;. objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取一个&lt;span class=&quot;keyword&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;&lt;/span&gt;的变量名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;. const char *property_getName(objc_property_t &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取一个&lt;span class=&quot;keyword&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;&lt;/span&gt;的详细类型表达字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;. const char *property_getAttributes(objc_property_t &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;&lt;p&gt;不好一块一块拆开说，直接上代码：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 解析Property的Attributed字符串，参考Stackoverflow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *getPropertyType(objc_property_t property) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *attributes = property_getAttributes(property);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%s&quot;&lt;/span&gt;, attributes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + strlen(attributes)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    strcpy(buffer, attributes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *state = buffer, *attribute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((attribute = strsep(&amp;amp;state, &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;)) != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 非对象类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (attribute[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;T&#39;&lt;/span&gt; &amp;amp;&amp;amp; attribute[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&#39;@&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 利用NSData复制一份字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) [[&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; dataWithBytes:(attribute + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) length:strlen(attribute) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] bytes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 纯id类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (attribute[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;T&#39;&lt;/span&gt; &amp;amp;&amp;amp; attribute[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;@&#39;&lt;/span&gt; &amp;amp;&amp;amp; strlen(attribute) == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 对象类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (attribute[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;T&#39;&lt;/span&gt; &amp;amp;&amp;amp; attribute[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;@&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) [[&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; dataWithBytes:(attribute + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) length:strlen(attribute) - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] bytes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 给对象的属性设置默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; checkEntity(&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; *object) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 不同类型的字符串表示，目前只是简单检查字符串、数字、数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSSTRING&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSNUMBER&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSARRAY&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化类型常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// &quot;NSString&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSSTRING&lt;/span&gt; =  &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; class]).UTF8String;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// &quot;NSNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSNUMBER&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; class]).UTF8String;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// &quot;NSArray&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSARRAY&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; class]).UTF8String;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outCount, i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 包含所有Property的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        objc_property_t *properties = class_copyPropertyList([object class], &amp;amp;outCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 遍历每个Property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outCount; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 取出对应Property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            objc_property_t property = properties[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 获取Property对应的变量名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *propertyName = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:property_getName(property)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 获取Property的类型名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *propertyTypeName = getPropertyType(property);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 获取Property的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; propertyValue = [object valueForKey:propertyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 值为空，才设置默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!propertyValue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// NSString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strncmp(CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSSTRING&lt;/span&gt;, propertyTypeName, strlen(CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSSTRING&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    [object setValue:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt; forKey:propertyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// NSNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strncmp(CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSNUMBER&lt;/span&gt;, propertyTypeName, strlen(CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSNUMBER&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    [object setValue:@&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; forKey:propertyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// NSArray&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strncmp(CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSARRAY&lt;/span&gt;, propertyTypeName, strlen(CLASS_NAME_&lt;span class=&quot;built_in&quot;&gt;NSARRAY&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    [object setValue:@[] forKey:propertyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 别忘了释放数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        free(properties);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;@catch&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; *exception) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Check Entity Exception: %@&quot;&lt;/span&gt;, [exception description]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;重点-解析property-getAttributes函数的结果&quot;&gt;&lt;a href=&quot;#重点-解析property-getAttributes函数的结果&quot; class=&quot;headerlink&quot; title=&quot;重点 - 解析property_getAttributes函数的结果&quot;&gt;&lt;/a&gt;重点 - 解析property_getAttributes函数的结果&lt;/h2&gt;&lt;p&gt;在整个处理过程中，property_getAttributes函数是关键，因为我们要首先确定Property的类型，才能根据类型赋初值，但是property_getAttributes函数返回的字符串比较“晦涩难懂”：&lt;/p&gt;
&lt;p&gt;如下定义的Property：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *cStr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;依次通过property_getAttributes获取的结果是：&lt;br&gt;&lt;figure class=&quot;highlight mathematica&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;T@&lt;span class=&quot;string&quot;&gt;&quot;NSString&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;C&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;,V_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;T@&lt;span class=&quot;string&quot;&gt;&quot;NSNumber&quot;&lt;/span&gt;,&amp;amp;,&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;,V_number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;T@&lt;span class=&quot;string&quot;&gt;&quot;NSArray&quot;&lt;/span&gt;,&amp;amp;,&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;,V_array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Tq,&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;,V_i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Td,&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;,V_f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;T*,&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;,V_cStr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Declared Properties of Objective-C Runtime Programming Guide&lt;/a&gt;&lt;br&gt;我们大概可以知道，T表示Type，后面跟着@表示Cocoa对象类型，后面的表示Property的属性，如Copy、strong等，然后就是变量名。&lt;br&gt;所以getPropertyType函数的工作就是纯粹的解析字符串，获取T@后面的类型名。&lt;/p&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;例如我们有如下对象：&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;UserEntity &lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (copy, nonatomic) NSString *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (strong, nonatomic) NSNumber *number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (strong, nonatomic) NSArray *array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置默认值：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UserEntity *userEntity = [UserEntity new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 检查属性，设置默认值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkEntity(userEntity)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;name: %@&quot;&lt;/span&gt;, userEntity.name)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;number: %@&quot;&lt;/span&gt;, userEntity.number)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;array: %@&quot;&lt;/span&gt;, userEntity.array)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-07-11&lt;/span&gt; 18&lt;span class=&quot;selector-pseudo&quot;&gt;:17&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:25.918&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Common&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[6939:270543]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;name&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-07-11&lt;/span&gt; 18&lt;span class=&quot;selector-pseudo&quot;&gt;:17&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:25.918&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Common&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[6939:270543]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;number&lt;/span&gt;: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-07-11&lt;/span&gt; 18&lt;span class=&quot;selector-pseudo&quot;&gt;:17&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:25.918&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Common&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[6939:270543]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;array&lt;/span&gt;: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，一个对象的所有Property都有了初值。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;上面的例子只是个粗略的版本，只是检查了字符串、数字、数组，其实完全可以扩展出很多功能，如针对不同的类型，根据对象的类型，设置不同的默认初值等，靠读者你了~&lt;/p&gt;
&lt;p&gt;Runtime是个好东西，但是别乱用啊=。=&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Runtime Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Runtime Programming Guide - Declared Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/754824/get-an-object-properties-list-in-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get an object properties list in Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;好久没有写东西了，忙啊。&lt;br&gt;前段时间参加了一下我们华科联创的HackDay（本人在读研=。=，目前在阿里实习），作品是一款&lt;strong&gt;实时在线对战游戏 - 波波攒&lt;/strong&gt;，（介绍请看&lt;a href=&quot;http://www.zhihu.com/question/24402279&quot;&gt;知乎&lt;/a&gt;）&lt;br&gt;从iOS游戏客户端（用的&lt;strong&gt;SpriteKit&lt;/strong&gt;）到后台（&lt;strong&gt;PHP CI + Node + SocketIO + MySQL&lt;/strong&gt;）全是自己一个人倒腾出来的，做了一把真正的全栈工程师，爽啊~&lt;br&gt;后面会完善整个游戏，增加角色、优化啥的，过上一段时间会上线的哈~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回到正文&lt;/strong&gt;，本文主要介绍了怎么用Runtime的手段遍历任意NSObject对象的所有property，检查其值是否是nil，是的话根据其类型为其填充一个默认值。&lt;br&gt;Runtime毕竟是个“危险”的技术，本文的代码只是个初步的尝试。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://tutuge.me/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>有趣的Autolayout示例-Masonry实现</title>
    <link href="http://tutuge.me/2015/05/23/autolayout-example-with-masonry/"/>
    <id>http://tutuge.me/2015/05/23/autolayout-example-with-masonry/</id>
    <published>2015-05-23T11:59:22.000Z</published>
    <updated>2016-03-20T08:55:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;2015-12-23: 感谢&lt;a href=&quot;https://github.com/XVXVXXX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XVXVXXX&lt;/a&gt;的PR，更新了Case2&lt;br&gt;2015-12-15: 第三篇：&lt;a href=&quot;http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/&quot;&gt;有趣的Autolayout示例3-Masonry实现&lt;/a&gt;&lt;br&gt;2015-11-27: 感谢“谢小雷”指出打字错误~&lt;br&gt;2015-9-10: 第二篇: &lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;&lt;br&gt;2015-9-1: 感谢“王振宇C艹”指出打字错误，已经修改了哈~&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;好久没有写Blog了，这段时间有点忙啊=。=&lt;br&gt;本文举了3个比较有“特点”的Autolayout例子，源于微博上好友的提问，感觉比较有意思，也比较有代表性，就写了出来，分享给大家~&lt;br&gt;至于为什么用Masonry，那是因为它好用啊！（被问到过有关Masonry的问题，就索性用它来实现吧=。=）。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_autolayout_example_with_masonry_1.gif&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Github地址&quot;&gt;&lt;a href=&quot;#Github地址&quot; class=&quot;headerlink&quot; title=&quot;Github地址&quot;&gt;&lt;/a&gt;Github地址&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zekunyan/AutolayoutExampleWithMasonry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/AutolayoutExampleWithMasonry&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;关于例子工程结构&quot;&gt;&lt;a href=&quot;#关于例子工程结构&quot; class=&quot;headerlink&quot; title=&quot;关于例子工程结构&quot;&gt;&lt;/a&gt;关于例子工程结构&lt;/h3&gt;&lt;p&gt;实现的时候采用的是用StoryBoard拖拽约束+Masonry手写代码相结合的方式实现。最关键的地方是用Masonry，为了更好地突出重点。其它的无关紧要的空间约束，直接就拖拽了。&lt;/p&gt;
&lt;h2 id=&quot;关于Autolayout&quot;&gt;&lt;a href=&quot;#关于Autolayout&quot; class=&quot;headerlink&quot; title=&quot;关于Autolayout&quot;&gt;&lt;/a&gt;关于Autolayout&lt;/h2&gt;&lt;p&gt;刚开始学习Autolayout的时候，什么“Leading Edges”、“Horizontal Centers”，好多啊，感觉一下子适应不来，有时候面对一个界面布局上的需求，可能都无从下手。&lt;/p&gt;
&lt;p&gt;总的来说，我觉得Autolayout的关键就是“&lt;strong&gt;Constraint（约束）&lt;/strong&gt;”。其实就是以下两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从显式设置frame的属性，到利用约束控制View的大小、位置。&lt;/li&gt;
&lt;li&gt;思考如何布局时，重点从单个的View，到整体所有View之间的相互关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然没有了具体设置View的frame属性，也就是说，系统会在运行时，通过我们设定的“约束”，计算出每个View的frame，再去绘制屏幕内容。&lt;/p&gt;
&lt;p&gt;也就是说，我们设置的Constraint，要能体现出View的&lt;strong&gt;位置（x、y坐标）&lt;/strong&gt;、&lt;strong&gt;大小（宽高）&lt;/strong&gt;。无论是用IB拖拽约束，还是手写代码，只要从这个角度去思考，很多问题就都能解决。&lt;/p&gt;
&lt;p&gt;有关Autolayout的知识，网上有很多，在这里就不详细列出了，但是有个公式倒是可以贴出来：&lt;/p&gt;
&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;viewA-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; = viewB-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; * multiplier + &lt;span class=&quot;keyword&quot;&gt;constant&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关于Masonry&quot;&gt;&lt;a href=&quot;#关于Masonry&quot; class=&quot;headerlink&quot; title=&quot;关于Masonry&quot;&gt;&lt;/a&gt;关于Masonry&lt;/h2&gt;&lt;p&gt;好用！&lt;/p&gt;
&lt;h2 id=&quot;Case-1-并排两个label，宽度由内容决定。父级View宽度不够时，优先显示左边label的内容&quot;&gt;&lt;a href=&quot;#Case-1-并排两个label，宽度由内容决定。父级View宽度不够时，优先显示左边label的内容&quot; class=&quot;headerlink&quot; title=&quot;Case 1: 并排两个label，宽度由内容决定。父级View宽度不够时，优先显示左边label的内容&quot;&gt;&lt;/a&gt;Case 1: 并排两个label，宽度由内容决定。父级View宽度不够时，优先显示左边label的内容&lt;/h2&gt;&lt;p&gt;遇到这种跟内容压缩、优先级有关的布局，就不得不提Autolayout中的两个重要的属性“&lt;strong&gt;Content Compression Resistance&lt;/strong&gt;”和“&lt;strong&gt;Content Hugging&lt;/strong&gt;”。&lt;/p&gt;
&lt;h3 id=&quot;Content-Compression-Resistance-不许挤我！&quot;&gt;&lt;a href=&quot;#Content-Compression-Resistance-不许挤我！&quot; class=&quot;headerlink&quot; title=&quot;Content Compression Resistance = 不许挤我！&quot;&gt;&lt;/a&gt;Content Compression Resistance = 不许挤我！&lt;/h3&gt;&lt;p&gt;对，这个属性说白了就是“不许挤我”=。=&lt;br&gt;这个属性的优先级（Priority）越高，越不“容易”被压缩。也就是说，当整体的空间装不下所有的View的时候，Content Compression Resistance优先级越高的，显示的内容越完整。&lt;/p&gt;
&lt;h3 id=&quot;Content-Hugging-抱紧！&quot;&gt;&lt;a href=&quot;#Content-Hugging-抱紧！&quot; class=&quot;headerlink&quot; title=&quot;Content Hugging = 抱紧！&quot;&gt;&lt;/a&gt;Content Hugging = 抱紧！&lt;/h3&gt;&lt;p&gt;这个属性的优先级越高，整个View就要越“抱紧”View里面的内容。也就是View的大小不会随着父级View的扩大而扩大。&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;p&gt;根据要求，可以将约束分为两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整体空间足够时，两个label的宽度由内容决定，也就是说，label的“Content Hugging”优先级很高，而且没有固定的Width属性。&lt;/li&gt;
&lt;li&gt;整体空间不够时，左边的label更不容易被压缩，也就是“Content Compression Resistance”优先级更高。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;label不设置具体的宽度（width）属性，宽度由内容决定。&lt;/li&gt;
&lt;li&gt;显示的优先级由“Content Compression Resistance”属性的高低决定。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;约束示例图&quot;&gt;&lt;a href=&quot;#约束示例图&quot; class=&quot;headerlink&quot; title=&quot;约束示例图&quot;&gt;&lt;/a&gt;约束示例图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_autolayout_example_with_masonry_2.png&quot; alt=&quot;约束示例图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;关键代码&quot;&gt;&lt;a href=&quot;#关键代码&quot; class=&quot;headerlink&quot; title=&quot;关键代码&quot;&gt;&lt;/a&gt;关键代码&lt;/h3&gt;&lt;p&gt;关键的代码如下：（label1是左边的label，label2是右边的）&lt;/p&gt;
&lt;h4 id=&quot;设置位置&quot;&gt;&lt;a href=&quot;#设置位置&quot; class=&quot;headerlink&quot; title=&quot;设置位置&quot;&gt;&lt;/a&gt;设置位置&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// label1: 位于左上角&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_label1 mas_makeConstraints:^(MASConstraintMaker *&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.top.equalTo(_contentView1.mas_top).with.offset(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.left.equalTo(_contentView1.mas_left).with.offset(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 40高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.height.equalTo(@&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// label2: 位于右上角&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_label2 mas_makeConstraints:^(MASConstraintMaker *&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//左边贴着label1，间隔2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.left.equalTo(_label1.mas_right).with.offset(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//上边贴着父view，间隔5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.top.equalTo(_contentView1.mas_top).with.offset(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//右边的间隔保持大于等于2，注意是lessThanOrEqual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里的“lessThanOrEqualTo”放在从左往右的X轴上考虑会更好理解。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//即：label2的右边界的X坐标值“小于等于”containView的右边界的X坐标值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.right.lessThanOrEqualTo(_contentView1.mas_right).with.offset(&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//只设置高度40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.height.equalTo(@&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;设置内容约束&quot;&gt;&lt;a href=&quot;#设置内容约束&quot; class=&quot;headerlink&quot; title=&quot;设置内容约束&quot;&gt;&lt;/a&gt;设置内容约束&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置label1的content hugging 为1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[_label1 setContentHuggingPriority:UILayoutPriorityRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           forAxis:UILayoutConstraintAxisHorizontal]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置label1的content compression 为1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[_label1 setContentCompressionResistancePriority:UILayoutPriorityRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         forAxis:UILayoutConstraintAxisHorizontal]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置右边的label2的content hugging 为1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[_label2 setContentHuggingPriority:UILayoutPriorityRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           forAxis:UILayoutConstraintAxisHorizontal]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置右边的label2的content compression 为250&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[_label2 setContentCompressionResistancePriority:UILayoutPriorityDefaultLow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         forAxis:UILayoutConstraintAxisHorizontal]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;小节&quot;&gt;&lt;a href=&quot;#小节&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h3&gt;&lt;p&gt;灵活运用“Content Compression Resistance”和“Content Hugging”属性。&lt;/p&gt;
&lt;h2 id=&quot;Case-2-四个ImageView整体居中，可以任意显示、隐藏&quot;&gt;&lt;a href=&quot;#Case-2-四个ImageView整体居中，可以任意显示、隐藏&quot; class=&quot;headerlink&quot; title=&quot;Case 2: 四个ImageView整体居中，可以任意显示、隐藏&quot;&gt;&lt;/a&gt;Case 2: 四个ImageView整体居中，可以任意显示、隐藏&lt;/h2&gt;&lt;p&gt;先看看示例的截图：&lt;br&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_autolayout_example_with_masonry_3.png&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面的四个Switch控件分别控制上面对应位置的图片是否显示。&lt;/p&gt;
&lt;h3 id=&quot;分析-1&quot;&gt;&lt;a href=&quot;#分析-1&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先就是整体居中，为了实现这个，最简单的办法就是将四个图片“装进”一个&lt;strong&gt;容器View&lt;/strong&gt;里面，然后让这个容器View在整个页面中居中即可。这样就不用控制每个图片的居中效果了。&lt;/li&gt;
&lt;li&gt;然后就是显示与隐藏。在这里我直接控制图片ImageView的宽度，宽度为0的时候不就“隐藏”了吗。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;约束示例图-1&quot;&gt;&lt;a href=&quot;#约束示例图-1&quot; class=&quot;headerlink&quot; title=&quot;约束示例图&quot;&gt;&lt;/a&gt;约束示例图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_autolayout_example_with_masonry_4.png&quot; alt=&quot;约束示例图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之所以这么设置，主要目的有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽量减少无效的约束，保证约束不多也不少。&lt;/li&gt;
&lt;li&gt;内部的每个imageView约束其实都只有四个：left、centerY、width和height，这样有个好处，就是可以在循环里面依次添加约束，大大减少代码量。&lt;/li&gt;
&lt;li&gt;最右边的imageView还要单独设置跟容器View的右边约束，是为了不用设置容器View的width，保证容器View是刚好包含内部的View的，这样整体才是居中的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关键代码-1&quot;&gt;&lt;a href=&quot;#关键代码-1&quot; class=&quot;headerlink&quot; title=&quot;关键代码&quot;&gt;&lt;/a&gt;关键代码&lt;/h3&gt;&lt;p&gt;先看看最外层容器View的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//containerView 就是 容器View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_containerView mas_makeConstraints:^(MASConstraintMaker *&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//只设置高度，宽度由子View决定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.height.equalTo(@(IMAGE_SIZE));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//水平居中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.centerX.equalTo(self.view.mas_centerX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//距离父View顶部200点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;.top.equalTo(self.view.mas_top).offset(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;循环创建每个内部的imageView&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//循环创建、添加imageView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (NSUInteger i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; 4; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImageView *imageView = [[UIImageView &lt;span class=&quot;keyword&quot;&gt;alloc&lt;/span&gt;] initWithImage:[UIImage imageNamed:_imageNames[i]]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_imageViews addObject:imageView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_containerView addSubview:imageView]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后是循环对imageView加上约束： 感谢&lt;a href=&quot;https://github.com/XVXVXXX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XVXVXXX&lt;/a&gt;的PR:-D&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设定大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CGSize imageViewSize = CGSizeMake(IMAGE_SIZE, IMAGE_SIZE)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//分别设置每个imageView的宽高、左边、垂直中心约束，注意约束的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//每个View的左边约束和左边的View的右边相等=。=，有点绕口...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 保存循环中的临时结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__block UIView *lastView = nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__block MASConstraint *widthConstraint = nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSUInteger arrayCount = _imageViews.count&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_imageViews enumerateObjectsUsingBlock:^(UIView *view, NSUInteger idx, BOOL *&lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [view mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//宽高固定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        widthConstraint = make.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.equalTo(@(imageViewSize.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.height.equalTo(@(imageViewSize.height))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//左边约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.left.equalTo(lastView ? lastView.mas_right : view.superview.mas_left)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//垂直中心对齐&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        make.centerY.equalTo(view.superview.mas_centerY)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置最右边的imageView的右边与父view的最右对齐&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (idx == arrayCount - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            make.right.equalTo(view.superview.mas_right)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_widthConstraints addObject:widthConstraint]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lastView = view&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;控制ImageView显示、隐藏的时候，直接让其宽度等于0就行：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (IBAction)showOrHideImage:(UISwitch *)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSUInteger index = (NSUInteger) sender.tag&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MASConstraint *&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; = _widthConstraints[index]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sender.&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.equalTo(@(IMAGE_SIZE))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;.equalTo(@&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;小节-1&quot;&gt;&lt;a href=&quot;#小节-1&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h3&gt;&lt;p&gt;有时候用个“容器View”管理内部的View，往往会起到事半功倍的效果。而且在组织约束的时候，尽量的将约束统一起来，这样可以用一个函数去设置，减少代码量。&lt;/p&gt;
&lt;h2 id=&quot;Case-3-子View的宽度始终是父级View的一半（或者任意百分比）&quot;&gt;&lt;a href=&quot;#Case-3-子View的宽度始终是父级View的一半（或者任意百分比）&quot; class=&quot;headerlink&quot; title=&quot;Case 3: 子View的宽度始终是父级View的一半（或者任意百分比）&quot;&gt;&lt;/a&gt;Case 3: 子View的宽度始终是父级View的一半（或者任意百分比）&lt;/h2&gt;&lt;p&gt;其实这个很简单=。= 再看看这个公式：&lt;/p&gt;
&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;viewA-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; = viewB-&lt;span class=&quot;keyword&quot;&gt;attribute&lt;/span&gt; * multiplier + &lt;span class=&quot;keyword&quot;&gt;constant&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个是Autolayout里面一个约束的不同属性的基本组合关系，替换成宽度的话，就是下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;子&lt;span class=&quot;keyword&quot;&gt;View&lt;/span&gt;的宽度 = 父级&lt;span class=&quot;keyword&quot;&gt;View&lt;/span&gt;宽度 * 系数 + 常数；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Masonry里面，其实有个函数“&lt;strong&gt;multipliedBy&lt;/strong&gt;”，就是用来设置multipler属性的（跟原本的NSLayoutConstraint的对应）。&lt;/p&gt;
&lt;h3 id=&quot;关键代码-2&quot;&gt;&lt;a href=&quot;#关键代码-2&quot; class=&quot;headerlink&quot; title=&quot;关键代码&quot;&gt;&lt;/a&gt;关键代码&lt;/h3&gt;&lt;p&gt;如下：&lt;br&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[subView mas_makeConstraints:^(&lt;span class=&quot;name&quot;&gt;MASConstraintMaker&lt;/span&gt; *make) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //上下左贴边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.left.equalTo(&lt;span class=&quot;name&quot;&gt;_containerView.mas_left&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.top.equalTo(&lt;span class=&quot;name&quot;&gt;_containerView.mas_top&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.bottom.equalTo(&lt;span class=&quot;name&quot;&gt;_containerView.mas_bottom&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //宽度为父view的宽度的一半&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make.width.equalTo(&lt;span class=&quot;name&quot;&gt;_containerView.mas_width&lt;/span&gt;).multipliedBy(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着，只要控制父级View的宽度，子View的宽度就会随着变化了。&lt;/p&gt;
&lt;h3 id=&quot;小节-2&quot;&gt;&lt;a href=&quot;#小节-2&quot; class=&quot;headerlink&quot; title=&quot;小节&quot;&gt;&lt;/a&gt;小节&lt;/h3&gt;&lt;p&gt;multipliedBy在Masonry的Github主页里面没有=。=&lt;br&gt;所以要养成读头文件的习惯~&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;有关Autolayout的东西还有好多没有写，什么动画啊、动态修改约束之类的，本文也算是个引子吧，任重而道远~&lt;/p&gt;
&lt;p&gt;能看到这的朋友，也算是很有耐心了，哈哈~~&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SnapKit/Masonry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnapKit/Masonry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Masonry介绍与使用实践(快速上手Autolayout)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vienta.me/2014/12/07/AutoLayout-忘掉Frame-拥抱Constraint（I）/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoLayout:忘掉Frame,拥抱Constraint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/MicroCai/note/73867#autolayout-基础&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autolayout 基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codingobjc.com/blog/2015/01/28/autolayoutzhong-de-content-compression-resistancehe-content-huggingdao-di-shi-shi-yao-yi-si/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对Auto Layout中的Content Compression Resistance和Content Hugging的总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;2015-12-23: 感谢&lt;a href=&quot;https://github.com/XVXVXXX&quot;&gt;XVXVXXX&lt;/a&gt;的PR，更新了Case2&lt;br&gt;2015-12-15: 第三篇：&lt;a href=&quot;http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/&quot;&gt;有趣的Autolayout示例3-Masonry实现&lt;/a&gt;&lt;br&gt;2015-11-27: 感谢“谢小雷”指出打字错误~&lt;br&gt;2015-9-10: 第二篇: &lt;a href=&quot;http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/&quot;&gt;有趣的Autolayout示例2-Masonry实现&lt;/a&gt;&lt;br&gt;2015-9-1: 感谢“王振宇C艹”指出打字错误，已经修改了哈~&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;好久没有写Blog了，这段时间有点忙啊=。=&lt;br&gt;本文举了3个比较有“特点”的Autolayout例子，源于微博上好友的提问，感觉比较有意思，也比较有代表性，就写了出来，分享给大家~&lt;br&gt;至于为什么用Masonry，那是因为它好用啊！（被问到过有关Masonry的问题，就索性用它来实现吧=。=）。&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_autolayout_example_with_masonry_1.gif&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Github地址&quot;&gt;&lt;a href=&quot;#Github地址&quot; class=&quot;headerlink&quot; title=&quot;Github地址&quot;&gt;&lt;/a&gt;Github地址&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zekunyan/AutolayoutExampleWithMasonry&quot;&gt;https://github.com/zekunyan/AutolayoutExampleWithMasonry&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="Autolayout" scheme="http://tutuge.me/tags/Autolayout/"/>
    
      <category term="Masonry" scheme="http://tutuge.me/tags/Masonry/"/>
    
  </entry>
  
  <entry>
    <title>UITextView编辑时插入自定义表情-续-自定义表情图片的大小</title>
    <link href="http://tutuge.me/2015/04/21/resizable-nstextattachment/"/>
    <id>http://tutuge.me/2015/04/21/resizable-nstextattachment/</id>
    <published>2015-04-21T12:26:17.000Z</published>
    <updated>2016-03-20T09:03:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2015-11-27：增加了利用NSTextAttachment的bounds属性修改大小的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文是基于&lt;a href=&quot;http://tutuge.me/2015/03/07/UITextView编辑时插入自定义表情-简单的图文混编/&quot;&gt;UITextView编辑时插入自定义表情-简单的图文混编&lt;/a&gt;写的，主要实现了在UITextView插入表情图片时，自定义表情大小的功能。&lt;/p&gt;
&lt;h4 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h4&gt;&lt;p&gt;本文代码工程地址：&lt;a href=&quot;https://github.com/zekunyan/UITextViewDIYEmojiExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/UITextViewDIYEmojiExample&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Gif示例图&quot;&gt;&lt;a href=&quot;#Gif示例图&quot; class=&quot;headerlink&quot; title=&quot;Gif示例图&quot;&gt;&lt;/a&gt;Gif示例图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_resizable_nstextattachment_1.gif&quot; alt=&quot;Gif示例图&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;关键点&quot;&gt;&lt;a href=&quot;#关键点&quot; class=&quot;headerlink&quot; title=&quot;关键点&quot;&gt;&lt;/a&gt;关键点&lt;/h2&gt;&lt;p&gt;首先要明确我们要什么，很简单，就是&lt;strong&gt;指定NSTextAttachment在被绘制时的大小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，按照这个思路，就可以去找找NSTextAttachment类的相关方法，看能不能通过继承或其他的方式改变大小。&lt;/p&gt;
&lt;h3 id=&quot;方法1-NSTextAttachmentContainer&quot;&gt;&lt;a href=&quot;#方法1-NSTextAttachmentContainer&quot; class=&quot;headerlink&quot; title=&quot;方法1 - NSTextAttachmentContainer&quot;&gt;&lt;/a&gt;方法1 - NSTextAttachmentContainer&lt;/h3&gt;&lt;p&gt;NSTextAttachment实现了“&lt;strong&gt;NSTextAttachmentContainer&lt;/strong&gt;”这个Protocol，而这个Protocol里面有如下方法：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(CGRect)&lt;/span&gt;attachmentBoundsForTextContainer:&lt;span class=&quot;params&quot;&gt;(NSTextContainer *)&lt;/span&gt;textContainer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      proposedLineFragment:&lt;span class=&quot;params&quot;&gt;(CGRect)&lt;/span&gt;lineFrag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             glyphPosition:&lt;span class=&quot;params&quot;&gt;(CGPoint)&lt;/span&gt;position&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            characterIndex:&lt;span class=&quot;params&quot;&gt;(NSUInteger)&lt;/span&gt;charIndex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看看其解释：&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Returns &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; layout bounds &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt; attachment &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; layout manager. (required)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是说，在绘制NSTextAttachment的内容的时候，内容的“Bounds”是通过这个方法获得的。所以，可以重写这个方法，来达到我们的目的。&lt;/p&gt;
&lt;h3 id=&quot;方法2-直接修改bounds&quot;&gt;&lt;a href=&quot;#方法2-直接修改bounds&quot; class=&quot;headerlink&quot; title=&quot;方法2 - 直接修改bounds&quot;&gt;&lt;/a&gt;方法2 - 直接修改bounds&lt;/h3&gt;&lt;p&gt;NSTextAttachment还有一个属性&lt;code&gt;@property(nonatomic) CGRect bounds&lt;/code&gt;，其解释如下：&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Defines &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; layout bounds &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; receiver&#39;s graphical representation &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt; coordinate system.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以，修改这个也可以达到目的。&lt;/p&gt;
&lt;h2 id=&quot;实现方法1-继续扩展NSTextAttachment类&quot;&gt;&lt;a href=&quot;#实现方法1-继续扩展NSTextAttachment类&quot; class=&quot;headerlink&quot; title=&quot;实现方法1 - 继续扩展NSTextAttachment类&quot;&gt;&lt;/a&gt;实现方法1 - 继续扩展NSTextAttachment类&lt;/h2&gt;&lt;h3 id=&quot;保存自定义Size&quot;&gt;&lt;a href=&quot;#保存自定义Size&quot; class=&quot;headerlink&quot; title=&quot;保存自定义Size&quot;&gt;&lt;/a&gt;保存自定义Size&lt;/h3&gt;&lt;p&gt;根据之前的定义，我们在自定义的类“EmojiTextAttachment”中再加一个保存大小的属性，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//EmojiTextAttachment类定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;EmojiTextAttachment &lt;/span&gt;: NSTextAttachment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//表情的字符串表示，见前文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(strong, nonatomic) NSString *emojiTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新增：保存当前表情图片的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(assign, nonatomic) CGSize emojiSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了“&lt;strong&gt;emojiSize&lt;/strong&gt;”这个属性，我们就可以在自由的指定每个NSTextAttachment的大小。&lt;/p&gt;
&lt;h3 id=&quot;重写&quot;&gt;&lt;a href=&quot;#重写&quot; class=&quot;headerlink&quot; title=&quot;重写&quot;&gt;&lt;/a&gt;重写&lt;/h3&gt;&lt;p&gt;接下来就是重写方法，不多说，见代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//EmojiTextAttachment实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EmojiTextAttachment&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//重点！重写NSTextAttachmentContainer Protocol的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)attachmentBoundsForTextContainer:(&lt;span class=&quot;built_in&quot;&gt;NSTextContainer&lt;/span&gt; *)textContainer proposedLineFragment:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)lineFrag glyphPosition:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;)position characterIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)charIndex &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 返回我们指定的size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, _emojiSize.width, _emojiSize.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现方法2&quot;&gt;&lt;a href=&quot;#实现方法2&quot; class=&quot;headerlink&quot; title=&quot;实现方法2&quot;&gt;&lt;/a&gt;实现方法2&lt;/h2&gt;&lt;p&gt;直接在创建表情NSTextAttachment的时候设置&lt;code&gt;bounds&lt;/code&gt;属性即可。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;增加了emojiSize属性后，我们就可以在创建表情，甚至创建后，自由的调整每个NSTextAttachment的大小。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;一共只增加了十几行代码，但是效果还是不错哒~&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSTextAttachment_Class_TextKit/index.html#//apple_ref/occ/instp/NSTextAttachment/fileType&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSTextAttachment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSTextAttachmentContainer_Protocol/index.html#//apple_ref/occ/intfm/NSTextAttachmentContainer/attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSTextAttachmentContainer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2015-11-27：增加了利用NSTextAttachment的bounds属性修改大小的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文是基于&lt;a href=&quot;http://tutuge.me/2015/03/07/UITextView编辑时插入自定义表情-简单的图文混编/&quot;&gt;UITextView编辑时插入自定义表情-简单的图文混编&lt;/a&gt;写的，主要实现了在UITextView插入表情图片时，自定义表情大小的功能。&lt;/p&gt;
&lt;h4 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h4&gt;&lt;p&gt;本文代码工程地址：&lt;a href=&quot;https://github.com/zekunyan/UITextViewDIYEmojiExample&quot;&gt;https://github.com/zekunyan/UITextViewDIYEmojiExample&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Gif示例图&quot;&gt;&lt;a href=&quot;#Gif示例图&quot; class=&quot;headerlink&quot; title=&quot;Gif示例图&quot;&gt;&lt;/a&gt;Gif示例图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_resizable_nstextattachment_1.gif&quot; alt=&quot;Gif示例图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>RPC框架Thrift例子-PHP调用C++后端程序</title>
    <link href="http://tutuge.me/2015/04/19/thrift-example-cpp-and-php/"/>
    <id>http://tutuge.me/2015/04/19/thrift-example-cpp-and-php/</id>
    <published>2015-04-19T09:04:56.000Z</published>
    <updated>2016-03-20T09:03:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2016-02-22: Response对象不用主动创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间用了一下Facebook的开源RPC框架Thrift，做PHP客户端调用C++后端程序，真心觉得Thrift不错！&lt;/p&gt;
&lt;p&gt;本文项目地址：&lt;a href=&quot;https://github.com/zekunyan/ThriftDemo_PHP_CPP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/ThriftDemo_PHP_CPP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先看看本文的例子示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_thrift_example_cpp_and_php_1.jpg&quot; alt=&quot;通信示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PHP客户端发起请求，请求参数是“Request”类型，里面有studentID参数。&lt;/li&gt;
&lt;li&gt;CPP服务端收到请求返回数据，返回类型为“Response”，里面包含了student的信息，此处只是简单的示例。&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;h3 id=&quot;什么是RPC&quot;&gt;&lt;a href=&quot;#什么是RPC&quot; class=&quot;headerlink&quot; title=&quot;什么是RPC&quot;&gt;&lt;/a&gt;什么是RPC&lt;/h3&gt;&lt;p&gt;远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。 – 维基百科 - &lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;远程过程调用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通俗点讲，就是跨计算机、跨网络调用。&lt;/p&gt;
&lt;h3 id=&quot;什么是Thrift&quot;&gt;&lt;a href=&quot;#什么是Thrift&quot; class=&quot;headerlink&quot; title=&quot;什么是Thrift&quot;&gt;&lt;/a&gt;什么是Thrift&lt;/h3&gt;&lt;p&gt;Apache Thrift 是Facebook实现的一种高效的、支持多种编程语言的远程服务调用(RPC)的框架。它采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势。 – &lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Thrift - 可伸缩的跨语言服务开发框架&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开发流程&quot;&gt;&lt;a href=&quot;#开发流程&quot; class=&quot;headerlink&quot; title=&quot;开发流程&quot;&gt;&lt;/a&gt;开发流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;配置环境。C++的如CMake、make、g++；PHP的如php、php-fpm、Apache（Nginx）。&lt;/li&gt;
&lt;li&gt;根据需求，编写thrift接口定义文件（IDL定义文件）。&lt;/li&gt;
&lt;li&gt;使用thrift程序，为不同的语言生成代码。&lt;/li&gt;
&lt;li&gt;根据需求，修改生成的代码（主要是Server端），编写实际的业务逻辑。&lt;/li&gt;
&lt;li&gt;编译、部署。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Thrift的接口定义文件&quot;&gt;&lt;a href=&quot;#Thrift的接口定义文件&quot; class=&quot;headerlink&quot; title=&quot;Thrift的接口定义文件&quot;&gt;&lt;/a&gt;Thrift的接口定义文件&lt;/h2&gt;&lt;p&gt;在利用Thrift开发的过程中，重点就是编写接口定义文件。&lt;br&gt;一般来说，接口定义文件决定了RPC过程中的通信数据结构、通信接口定义等。&lt;/p&gt;
&lt;p&gt;总的来说，thrift的接口定义语法类似于C语言，包含了struct、enum、map、list等基础数据结构，同时支持大部分基本数据类型，如32位整型“i32”等。&lt;/p&gt;
&lt;p&gt;详细的接口定义请参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://thrift.apache.org/docs/idl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thrift interface description language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example.thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看看本例子中的定义文件“TTG.thrift”：&lt;/p&gt;
&lt;figure class=&quot;highlight thrift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; cpp TTG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; php TTG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ResponseState&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StateOk = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StateError = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StateEmpty = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Request&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;i32&lt;/span&gt; studentID = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Response&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;i32&lt;/span&gt; studentID = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: list&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; infos,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: ResponseState state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TTGService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Response getStudentInfo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: Request request);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;先定义命名空间，尽量减少命名冲突。&lt;/li&gt;
&lt;li&gt;Request类型：PHP客户端请求的数据类型。&lt;/li&gt;
&lt;li&gt;Response类型：CPP服务端返回的数据类型。&lt;/li&gt;
&lt;li&gt;ResponseState枚举：定义返回的状态。&lt;/li&gt;
&lt;li&gt;TTGService：服务接口定义。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;生成对应语言的代码！&quot;&gt;&lt;a href=&quot;#生成对应语言的代码！&quot; class=&quot;headerlink&quot; title=&quot;生成对应语言的代码！&quot;&gt;&lt;/a&gt;生成对应语言的代码！&lt;/h2&gt;&lt;p&gt;是的，生成代码！这是我觉得Thrift框架最“神奇”的地方。我们只需要执行几条命令，就可以根据接口定义文件“生成”对应语言的代码。然后我们只需要将对应的业务逻辑加入到生成的代码中即可。&lt;/p&gt;
&lt;p&gt;如生成CPP服务端的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;thrift &lt;span class=&quot;comment&quot;&gt;--gen cpp TTG.thrift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就会生成如下代码。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TTGService&lt;span class=&quot;selector-class&quot;&gt;.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTGService&lt;span class=&quot;selector-class&quot;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTGService_server&lt;span class=&quot;selector-class&quot;&gt;.skeleton&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTG_constants&lt;span class=&quot;selector-class&quot;&gt;.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTG_constants&lt;span class=&quot;selector-class&quot;&gt;.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTG_types&lt;span class=&quot;selector-class&quot;&gt;.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTG_types.h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;根据需要修改生成的代码&quot;&gt;&lt;a href=&quot;#根据需要修改生成的代码&quot; class=&quot;headerlink&quot; title=&quot;根据需要修改生成的代码&quot;&gt;&lt;/a&gt;根据需要修改生成的代码&lt;/h2&gt;&lt;p&gt;生成CPP、PHP端的代码以后，我们就可以根据需要修改、添加业务代码。&lt;/p&gt;
&lt;h3 id=&quot;CPP服务端&quot;&gt;&lt;a href=&quot;#CPP服务端&quot; class=&quot;headerlink&quot; title=&quot;CPP服务端&quot;&gt;&lt;/a&gt;CPP服务端&lt;/h3&gt;&lt;p&gt;在生成CPP的代码时，会生成一个“TTGService_server.skeleton.cpp”文件，这个就是我们的CPP服务端的代码“架子”。其中重点如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实现调用的接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; TTGServiceHandler : &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TTGServiceIf &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTGServiceHandler() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Your initialization goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//接口实现部分，实现getStudentInfo这个接口的具体细节，如根据request创建、返回对应的response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getStudentInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Response&amp;amp; _return, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Request&amp;amp; request)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Your implementation goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;getStudentInfo\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将其改成：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getStudentInfo(Response &amp;amp;_&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Request &amp;amp;request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 输出请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Request: &quot;&lt;/span&gt;&amp;lt;&amp;lt;request.studentID&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//填充数据，Response对象不用主动创建，进入函数时已经创建好了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;.studentID = request.studentID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;.infos.push_back(&lt;span class=&quot;string&quot;&gt;&quot;Info 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;.infos.push_back(&lt;span class=&quot;string&quot;&gt;&quot;Info 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;.state = ResponseState::StateOk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此，CPP服务端的编写就完成了，接下来我们只需要编译、链接，执行最终生成的可执行文件即可。&lt;/p&gt;
&lt;h3 id=&quot;PHP客户端&quot;&gt;&lt;a href=&quot;#PHP客户端&quot; class=&quot;headerlink&quot; title=&quot;PHP客户端&quot;&gt;&lt;/a&gt;PHP客户端&lt;/h3&gt;&lt;p&gt;PHP客户端的编写比较简单，直接参考代码吧：&lt;a href=&quot;https://github.com/zekunyan/ThriftDemo_PHP_CPP/blob/master/PHP/client.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/ThriftDemo_PHP_CPP/blob/master/PHP/client.php&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;编译、链接，运行&quot;&gt;&lt;a href=&quot;#编译、链接，运行&quot; class=&quot;headerlink&quot; title=&quot;编译、链接，运行&quot;&gt;&lt;/a&gt;编译、链接，运行&lt;/h2&gt;&lt;p&gt;用CMake，或者直接编写makefile均可，保证Thrift装好就行了。&lt;/p&gt;
&lt;p&gt;直接运行最后生成的可执行文件TTG.run即可。&lt;/p&gt;
&lt;p&gt;从浏览器，或者直接运行client.php，即可看到如下输出：&lt;/p&gt;
&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;object(TTG\Response)[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;studentID&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt; =&amp;gt; string &lt;span class=&quot;string&quot;&gt;&#39;tutuge&#39;&lt;/span&gt; (length=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;infos&#39;&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt; (size=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; =&amp;gt; string &lt;span class=&quot;string&quot;&gt;&#39;Info 1&#39;&lt;/span&gt; (length=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; =&amp;gt; string &lt;span class=&quot;string&quot;&gt;&#39;Info 2&#39;&lt;/span&gt; (length=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;state&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Thrift是个好东西！就是文档好少=。=&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://thrift.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thrift.apache.org/tutorial/php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thrift PHP Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thrift.apache.org/tutorial/cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thrift C++ Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Apache_Thrift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Thrift - 可伸缩的跨语言服务开发框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2016-02-22: Response对象不用主动创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间用了一下Facebook的开源RPC框架Thrift，做PHP客户端调用C++后端程序，真心觉得Thrift不错！&lt;/p&gt;
&lt;p&gt;本文项目地址：&lt;a href=&quot;https://github.com/zekunyan/ThriftDemo_PHP_CPP&quot;&gt;https://github.com/zekunyan/ThriftDemo_PHP_CPP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先看看本文的例子示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_thrift_example_cpp_and_php_1.jpg&quot; alt=&quot;通信示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PHP客户端发起请求，请求参数是“Request”类型，里面有studentID参数。&lt;/li&gt;
&lt;li&gt;CPP服务端收到请求返回数据，返回类型为“Response”，里面包含了student的信息，此处只是简单的示例。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="服务端" scheme="http://tutuge.me/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="C++" scheme="http://tutuge.me/tags/C/"/>
    
      <category term="PHP" scheme="http://tutuge.me/tags/PHP/"/>
    
      <category term="后端" scheme="http://tutuge.me/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>GCD使用经验与技巧浅谈</title>
    <link href="http://tutuge.me/2015/04/03/something-about-gcd/"/>
    <id>http://tutuge.me/2015/04/03/something-about-gcd/</id>
    <published>2015-04-03T13:59:56.000Z</published>
    <updated>2016-03-20T09:03:49.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GCD(Grand Central Dispatch)可以说是Mac、iOS开发中的一大“利器”，本文就总结一些有关使用GCD的经验与技巧。&lt;/p&gt;
&lt;h2 id=&quot;dispatch-once-t必须是全局或static变量&quot;&gt;&lt;a href=&quot;#dispatch-once-t必须是全局或static变量&quot; class=&quot;headerlink&quot; title=&quot;dispatch_once_t必须是全局或static变量&quot;&gt;&lt;/a&gt;dispatch_once_t必须是全局或static变量&lt;/h2&gt;&lt;p&gt;这一条算是“老生常谈”了，但我认为还是有必要强调一次，毕竟非全局或非static的dispatch_once_t变量在使用时会导致非常不好排查的bug，正确的如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//静态变量，保证只有一份实例，才能确保只执行一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//单例代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实就是保证&lt;strong&gt;dispatch_once_t&lt;/strong&gt;只有一份实例。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;dispatch-queue-create的第二个参数&quot;&gt;&lt;a href=&quot;#dispatch-queue-create的第二个参数&quot; class=&quot;headerlink&quot; title=&quot;dispatch_queue_create的第二个参数&quot;&gt;&lt;/a&gt;dispatch_queue_create的第二个参数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;dispatch_queue_create&lt;/strong&gt;，创建队列用的，它的参数只有两个，原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dispatch_queue_create ( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *label, &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_attr_t&lt;/span&gt; attr );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在网上的大部分教程里（甚至Apple自己的文档里），都是这么创建串行队列的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.example.MyQueue&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，第二个参数传的是“&lt;strong&gt;NULL&lt;/strong&gt;”。  但是dispatch_queue_attr_t类型是有已经定义好的常量的，所以我认为，为了更加的清晰、严谨，最好如下创建队列：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//串行队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.example.MyQueue&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//并行队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.example.MyQueue&quot;&lt;/span&gt;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常量就是为了使代码更加“易懂”，更加清晰，既然有，为啥不用呢~&lt;/p&gt;
&lt;h2 id=&quot;dispatch-after是延迟提交，不是延迟运行&quot;&gt;&lt;a href=&quot;#dispatch-after是延迟提交，不是延迟运行&quot; class=&quot;headerlink&quot; title=&quot;dispatch_after是延迟提交，不是延迟运行&quot;&gt;&lt;/a&gt;dispatch_after是&lt;strong&gt;延迟提交&lt;/strong&gt;，不是&lt;strong&gt;延迟运行&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;先看看官方文档的说明：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Enqueue &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; block &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; execution &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; specified &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Enqueue&lt;/strong&gt;，就是入队，指的就是将一个Block在特定的延时以后，加入到指定的队列中，&lt;strong&gt;不是在特定的时间后立即运行！&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;看看如下代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建串行队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;me.tutuge.test.gcd&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//立即打印一条信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Begin add block...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//提交一个block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Sleep 10秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;First block done...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//5 秒以后提交block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; * NSEC_PER_SEC)), queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;After...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-31&lt;/span&gt; 20&lt;span class=&quot;selector-pseudo&quot;&gt;:57&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:27.122&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[45633:1812016]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;block&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-31&lt;/span&gt; 20&lt;span class=&quot;selector-pseudo&quot;&gt;:57&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:37.127&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[45633:1812041]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;done&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-31&lt;/span&gt; 20&lt;span class=&quot;selector-pseudo&quot;&gt;:57&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:37.127&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[45633:1812041]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;After&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从结果也验证了，dispatch_after只是延时提交block，并不是延时后立即执行。所以想用dispatch_after精确控制运行状态的朋友可要注意了~&lt;/p&gt;
&lt;h2 id=&quot;正确创建dispatch-time-t&quot;&gt;&lt;a href=&quot;#正确创建dispatch-time-t&quot; class=&quot;headerlink&quot; title=&quot;正确创建dispatch_time_t&quot;&gt;&lt;/a&gt;正确创建dispatch_time_t&lt;/h2&gt;&lt;p&gt;用dispatch_after的时候就会用到dispatch_time_t变量，但是如何创建合适的时间呢？答案就是用&lt;strong&gt;dispatch_time&lt;/strong&gt;函数，其原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_time_t &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_time &lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;dispatch_time_t &lt;/span&gt;when, int64_t delta )&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数一般是&lt;strong&gt;DISPATCH_TIME_NOW&lt;/strong&gt;，表示从现在开始。&lt;br&gt;那么第二个参数就是真正的延时的具体时间。&lt;/p&gt;
&lt;p&gt;这里要特别注意的是，&lt;strong&gt;delta&lt;/strong&gt;参数是“&lt;strong&gt;纳秒！&lt;/strong&gt;”，就是说，延时1秒的话，delta应该是“1000000000”=。=，太长了，所以理所当然系统提供了常量，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSEC_PER_SEC 1000000000ull&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; USEC_PER_SEC 1000000ull&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSEC_PER_USEC 1000ull&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关键词解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSEC：纳秒。&lt;/li&gt;
&lt;li&gt;USEC：微妙。&lt;/li&gt;
&lt;li&gt;SEC：秒&lt;/li&gt;
&lt;li&gt;PER：每&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NSEC_PER_SEC，每秒有多少纳秒。&lt;/li&gt;
&lt;li&gt;USEC_PER_SEC，每秒有多少毫秒。（注意是指在纳秒的基础上）&lt;/li&gt;
&lt;li&gt;NSEC_PER_USEC，每毫秒有多少纳秒。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，延时&lt;strong&gt;1秒&lt;/strong&gt;可以写成如下几种：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_time(DISPATCH_TIME_NOW, &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * NSEC_PER_SEC)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_time(DISPATCH_TIME_NOW, &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * USEC_PER_SEC)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_time(DISPATCH_TIME_NOW, &lt;/span&gt;USEC_PER_SEC * NSEC_PER_USEC)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一个“&lt;strong&gt;USEC_PER_SEC * NSEC_PER_USEC&lt;/strong&gt;”，翻译过来就是“&lt;strong&gt;每秒的毫秒数乘以每毫秒的纳秒数&lt;/strong&gt;”，也就是“&lt;strong&gt;每秒的纳秒数&lt;/strong&gt;”，所以，延时500毫秒之类的，也就不难了吧~&lt;/p&gt;
&lt;h2 id=&quot;dispatch-suspend-立即停止队列的运行&quot;&gt;&lt;a href=&quot;#dispatch-suspend-立即停止队列的运行&quot; class=&quot;headerlink&quot; title=&quot;dispatch_suspend != 立即停止队列的运行&quot;&gt;&lt;/a&gt;dispatch_suspend != 立即停止队列的运行&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;dispatch_suspend&lt;/strong&gt;，&lt;strong&gt;dispatch_resume&lt;/strong&gt;提供了“挂起、恢复”队列的功能，简单来说，就是可以暂停、恢复队列上的任务。但是这里的“&lt;strong&gt;挂起&lt;/strong&gt;”，并不能保证可以&lt;strong&gt;立即&lt;/strong&gt;停止队列上正在运行的block，看如下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;me.tutuge.test.gcd&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//提交第一个block，延时5秒打印。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;After 5 seconds...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//提交第二个block，也是延时5秒打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [NSThread sleepForTimeInterval:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;After 5 seconds again...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//延时一秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;sleep 1 second...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSThread sleepForTimeInterval:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//挂起队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;suspend...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_suspend(queue)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//延时10秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;sleep 10 second...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSThread sleepForTimeInterval:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//恢复队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;resume...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_resume(queue)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:32&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:09.903&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47201:1883834]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;sleep&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;second&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:32&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:10.910&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47201:1883834]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;suspend&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:32&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:10.910&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47201:1883834]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;sleep&lt;/span&gt; 10 &lt;span class=&quot;selector-tag&quot;&gt;second&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:32&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:14.908&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47201:1883856]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;After&lt;/span&gt; 5 &lt;span class=&quot;selector-tag&quot;&gt;seconds&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:32&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:20.911&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47201:1883834]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;resume&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:32&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:25.912&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47201:1883856]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;After&lt;/span&gt; 5 &lt;span class=&quot;selector-tag&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;again&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可知，在dispatch_suspend挂起队列后，第一个block&lt;strong&gt;还是在运行&lt;/strong&gt;，并且正常输出。&lt;br&gt;结合文档，我们可以得知，dispatch_suspend并不会立即暂停正在运行的block，而是在当前block执行完成后，暂停后续的block执行。&lt;/p&gt;
&lt;p&gt;所以下次想暂停正在队列上运行的block时，还是不要用dispatch_suspend了吧~&lt;/p&gt;
&lt;h2 id=&quot;“同步”的dispatch-apply&quot;&gt;&lt;a href=&quot;#“同步”的dispatch-apply&quot; class=&quot;headerlink&quot; title=&quot;“同步”的dispatch_apply&quot;&gt;&lt;/a&gt;“同步”的dispatch_apply&lt;/h2&gt;&lt;p&gt;dispatch_apply的作用是在一个队列（串行或并行）上“运行”多次block，其实就是简化了用循环去向队列依次添加block任务。但是我个人觉得这个函数就是个“坑”，先看看如下代码运行结果：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建异步串行队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;me.tutuge.test.gcd&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//运行block3次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_apply(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, ^(&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;apply loop: %zu&quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打印信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;After apply&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行的结果是：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:55&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:40.854&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47402:1893289]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;loop&lt;/span&gt;: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:55&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:40.856&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47402:1893289]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;loop&lt;/span&gt;: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:55&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:40.856&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47402:1893289]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;loop&lt;/span&gt;: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-04-01&lt;/span&gt; 00&lt;span class=&quot;selector-pseudo&quot;&gt;:55&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:40.856&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[47402:1893289]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;apply&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，明明是提交到异步的队列去运行，但是“After apply”居然在apply后打印，也就是说，dispatch_apply将外面的线程（main线程）&lt;strong&gt;“阻塞”&lt;/strong&gt;了！&lt;/p&gt;
&lt;p&gt;查看官方文档，dispatch_apply确实会“等待”其所有的循环运行完毕才往下执行=。=，看来要小心使用了。&lt;/p&gt;
&lt;h2 id=&quot;避免死锁！&quot;&gt;&lt;a href=&quot;#避免死锁！&quot; class=&quot;headerlink&quot; title=&quot;避免死锁！&quot;&gt;&lt;/a&gt;避免死锁！&lt;/h2&gt;&lt;h4 id=&quot;dispatch-sync导致的死锁&quot;&gt;&lt;a href=&quot;#dispatch-sync导致的死锁&quot; class=&quot;headerlink&quot; title=&quot;dispatch_sync导致的死锁&quot;&gt;&lt;/a&gt;dispatch_sync导致的死锁&lt;/h4&gt;&lt;p&gt;涉及到多线程的时候，不可避免的就会有“死锁”这个问题，在使用GCD时，往往一不小心，就可能造成死锁，看看下面的“&lt;strong&gt;死锁&lt;/strong&gt;”例子：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在main线程使用“同步”方法提交Block，必定会死锁。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_sync(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;I am block...&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能会说，这么低级的错误，我怎么会犯，那么，看看下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)update&lt;span class=&quot;built_in&quot;&gt;UI1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Update ui 1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//死锁！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; update&lt;span class=&quot;built_in&quot;&gt;UI2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)update&lt;span class=&quot;built_in&quot;&gt;UI2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Update ui 2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在你不注意的时候，嵌套调用可能就会造成死锁！所以为了“世界和平”=。=，我们还是少用&lt;strong&gt;dispatch_sync&lt;/strong&gt;吧。&lt;/p&gt;
&lt;h4 id=&quot;dispatch-apply导致的死锁！&quot;&gt;&lt;a href=&quot;#dispatch-apply导致的死锁！&quot; class=&quot;headerlink&quot; title=&quot;dispatch_apply导致的死锁！&quot;&gt;&lt;/a&gt;dispatch_apply导致的死锁！&lt;/h4&gt;&lt;p&gt;啥，dispatch_apply导致的死锁？。。。是的，前一节讲到，dispatch_apply会&lt;strong&gt;等&lt;/strong&gt;循环执行完成，这不就差不多是&lt;strong&gt;阻塞&lt;/strong&gt;了吗。看如下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_t queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;me.tutuge.test.gcd&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_apply(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, queue, ^(&lt;span class=&quot;name&quot;&gt;size_t&lt;/span&gt; i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;apply loop: %zu&quot;&lt;/span&gt;, i)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //再来一个dispatch_apply！死锁！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_apply(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, queue, ^(&lt;span class=&quot;name&quot;&gt;size_t&lt;/span&gt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;apply loop inside %zu&quot;&lt;/span&gt;, j)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这端代码只会输出“apply loop: 1”。。。就没有然后了=。=&lt;/p&gt;
&lt;p&gt;所以，一定要避免dispatch_apply的&lt;strong&gt;嵌套调用&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;灵活使用dispatch-group&quot;&gt;&lt;a href=&quot;#灵活使用dispatch-group&quot; class=&quot;headerlink&quot; title=&quot;灵活使用dispatch_group&quot;&gt;&lt;/a&gt;灵活使用dispatch_group&lt;/h2&gt;&lt;p&gt;很多时候我们需要等待一系列任务（block）执行完成，然后再做一些收尾的工作。如果是有序的任务，可以分步骤完成的，直接使用串行队列就行。但是如果是一系列&lt;strong&gt;并行&lt;/strong&gt;执行的任务呢？这个时候，就需要dispatch_group帮忙了~总的来说，dispatch_group的使用分如下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建dispatch_group_t&lt;/li&gt;
&lt;li&gt;添加任务（block）&lt;/li&gt;
&lt;li&gt;添加结束任务（如清理操作、通知UI等）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面着重讲讲在后面两步。&lt;/p&gt;
&lt;h4 id=&quot;添加任务&quot;&gt;&lt;a href=&quot;#添加任务&quot; class=&quot;headerlink&quot; title=&quot;添加任务&quot;&gt;&lt;/a&gt;添加任务&lt;/h4&gt;&lt;p&gt;添加任务可以分为以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己创建队列：使用&lt;strong&gt;dispatch_group_async&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;无法直接使用队列变量（如使用AFNetworking添加异步任务）：使用&lt;strong&gt;dispatch_group_enter&lt;/strong&gt;，&lt;strong&gt;dispatch_group_leave&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自己创建队列时，当然就用dispatch_group_async函数，简单有效，简单例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//省去创建group、queue代码。。。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_async(&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Do you work...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你无法直接使用队列变量时，就无法使用dispatch_group_async了，下面以使用AFNetworking时的情况：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; *manager = [&lt;span class=&quot;type&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; manager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;span class=&quot;type&quot;&gt;Enter&lt;/span&gt; group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_enter(group);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[manager &lt;span class=&quot;type&quot;&gt;GET&lt;/span&gt;:@&lt;span class=&quot;string&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt; parameters:&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt; success:^(&lt;span class=&quot;type&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; *operation, id responseObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //&lt;span class=&quot;type&quot;&gt;Deal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //&lt;span class=&quot;type&quot;&gt;Leave&lt;/span&gt; group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_leave(group);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;    failure:^(&lt;span class=&quot;type&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; *operation, &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //&lt;span class=&quot;type&quot;&gt;Deal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; error...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //&lt;span class=&quot;type&quot;&gt;Leave&lt;/span&gt; group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_leave(group);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;span class=&quot;type&quot;&gt;More&lt;/span&gt; request...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;strong&gt;dispatch_group_enter&lt;/strong&gt;，&lt;strong&gt;dispatch_group_leave&lt;/strong&gt;就可以方便的将一系列网络请求“&lt;strong&gt;打包&lt;/strong&gt;”起来~&lt;/p&gt;
&lt;h4 id=&quot;添加结束任务&quot;&gt;&lt;a href=&quot;#添加结束任务&quot; class=&quot;headerlink&quot; title=&quot;添加结束任务&quot;&gt;&lt;/a&gt;添加结束任务&lt;/h4&gt;&lt;p&gt;添加结束任务也可以分为两种情况，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在当前线程&lt;strong&gt;阻塞的同步等待&lt;/strong&gt;：dispatch_group_wait。&lt;/li&gt;
&lt;li&gt;添加一个异步执行的任务作为结束任务：dispatch_group_notify&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个比较简单，就不再贴代码了=。=&lt;/p&gt;
&lt;h2 id=&quot;使用dispatch-barrier-async-dispatch-barrier-sync的注意事项&quot;&gt;&lt;a href=&quot;#使用dispatch-barrier-async-dispatch-barrier-sync的注意事项&quot; class=&quot;headerlink&quot; title=&quot;使用dispatch_barrier_async,dispatch_barrier_sync的注意事项&quot;&gt;&lt;/a&gt;使用dispatch_barrier_async,dispatch_barrier_sync的注意事项&lt;/h2&gt;&lt;p&gt;dispatch_barrier_async的作用就是向某个队列插入一个block，当目前正在执行的block运行完成后，阻塞这个block后面添加的block，只运行这个block直到完成，然后再继续后续的任务，有点“唯我独尊”的感觉=。=&lt;/p&gt;
&lt;p&gt;值得注意的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dispatch&lt;em&gt;barrier\&lt;/em&gt;(a)sync只在自己创建的并发队列上有效，在全局(Global)并发队列、串行队列上，效果跟&lt;strong&gt;dispatch_(a)sync&lt;/strong&gt;效果一样。&lt;/li&gt;
&lt;li&gt;既然在串行队列上跟&lt;strong&gt;dispatch_(a)sync&lt;/strong&gt;效果一样，那就要小心别死锁！&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;dispatch-set-context与dispatch-set-finalizer-f的配合使用&quot;&gt;&lt;a href=&quot;#dispatch-set-context与dispatch-set-finalizer-f的配合使用&quot; class=&quot;headerlink&quot; title=&quot;dispatch_set_context与dispatch_set_finalizer_f的配合使用&quot;&gt;&lt;/a&gt;dispatch_set_context与dispatch_set_finalizer_f的配合使用&lt;/h2&gt;&lt;p&gt;dispatch_set_context可以为队列添加&lt;strong&gt;上下文数据&lt;/strong&gt;，但是因为GCD是C语言接口形式的，所以其context参数类型是“&lt;strong&gt;void *&lt;/strong&gt;”。也就是说，我们创建context时有如下几种选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用C语言的malloc创建context数据。&lt;/li&gt;
&lt;li&gt;用C++的new创建类对象。&lt;/li&gt;
&lt;li&gt;用Objective-C的对象，但是要用__bridge等关键字转为Core Foundation对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上所有创建context的方法都有一个必须的要求，就是都要&lt;strong&gt;释放内存！&lt;/strong&gt;，无论是用&lt;strong&gt;free、delete还是CF的CFRelease&lt;/strong&gt;，我们都要确保在队列不用的时候，释放context的内存，否则就会造成内存泄露。&lt;/p&gt;
&lt;p&gt;所以，使用dispatch_set_context的时候，最好结合dispatch_set_finalizer_f使用，为队列设置“析构函数”，在这个函数里面释放内存，大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanStaff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放context的内存！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//CFRelease(context);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//free(context);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//delete context;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在队列创建后，设置其“析构函数”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_set_finalizer_f(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, cleanStaff);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详细用法，请看我之前写的Blog&lt;a href=&quot;http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/&quot;&gt;为GCD队列绑定NSObject类型上下文数据-利用__bridge_retained(transfer)转移内存管理权&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;其实本文更像是总结了GCD中的“坑”=。=&lt;/p&gt;
&lt;p&gt;至于经验，总结一条，就是使用任何技术，都要研究透彻，否则后患无穷啊~&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grand Central Dispatch (GCD) Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://commandshift.co.uk/blog/2014/03/19/using-dispatch-groups-to-wait-for-multiple-web-services&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Dispatch Groups to Wait for Multiple Web Services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GCD(Grand Central Dispatch)可以说是Mac、iOS开发中的一大“利器”，本文就总结一些有关使用GCD的经验与技巧。&lt;/p&gt;
&lt;h2 id=&quot;dispatch-once-t必须是全局或static变量&quot;&gt;&lt;a href=&quot;#dispatch-once-t必须是全局或static变量&quot; class=&quot;headerlink&quot; title=&quot;dispatch_once_t必须是全局或static变量&quot;&gt;&lt;/a&gt;dispatch_once_t必须是全局或static变量&lt;/h2&gt;&lt;p&gt;这一条算是“老生常谈”了，但我认为还是有必要强调一次，毕竟非全局或非static的dispatch_once_t变量在使用时会导致非常不好排查的bug，正确的如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//静态变量，保证只有一份实例，才能确保只执行一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//单例代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实就是保证&lt;strong&gt;dispatch_once_t&lt;/strong&gt;只有一份实例。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>为GCD队列绑定NSObject类型上下文数据-利用__bridge_retained(transfer)转移内存管理权</title>
    <link href="http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/"/>
    <id>http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/</id>
    <published>2015-03-29T11:27:40.000Z</published>
    <updated>2016-03-20T09:02:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;2015-5-28更新&quot;&gt;&lt;a href=&quot;#2015-5-28更新&quot; class=&quot;headerlink&quot; title=&quot;2015-5-28更新&quot;&gt;&lt;/a&gt;2015-5-28更新&lt;/h2&gt;&lt;p&gt;下面评论的好友“@Jim”给了种新的思路，就是在清除context的函数里面，用“&lt;strong&gt;_bridge_transfer&lt;/strong&gt;”转换context，把context的内存管理权限重新交给ARC，这样，就不用显式调用“&lt;strong&gt;CFRelease&lt;/strong&gt;”了。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; cleanStaff(&lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; *context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里用_bridge_transfer转换，将内存管理权限交还给ARC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;data&lt;/span&gt; = (_bridge_transfer &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; *)(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;In clean, context number: %d&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;data&lt;/span&gt;.number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//不用显式释放context的内存！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看过GCD（Grand Central Dispatch）的Apple&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;的朋友一定见过“&lt;strong&gt;dispatch_set_context&lt;/strong&gt;”和“&lt;strong&gt;dispatch_get_context&lt;/strong&gt;”这两个函数，那么这两个函数该怎么用呢？&lt;/p&gt;
&lt;p&gt;我们都知道，GCD的接口参数都是“C语言类型“的，那么，我们如何将NSObject类型（Foundation框架）的数据，传入GCD的接口呢？（即：Core Foundation和Foundation对象的转换）&lt;/p&gt;
&lt;h2 id=&quot;本文关键字&quot;&gt;&lt;a href=&quot;#本文关键字&quot; class=&quot;headerlink&quot; title=&quot;本文关键字&quot;&gt;&lt;/a&gt;本文关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GCD：dispatch_set_context，dispatch_get_context&lt;/li&gt;
&lt;li&gt;__bridge，__bridge_retained，__bridge_transfer&lt;/li&gt;
&lt;li&gt;Core Foundation, NSObject&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;dispatch-set-get-context&quot;&gt;&lt;a href=&quot;#dispatch-set-get-context&quot; class=&quot;headerlink&quot; title=&quot;dispatch_set(get)_context&quot;&gt;&lt;/a&gt;dispatch_set(get)_context&lt;/h2&gt;&lt;p&gt;先看看这两个函数的原型：&lt;/p&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; dispatch&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;set&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;context (dispatch&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;t &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* dispatch&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;get&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;context (dispatch&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;t &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的object一般指的就是通过dispatch_queue_create创建的队列。&lt;/p&gt;
&lt;p&gt;所以，这两个函数分别完成了将context“绑定”到特定GCD队列和从GCD队列获取对应context的任务。&lt;/p&gt;
&lt;h3 id=&quot;什么是context&quot;&gt;&lt;a href=&quot;#什么是context&quot; class=&quot;headerlink&quot; title=&quot;什么是context&quot;&gt;&lt;/a&gt;什么是context&lt;/h3&gt;&lt;p&gt;在上述函数原型中，context是一个“&lt;strong&gt;void类型指针&lt;/strong&gt;”，学过C语言的朋友应该都知道，void型指针可以指向任意类型，就是说，context在这里可以是任意类型的指针。&lt;/p&gt;
&lt;p&gt;从这里可以得知，我们可以为队列“&lt;strong&gt;set&lt;/strong&gt;”任意类型的数据，并在合适的时候取出来用。&lt;/p&gt;
&lt;h2 id=&quot;用malloc创建context并绑定到队列上&quot;&gt;&lt;a href=&quot;#用malloc创建context并绑定到队列上&quot; class=&quot;headerlink&quot; title=&quot;用malloc创建context并绑定到队列上&quot;&gt;&lt;/a&gt;用malloc创建context并绑定到队列上&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple官方的例子&lt;/a&gt;，我们先用传统的&lt;strong&gt;malloc&lt;/strong&gt;创建context，看看如下简短例子：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义context，即一个结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _Data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; Data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义队列的finalizer函数，用于释放context内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanStaff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;In clean, context number: %d&quot;&lt;/span&gt;, ((Data *)context)-&amp;gt;number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放，如果是new出来的对象，就要用delete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)runTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;me.tutuge.test.gcd&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建Data类型context数据并初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Data *myData = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(Data));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myData-&amp;gt;number = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//绑定context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_set_context(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, myData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置finalizer函数，用于在队列执行完成后释放对应context内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_set_finalizer_f(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, cleanStaff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_async(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//获取队列的context数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Data *data = dispatch_get_context(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;1: context number: %d&quot;&lt;/span&gt;, data-&amp;gt;number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//修改context保存的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data-&amp;gt;number = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码运行后如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-29&lt;/span&gt; 20&lt;span class=&quot;selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:16.854&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[37787:1443423]&lt;/span&gt; 1: &lt;span class=&quot;selector-tag&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;number&lt;/span&gt;: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-29&lt;/span&gt; 20&lt;span class=&quot;selector-pseudo&quot;&gt;:28&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:16.855&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[37787:1443423]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;clean&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;number&lt;/span&gt;: 20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，通过为队列设置context，我们就能为队列绑定自定义的数据，然后在合适的时候取出来用。&lt;/p&gt;
&lt;h2 id=&quot;NSObject类型的context&quot;&gt;&lt;a href=&quot;#NSObject类型的context&quot; class=&quot;headerlink&quot; title=&quot;NSObject类型的context&quot;&gt;&lt;/a&gt;NSObject类型的context&lt;/h2&gt;&lt;p&gt;在Mac、iOS的开发过程中，我们大部分用的都是Foundation框架下的类，就是如NSString、NSDictionary这些NSObject类型的类。&lt;br&gt;但是上面的&lt;strong&gt;dispatch_set(get)_context&lt;/strong&gt;接受的context参数是C语言类型的，即Core Foundation类型的，我们如何转换呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于ARC不能管理Core Foundation Object的生命周期&lt;/strong&gt;，所以我们必须先转换context的“类型”，以便转换内存管理权。&lt;/p&gt;
&lt;h3 id=&quot;bridge&quot;&gt;&lt;a href=&quot;#bridge&quot; class=&quot;headerlink&quot; title=&quot;__bridge&quot;&gt;&lt;/a&gt;__bridge&lt;/h3&gt;&lt;p&gt;Apple已经为我们提供了用于转换的关键字，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__bridge: 只做了类型转换，不修改内存管理权；&lt;/li&gt;
&lt;li&gt;__bridge_retained（即CFBridgingRetain）转换类型，同时将内存管理权从ARC中移除，后面需要使用CFRelease来释放对象；&lt;/li&gt;
&lt;li&gt;__bridge_transfer（即CFBridgingRelease）将Core Foundation的对象转换为Objective-C的对象，同时将内存管理权交给ARC。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;重新定义context&quot;&gt;&lt;a href=&quot;#重新定义context&quot; class=&quot;headerlink&quot; title=&quot;重新定义context&quot;&gt;&lt;/a&gt;重新定义context&lt;/h3&gt;&lt;p&gt;为了方便下面的说明，我们先定义context类。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Data&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//继承dealloc方法，便于观察对象何时被释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Data dealloc...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，我们继承了&lt;strong&gt;dealloc&lt;/strong&gt;方法，这样就能知道Data类型对象什么时候被释放。&lt;/p&gt;
&lt;h3 id=&quot;需要注意的点&quot;&gt;&lt;a href=&quot;#需要注意的点&quot; class=&quot;headerlink&quot; title=&quot;需要注意的点&quot;&gt;&lt;/a&gt;需要注意的点&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;__bridge&lt;/strong&gt;的转换是没有转移内存管理权的，这点要特别注意。&lt;/p&gt;
&lt;p&gt;如果在传context对象时，用的是&lt;strong&gt;__bridge&lt;/strong&gt;转换，那么context对象的内存管理权还在ARC手里，一旦当前作用域执行完，context就会被释放，而如果队列的任务用了context对象，就会造成“&lt;strong&gt;EXC_BAD_ACCESS&lt;/strong&gt;”崩溃！&lt;/p&gt;
&lt;h3 id=&quot;正确的用法&quot;&gt;&lt;a href=&quot;#正确的用法&quot; class=&quot;headerlink&quot; title=&quot;正确的用法&quot;&gt;&lt;/a&gt;正确的用法&lt;/h3&gt;&lt;p&gt;重写上面的例子，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义队列的finalizer函数，用于释放context内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanStaff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里用__bridge转换，不改变内存管理权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Data *data = (__bridge Data *)(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;In clean, context number: %d&quot;&lt;/span&gt;, data.number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放context的内存！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRelease(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)testBody &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;me.tutuge.test.gcd&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建Data类型context数据并初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Data *myData = [Data &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myData.number = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//绑定context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里用__bridge_retained转换，将context的内存管理权从ARC移除，交由我们自己手动释放！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_set_context(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, (__bridge_retained &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(myData));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设置finalizer函数，用于在队列执行完成后释放对应context内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_set_finalizer_f(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, cleanStaff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_async(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//获取队列的context数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里用__bridge转换，不改变内存管理权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Data *data = (__bridge Data *)(dispatch_get_context(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;1: context number: %d&quot;&lt;/span&gt;, data.number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//修改context保存的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data.number = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; title=&quot;解释&quot;&gt;&lt;/a&gt;解释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在dispatch_set_context的时候用&lt;strong&gt;__bridge_retained&lt;/strong&gt;转换，将context的内存管理权从ARC移除，交给我们自己管理。&lt;/li&gt;
&lt;li&gt;在队列任务中，用dispatch_get_context获取context的时候，用&lt;strong&gt;__bridge&lt;/strong&gt;转换，维持context的内存管理权不变，防止出了作用域context被释放。&lt;/li&gt;
&lt;li&gt;最后用&lt;strong&gt;CFRelease&lt;/strong&gt;释放context内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;运行结果&quot;&gt;&lt;a href=&quot;#运行结果&quot; class=&quot;headerlink&quot; title=&quot;运行结果&quot;&gt;&lt;/a&gt;运行结果&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-29&lt;/span&gt; 21&lt;span class=&quot;selector-pseudo&quot;&gt;:12&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:41.631&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[38131:1465900]&lt;/span&gt; 1: &lt;span class=&quot;selector-tag&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;number&lt;/span&gt;: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-29&lt;/span&gt; 21&lt;span class=&quot;selector-pseudo&quot;&gt;:12&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:41.632&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[38131:1465900]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;clean&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;number&lt;/span&gt;: 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2015&lt;span class=&quot;selector-tag&quot;&gt;-03-29&lt;/span&gt; 21&lt;span class=&quot;selector-pseudo&quot;&gt;:12&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:41.632&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;GCDTest&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[38131:1465900]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;dealloc&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由结果可知，我们的context对象在最后显式调用&lt;strong&gt;CFRelease&lt;/strong&gt;才被释放。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;总的来说，就是合理运用__bridge_retained(transfer)关键字转换对象的内存管理权，让我们自己控制对象的生命周期。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grand Central Dispatch (GCD) Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toll-Free Bridged Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/diyagoanyhacker/article/details/7573801&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Foundation 框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2015-5-28更新&quot;&gt;&lt;a href=&quot;#2015-5-28更新&quot; class=&quot;headerlink&quot; title=&quot;2015-5-28更新&quot;&gt;&lt;/a&gt;2015-5-28更新&lt;/h2&gt;&lt;p&gt;下面评论的好友“@Jim”给了种新的思路，就是在清除context的函数里面，用“&lt;strong&gt;_bridge_transfer&lt;/strong&gt;”转换context，把context的内存管理权限重新交给ARC，这样，就不用显式调用“&lt;strong&gt;CFRelease&lt;/strong&gt;”了。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; cleanStaff(&lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; *context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里用_bridge_transfer转换，将内存管理权限交还给ARC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;data&lt;/span&gt; = (_bridge_transfer &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; *)(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;In clean, context number: %d&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;data&lt;/span&gt;.number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//不用显式释放context的内存！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看过GCD（Grand Central Dispatch）的Apple&lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html&quot;&gt;官方文档&lt;/a&gt;的朋友一定见过“&lt;strong&gt;dispatch_set_context&lt;/strong&gt;”和“&lt;strong&gt;dispatch_get_context&lt;/strong&gt;”这两个函数，那么这两个函数该怎么用呢？&lt;/p&gt;
&lt;p&gt;我们都知道，GCD的接口参数都是“C语言类型“的，那么，我们如何将NSObject类型（Foundation框架）的数据，传入GCD的接口呢？（即：Core Foundation和Foundation对象的转换）&lt;/p&gt;
&lt;h2 id=&quot;本文关键字&quot;&gt;&lt;a href=&quot;#本文关键字&quot; class=&quot;headerlink&quot; title=&quot;本文关键字&quot;&gt;&lt;/a&gt;本文关键字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GCD：dispatch_set_context，dispatch_get_context&lt;/li&gt;
&lt;li&gt;__bridge，__bridge_retained，__bridge_transfer&lt;/li&gt;
&lt;li&gt;Core Foundation, NSObject&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Enum-枚举的正确使用-Effective-Objective-C-读书笔记-Item-5</title>
    <link href="http://tutuge.me/2015/03/21/effective-objective-c-5-enum/"/>
    <id>http://tutuge.me/2015/03/21/effective-objective-c-5-enum/</id>
    <published>2015-03-21T12:52:57.000Z</published>
    <updated>2016-03-20T09:03:27.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Enum，也就是枚举，从C语言开始就有了，C++、Java、Objective-C、Swift这些语言，当然都有对应的枚举类型，功能可能有多有少，但是最核心的还是一个—规范的定义代码中的状态、选项等“常量”。&lt;/p&gt;
&lt;h2 id=&quot;Item-5-Use-Enumerations-for-States-Options-and-Status-Codes&quot;&gt;&lt;a href=&quot;#Item-5-Use-Enumerations-for-States-Options-and-Status-Codes&quot; class=&quot;headerlink&quot; title=&quot;Item 5 - Use Enumerations for States, Options, and Status Codes&quot;&gt;&lt;/a&gt;Item 5 - Use Enumerations for States, Options, and Status Codes&lt;/h2&gt;&lt;p&gt;本节的内容就是如何正确的使用枚举。&lt;/p&gt;
&lt;h2 id=&quot;状态与选项的区别（states-and-options）&quot;&gt;&lt;a href=&quot;#状态与选项的区别（states-and-options）&quot; class=&quot;headerlink&quot; title=&quot;状态与选项的区别（states and options）&quot;&gt;&lt;/a&gt;状态与选项的区别（states and options）&lt;/h2&gt;&lt;p&gt;在用&lt;strong&gt;enum&lt;/strong&gt;之前，我个人觉得，区分一下状态和选项的概念还是很必要的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态&lt;/strong&gt;，同时只能有一种，如“&lt;strong&gt;OK&lt;/strong&gt;”，“&lt;strong&gt;Error&lt;/strong&gt;”，不可能同时是OK和Error。&lt;br&gt;&lt;strong&gt;选项&lt;/strong&gt;，同时可以有一种或一种以上，如App可以&lt;strong&gt;同时&lt;/strong&gt;支持横屏和竖屏，横屏竖屏在这个时候就是“屏幕方向”的两种不同的选项。&lt;/p&gt;
&lt;p&gt;接下来，我们看看如何用枚举定义状态和选项。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;enum与状态（states）&quot;&gt;&lt;a href=&quot;#enum与状态（states）&quot; class=&quot;headerlink&quot; title=&quot;enum与状态（states）&quot;&gt;&lt;/a&gt;enum与状态（states）&lt;/h2&gt;&lt;h4 id=&quot;不好的做法&quot;&gt;&lt;a href=&quot;#不好的做法&quot; class=&quot;headerlink&quot; title=&quot;不好的做法&quot;&gt;&lt;/a&gt;不好的做法&lt;/h4&gt;&lt;p&gt;经常看到这样的写法：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; STATE_OK &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; STATE_ERROR &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; STATE_UNKNOW &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//直接用int型变量接收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; STATE = STATE_UNKNOW&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样做有如下“不恰当”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏定义没有类型约束，只是单纯的替换。&lt;/li&gt;
&lt;li&gt;无法限制状态的所有情况，如，认为的将STATE赋值成3，程序可能就会出错，找不到匹配的状态，因为编译器不会对“&lt;strong&gt;STATE = 3;&lt;/strong&gt;”提出警告。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;正确的做法&quot;&gt;&lt;a href=&quot;#正确的做法&quot; class=&quot;headerlink&quot; title=&quot;正确的做法&quot;&gt;&lt;/a&gt;正确的做法&lt;/h4&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_TTGState&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGStateOK  = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGStateError,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGStateUnknow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; TTGState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;指明枚举类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTGState state = TTGStateOK;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用的时候就如下：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;attribute&quot;&gt;dealWithState&lt;/span&gt;:(TTGState)&lt;span class=&quot;decorator&quot;&gt;state&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TTGStateOK&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TTGStateError&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TTGStateUnknow&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;enum与选项-options&quot;&gt;&lt;a href=&quot;#enum与选项-options&quot; class=&quot;headerlink&quot; title=&quot;enum与选项 (options)&quot;&gt;&lt;/a&gt;enum与选项 (options)&lt;/h2&gt;&lt;p&gt;选项，就是说一个“选项变量”的类型要能够同时表示一个或多个组合的选择，如下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight protobuf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方向，可同时支持一个或多个方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;TTGDirection&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGDirectionNone = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGDirectionTop = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGDirectionLeft = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGDirectionRight = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TTGDirectionBottom = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; TTGDirection;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，这里的选项是用&lt;strong&gt;位运算&lt;/strong&gt;的方式定义的，这样的好处就是，我们的选项变量可以如下表示：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//用“或”运算同时赋值多个选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TTGDirection direction = TTGDirectionTop | TTGDirectionLeft | TTGDirectionBottom&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//用“与”运算取出对应位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (direction &amp;amp; TTGDirectionTop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;top&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (direction &amp;amp; TTGDirectionLeft) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (direction &amp;amp; TTGDirectionRight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (direction &amp;amp; TTGDirectionBottom) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;bottom&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;direction&lt;/strong&gt;变量的实际内存如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_effective_objective_c_5_enum_2.jpg&quot; alt=&quot;内存示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样，用位运算，就可以同时支持多个值。&lt;/p&gt;
&lt;h2 id=&quot;enum在Objective-C中的“升级版”&quot;&gt;&lt;a href=&quot;#enum在Objective-C中的“升级版”&quot; class=&quot;headerlink&quot; title=&quot;enum在Objective-C中的“升级版”&quot;&gt;&lt;/a&gt;enum在Objective-C中的“升级版”&lt;/h2&gt;&lt;p&gt;一般来说，我们不能指定枚举变量的实际类型是什么，就是说，我们不知道枚举最后是int型，还是其他的什么类型。但是从C++ 11开始，我们可以为枚举指定其实际的存储类型，如下语法：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TTGState&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSInteger&lt;/span&gt; &amp;#123;/*...*/&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，我们在定义枚举的时候如何保证兼容性呢？Foundation框架已经为我们提供了更加“统一、便捷”的枚举定义方法，我们重新定义上面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&lt;span class=&quot;type&quot;&gt;NS_ENUM&lt;/span&gt;，定义状态等普通枚举&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSUInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;TTGState&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGStateOK&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGStateError&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGStateUnknow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;span class=&quot;type&quot;&gt;NS_OPTIONS&lt;/span&gt;，定义选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_OPTIONS&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSUInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;TTGDirection&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGDirectionNone&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGDirectionTop&lt;/span&gt; = 1 &amp;lt;&amp;lt; 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGDirectionLeft&lt;/span&gt; = 1 &amp;lt;&amp;lt; 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGDirectionRight&lt;/span&gt; = 1 &amp;lt;&amp;lt; 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TTGDirectionBottom&lt;/span&gt; = 1 &amp;lt;&amp;lt; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，在开发Mac、iOS程序中，最好所有的枚举都用“&lt;strong&gt;NS_ENUM&lt;/strong&gt;”和“&lt;strong&gt;NS_OPTIONS&lt;/strong&gt;”定义，保证统一。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;充分的用好枚举，可以增强代码的可读性，减少各种“错误”，让代码更加的规范。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Enum，也就是枚举，从C语言开始就有了，C++、Java、Objective-C、Swift这些语言，当然都有对应的枚举类型，功能可能有多有少，但是最核心的还是一个—规范的定义代码中的状态、选项等“常量”。&lt;/p&gt;
&lt;h2 id=&quot;Item-5-Use-Enumerations-for-States-Options-and-Status-Codes&quot;&gt;&lt;a href=&quot;#Item-5-Use-Enumerations-for-States-Options-and-Status-Codes&quot; class=&quot;headerlink&quot; title=&quot;Item 5 - Use Enumerations for States, Options, and Status Codes&quot;&gt;&lt;/a&gt;Item 5 - Use Enumerations for States, Options, and Status Codes&lt;/h2&gt;&lt;p&gt;本节的内容就是如何正确的使用枚举。&lt;/p&gt;
&lt;h2 id=&quot;状态与选项的区别（states-and-options）&quot;&gt;&lt;a href=&quot;#状态与选项的区别（states-and-options）&quot; class=&quot;headerlink&quot; title=&quot;状态与选项的区别（states and options）&quot;&gt;&lt;/a&gt;状态与选项的区别（states and options）&lt;/h2&gt;&lt;p&gt;在用&lt;strong&gt;enum&lt;/strong&gt;之前，我个人觉得，区分一下状态和选项的概念还是很必要的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态&lt;/strong&gt;，同时只能有一种，如“&lt;strong&gt;OK&lt;/strong&gt;”，“&lt;strong&gt;Error&lt;/strong&gt;”，不可能同时是OK和Error。&lt;br&gt;&lt;strong&gt;选项&lt;/strong&gt;，同时可以有一种或一种以上，如App可以&lt;strong&gt;同时&lt;/strong&gt;支持横屏和竖屏，横屏竖屏在这个时候就是“屏幕方向”的两种不同的选项。&lt;/p&gt;
&lt;p&gt;接下来，我们看看如何用枚举定义状态和选项。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>@autoreleasepool-内存的分配与释放</title>
    <link href="http://tutuge.me/2015/03/17/what-is-autoreleasepool/"/>
    <id>http://tutuge.me/2015/03/17/what-is-autoreleasepool/</id>
    <published>2015-03-17T12:21:56.000Z</published>
    <updated>2016-03-20T09:03:59.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发过iOS、Mac的朋友应该对“&lt;strong&gt;@autoreleasepool&lt;/strong&gt;”不陌生。只要在Xcode里创建一个工程，就能看到下面这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//iOS program&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIApplicationMain&lt;/span&gt;(argc, argv, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([AppDelegate class]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Command line program&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，每个&lt;strong&gt;main&lt;/strong&gt;函数的主体都被&lt;strong&gt;@autoreleasepool&lt;/strong&gt;的Block块包在里面，也就是说，接下来所有的对象创建都在这个block里面。&lt;/p&gt;
&lt;p&gt;那么，&lt;strong&gt;@autoreleasepool&lt;/strong&gt;的作用到底是什么呢？我们开发中可以用它来做什么呢？&lt;/p&gt;
&lt;p&gt;可以在某些情况下，大幅度降低程序的内存占用，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2c1f07459d33c72de07d8a9305703b2ba40abfc4/687474703a2f2f7a6f72726f6368656e2e71696e6975646e2e636f6d2f626c6f675f776861745f69735f6175746f72656c65617365706f6f6c5f312e706e673f696d61676556696577322f302f682f343030&quot; alt=&quot;autoreleasepool测试内存占用图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的内容：500000次循环，每次循环创建一个NSNumber实例和两个NSString实例。&lt;/li&gt;
&lt;li&gt;图：红线表示没有用&lt;strong&gt;@autoreleasepool&lt;/strong&gt;时的内存占用。&lt;/li&gt;
&lt;li&gt;图：绿线表示用了&lt;strong&gt;@autoreleasepool&lt;/strong&gt;优化后的内存占用！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果是不是很明显！&lt;/p&gt;
&lt;p&gt;代码Github地址：&lt;a href=&quot;https://github.com/zekunyan/AutoReleasePoolTestExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoReleasePoolTestExample&lt;/a&gt; Xcode 6, iOS 8, iPhone 5模拟器.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;MRC-与-ARC&quot;&gt;&lt;a href=&quot;#MRC-与-ARC&quot; class=&quot;headerlink&quot; title=&quot;MRC 与 ARC&quot;&gt;&lt;/a&gt;MRC 与 ARC&lt;/h2&gt;&lt;p&gt;MRC（Mannul Reference Counting）和ARC(Automatic Reference Counting)，分别对应着手动引用计数和自动引用计数。&lt;/p&gt;
&lt;p&gt;对！是计数，不是“&lt;strong&gt;GC、垃圾回收&lt;/strong&gt;”什么的，就是说，在Objective-C的开发中，ARC不代表像Java那样有GC做垃圾回收，所以本质上还是要“手动”管理内存的。也就是说，我们在ARC环境下写的代码，不用自己手动插入“&lt;strong&gt;retain、release这些消息&lt;/strong&gt;”，ARC会在编译时为我们在合适的位置插入，释放不必要的内存。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;@autoreleasepool&lt;/strong&gt;就跟对象的&lt;strong&gt;release&lt;/strong&gt;密切相关。&lt;/p&gt;
&lt;h2 id=&quot;autoreleasepool-干了啥&quot;&gt;&lt;a href=&quot;#autoreleasepool-干了啥&quot; class=&quot;headerlink&quot; title=&quot;@autoreleasepool 干了啥&quot;&gt;&lt;/a&gt;@autoreleasepool 干了啥&lt;/h2&gt;&lt;p&gt;在MRC时代，如果我们想先retain一个对象，但是并不知道在什么时候可以release它，我们可以像下面这么做：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSAutoreleasePool *pool = [[NSAutoreleasePool &lt;span class=&quot;keyword&quot;&gt;alloc&lt;/span&gt;] init]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString* &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt; = [[[NSString &lt;span class=&quot;keyword&quot;&gt;alloc&lt;/span&gt;] initWithString:@&lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;] autorelease]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//use str...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pool release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//str is released&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是说，我们可以在创建对象的时候给对象发送“&lt;strong&gt;autorelease&lt;/strong&gt;”消息，然后当&lt;strong&gt;NSAutoreleasePool&lt;/strong&gt;结束的时候，“标记过”autorelease的对象都会被“&lt;strong&gt;release&lt;/strong&gt;”掉，也就是会被释放掉。&lt;/p&gt;
&lt;p&gt;但是在ARC时代，我们不用手动发送&lt;strong&gt;autorelease&lt;/strong&gt;消息，ARC会自动帮我们加。而这个时候，&lt;strong&gt;@autoreleasepool&lt;/strong&gt;做的事情，跟&lt;strong&gt;NSAutoreleasePool&lt;/strong&gt;就一模一样了。&lt;/p&gt;
&lt;h2 id=&quot;什么时候用-autoreleasepool&quot;&gt;&lt;a href=&quot;#什么时候用-autoreleasepool&quot; class=&quot;headerlink&quot; title=&quot;什么时候用@autoreleasepool&quot;&gt;&lt;/a&gt;什么时候用@autoreleasepool&lt;/h2&gt;&lt;p&gt;根据&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple的文档&lt;/a&gt;，使用场景如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写基于命令行的的程序时，就是没有UI框架，如AppKit等Cocoa框架时。&lt;/li&gt;
&lt;li&gt;写循环，循环里面包含了大量临时创建的对象。（本文的例子）&lt;/li&gt;
&lt;li&gt;创建了新的线程。（非Cocoa程序创建线程时才需要）&lt;/li&gt;
&lt;li&gt;长时间在后台运行的任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;利用-autoreleasepool优化循环&quot;&gt;&lt;a href=&quot;#利用-autoreleasepool优化循环&quot; class=&quot;headerlink&quot; title=&quot;利用@autoreleasepool优化循环&quot;&gt;&lt;/a&gt;利用@autoreleasepool优化循环&lt;/h2&gt;&lt;p&gt;利用@autoreleasepool优化循环的内存占用，我觉得最有用的一点，下面就说说这个点。&lt;br&gt;如下面的循环，次数非常多，而且循环体里面的对象都是临时创建使用的，就可以用&lt;strong&gt;@autoreleasepool&lt;/strong&gt;包起来，让每次循环结束时，可以及时的释放临时对象的内存。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//来自Apple文档，见参考&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *urls = &amp;lt;&lt;span class=&quot;meta&quot;&gt;# An array of file URLs #&amp;gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; urls) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fileContents = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithContentsOfURL:url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Process the string, creating and autoreleasing more objects. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这么做的效果是极其显著地，就如本文最开始的图一样，可以自己把示例工程下回来运行下试试~&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;@autoreleasepool&lt;/strong&gt;看起来很不“起眼”，平常开发很容易就忽略它了，但是仔细一看，确如此有用~&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Autorelease Pool Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14677049/what-is-autoreleasepool-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is autoreleasepool? - Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9086913/objective-c-why-is-autorelease-autoreleasepool-still-needed-with-arc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C: Why is autorelease (@autoreleasepool) still needed with ARC?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.zilongshanren.com/blog/2013/12/20/what-is-autorelease-pool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What-is-autorelease-pool?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSAutoreleasePool_Class/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSAutoreleasePool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;示例中的第三方库&quot;&gt;&lt;a href=&quot;#示例中的第三方库&quot; class=&quot;headerlink&quot; title=&quot;示例中的第三方库&quot;&gt;&lt;/a&gt;示例中的第三方库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kevinzhow/PNChart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PNChart&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;运行中用代码获取App运行消耗内存&quot;&gt;&lt;a href=&quot;#运行中用代码获取App运行消耗内存&quot; class=&quot;headerlink&quot; title=&quot;运行中用代码获取App运行消耗内存&quot;&gt;&lt;/a&gt;运行中用代码获取App运行消耗内存&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/787160/programmatically-retrieve-memory-usage-on-iphone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programmatically retrieve memory usage on iPhone&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发过iOS、Mac的朋友应该对“&lt;strong&gt;@autoreleasepool&lt;/strong&gt;”不陌生。只要在Xcode里创建一个工程，就能看到下面这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//iOS program&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIApplicationMain&lt;/span&gt;(argc, argv, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([AppDelegate class]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Command line program&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，每个&lt;strong&gt;main&lt;/strong&gt;函数的主体都被&lt;strong&gt;@autoreleasepool&lt;/strong&gt;的Block块包在里面，也就是说，接下来所有的对象创建都在这个block里面。&lt;/p&gt;
&lt;p&gt;那么，&lt;strong&gt;@autoreleasepool&lt;/strong&gt;的作用到底是什么呢？我们开发中可以用它来做什么呢？&lt;/p&gt;
&lt;p&gt;可以在某些情况下，大幅度降低程序的内存占用，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2c1f07459d33c72de07d8a9305703b2ba40abfc4/687474703a2f2f7a6f72726f6368656e2e71696e6975646e2e636f6d2f626c6f675f776861745f69735f6175746f72656c65617365706f6f6c5f312e706e673f696d61676556696577322f302f682f343030&quot; alt=&quot;autoreleasepool测试内存占用图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的内容：500000次循环，每次循环创建一个NSNumber实例和两个NSString实例。&lt;/li&gt;
&lt;li&gt;图：红线表示没有用&lt;strong&gt;@autoreleasepool&lt;/strong&gt;时的内存占用。&lt;/li&gt;
&lt;li&gt;图：绿线表示用了&lt;strong&gt;@autoreleasepool&lt;/strong&gt;优化后的内存占用！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果是不是很明显！&lt;/p&gt;
&lt;p&gt;代码Github地址：&lt;a href=&quot;https://github.com/zekunyan/AutoReleasePoolTestExample&quot;&gt;AutoReleasePoolTestExample&lt;/a&gt; Xcode 6, iOS 8, iPhone 5模拟器.&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>有关宏定义的经验与技巧-简化代码-增强Log</title>
    <link href="http://tutuge.me/2015/03/15/%E6%9C%89%E5%85%B3%E5%AE%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B8%8E%E6%8A%80%E5%B7%A7-%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81-%E5%A2%9E%E5%BC%BALog/"/>
    <id>http://tutuge.me/2015/03/15/有关宏定义的经验与技巧-简化代码-增强Log/</id>
    <published>2015-03-15T07:34:28.000Z</published>
    <updated>2016-03-20T09:04:09.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;宏定义、#define啥的，我们经常遇到。&lt;br&gt;一般来说，最常用的可能就是定义一些常量、简单的“函数”，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//定义常量&lt;span class=&quot;literal&quot;&gt;PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define PI 3.1415926&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义“函数”MIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define MIN(A,B) ((A) &amp;lt; (B) ? (A) : (B))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，这样定义常量、函数，有一定的风险。（见：&lt;a href=&quot;http://tutuge.me/2015/03/11/Effective-Objective-C-读书笔记-Item-4-如何正确定义常量/&quot;&gt;Effective-Objective-C-读书笔记-Item-4-如何正确定义常量&lt;/a&gt;, &lt;a href=&quot;http://onevcat.com/2014/01/black-magic-in-macro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;宏定义的黑魔法 - 宏菜鸟起飞手册&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;本文就列出几条我个人在iOS开发当中常用的经验与技巧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简化代码&quot;&gt;&lt;a href=&quot;#简化代码&quot; class=&quot;headerlink&quot; title=&quot;简化代码&quot;&gt;&lt;/a&gt;简化代码&lt;/h2&gt;&lt;p&gt;在开发当中，我们可能会大量的写一些重复的，甚至具有“危险”的代码，用宏定义#define，往往可以简化代码，看看下面几个例子。&lt;/p&gt;
&lt;h3 id=&quot;GCD与-define&quot;&gt;&lt;a href=&quot;#GCD与-define&quot; class=&quot;headerlink&quot; title=&quot;GCD与#define&quot;&gt;&lt;/a&gt;GCD与#define&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;dispatch_once&lt;/strong&gt;&lt;br&gt;项目中往往少不了各种单例类，我们一般会如下定义：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;instancetype)sharedService &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static XXX *&lt;span class=&quot;keyword&quot;&gt;sharedService &lt;/span&gt;= nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static &lt;span class=&quot;keyword&quot;&gt;dispatch_once_t &lt;/span&gt;onceToken&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dispatch_once, &lt;/span&gt;^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;sharedService &lt;/span&gt;= [XXX new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;sharedService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候，就要注意几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dispatch_once_t必须是&lt;strong&gt;static&lt;/strong&gt;的，否则会各种报错=。=。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dispatch_once&lt;/strong&gt;的第一个参数必须取onceToken的地址，就是要“&lt;strong&gt;&amp;amp;onceToken&lt;/strong&gt;。”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看，写个小小的单例都要这么注意，错了一点都很危险啊，而且总要重复写这几行。所以这个时候需要让宏定义帮忙：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义宏定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; DISPATCH_ONCE_BLOCK(onceBlock) static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, onceBlock);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)sharedService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static XXX *sharedService = nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//直接一行搞定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DISPATCH_ONCE_BLOCK(^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sharedService = [XXX new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sharedService&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，是不是变得更加简洁、“安全了”~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dispatch_async&lt;/strong&gt;&lt;br&gt;除了dispatch_once，另一个常用的就是dispatch_async。不多说，直接看例子：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在Main线程上运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_MAIN_THREAD&lt;/span&gt;(mainQueueBlock) &lt;span class=&quot;selector-tag&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), mainQueueBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在Global Queue上运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_GLOBAL_QUEUE_HIGH&lt;/span&gt;(globalQueueBlocl) &lt;span class=&quot;selector-tag&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), globalQueueBlocl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_GLOBAL_QUEUE_DEFAULT&lt;/span&gt;(globalQueueBlocl) &lt;span class=&quot;selector-tag&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), globalQueueBlocl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_GLOBAL_QUEUE_LOW&lt;/span&gt;(globalQueueBlocl) &lt;span class=&quot;selector-tag&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), globalQueueBlocl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_GLOBAL_QUEUE_BACKGROUND&lt;/span&gt;(globalQueueBlocl) &lt;span class=&quot;selector-tag&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), globalQueueBlocl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//主线程上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_MAIN_THREAD&lt;/span&gt;(^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//更新UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Global Queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;DISPATCH_ON_GLOBAL_QUEUE_DEFAULT&lt;/span&gt;(^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//异步耗时任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再也不用写一大堆”dispatch_async(dispatch_get_global_queue”了~看起来是不是很清爽~&lt;/p&gt;
&lt;h3 id=&quot;能一行搞定，干嘛还要写多行&quot;&gt;&lt;a href=&quot;#能一行搞定，干嘛还要写多行&quot; class=&quot;headerlink&quot; title=&quot;能一行搞定，干嘛还要写多行&quot;&gt;&lt;/a&gt;能一行搞定，干嘛还要写多行&lt;/h3&gt;&lt;p&gt;很多时候，我们写的函数、方法都会在起始的地方加一些公共的判断，条件满足了才可以继续往下运行，如“用户是否登录”、“某个模块是否加载完成”等等，所以，我们可能会写如下样子的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;decorator&quot;&gt;doSomething&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![[XXXAccountService sharedService] isLogin]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//do staff...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;decorator&quot;&gt;doSomething2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![[XXXAccountService sharedService] isLogin]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//do staff...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次都要这么写，是不是感觉很浪费时间？而且重复的好多=。=&lt;br&gt;所以，我们要用#define，把3行变成一行:&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; CHECK_LOGIN_IN &lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; (![[XXXAccountService sharedService] isLogin]) &amp;#123;return;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)doSomething &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_LOGIN_IN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//do staff...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)doSomething2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_LOGIN_IN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//do staff...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实#define的原理就是不管三七二十一，直接做替换，所以我们完全可以利用这个特点，发挥自己的想象，简化代码~&lt;/p&gt;
&lt;h2 id=&quot;宏定义与Log&quot;&gt;&lt;a href=&quot;#宏定义与Log&quot; class=&quot;headerlink&quot; title=&quot;宏定义与Log&quot;&gt;&lt;/a&gt;宏定义与Log&lt;/h2&gt;&lt;p&gt;打Log，是个永恒的话题。&lt;/p&gt;
&lt;h3 id=&quot;NSLog增强版&quot;&gt;&lt;a href=&quot;#NSLog增强版&quot; class=&quot;headerlink&quot; title=&quot;NSLog增强版&quot;&gt;&lt;/a&gt;NSLog增强版&lt;/h3&gt;&lt;p&gt;我们会经常用到&lt;strong&gt;NSLog&lt;/strong&gt;打Log，但是，这个函数能提供的信息非常少，所以，下面就是一个增强版, 最好定义在项目的pch文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define NSLog(format, ...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123; &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;%@ : %d : %s&amp;gt;-: %@&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[NSString stringWithUTF8String:__FILE__] lastPathComponent], &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __LINE__, &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __FUNCTION__, &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [NSString stringWithFormat:format, &lt;span class=&quot;comment&quot;&gt;##__VA_ARGS__]); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Blog: %@&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;http://tutuge.me&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;main.&lt;span class=&quot;string&quot;&gt;m :&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; : main&amp;gt;-: &lt;span class=&quot;string&quot;&gt;Blog:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//tutuge.me&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，这下Log就带上了文件名、行号、函数名，一下子就清楚多了~&lt;br&gt;至于为什么要用这个奇怪的“do{…}while(0)”，其实就是为了防止在不同的使用场景中导致语法错误，详细请见：&lt;a href=&quot;http://onevcat.com/2014/01/black-magic-in-macro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;宏定义的黑魔法 - 宏菜鸟起飞手册&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;为Log增加全局开关&quot;&gt;&lt;a href=&quot;#为Log增加全局开关&quot; class=&quot;headerlink&quot; title=&quot;为Log增加全局开关&quot;&gt;&lt;/a&gt;为Log增加全局开关&lt;/h3&gt;&lt;p&gt;开发中，我们往往会在许多地方加上Log，但是在发布的时候，又不想显示这些Log，这个时候难道要一个一个的删除打Log的地方？&lt;br&gt;所以，为了增加开关，我们需要将上面的增强型NSLog改造一下：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否要Log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; NEED_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSLog(format, ...) \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Log定义...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSLog(format, ...) do&amp;#123; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，当我们需要Log的时候，在上面定义的之前加上下面这一行：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NEED_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就可以打开Log了。不加的话，就不会有Log~简单的条件编译~&lt;/p&gt;
&lt;h3 id=&quot;为Log增加等级&quot;&gt;&lt;a href=&quot;#为Log增加等级&quot; class=&quot;headerlink&quot; title=&quot;为Log增加等级&quot;&gt;&lt;/a&gt;为Log增加等级&lt;/h3&gt;&lt;p&gt;开发过Android的应该都知道，Android里面可以很方便的用Log.i、Log.d输出不同“等级”的Log，调试更加方便，NSLog却不行。所以，还是要借助宏定义：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Debug等级Log, 在此之前定义自己的NSLog&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; LOG_LEVEL_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; DLog(format, ...) NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;DEBUG&amp;gt;: %@&quot;&lt;/span&gt;, [NSString stringWithFormat:format, ##__VA_ARGS__])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; DLog(format, ...) do&amp;#123; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Info等级Log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; LOG_LEVEL_INFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ILog(format, ...) NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;Info&amp;gt;: %@&quot;&lt;/span&gt;, [NSString stringWithFormat:format, ##__VA_ARGS__])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ILog(format, ...) do&amp;#123; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Error等级Log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; LOG_LEVEL_ERROR&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ELog(format, ...) NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;Error&amp;gt;: %@&quot;&lt;/span&gt;, [NSString stringWithFormat:format, ##__VA_ARGS__])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ELog(format, ...) do&amp;#123; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们在打Log的时候，就可以根据需要，用不同等级的Log，而且可以方便的定制需要输出哪几种，并且之前的“增强版”NSLog也可以使用。&lt;/p&gt;
&lt;p&gt;完整的请看&lt;a href=&quot;https://gist.github.com/zekunyan/2f2356136b9b40348584&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gist&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h2&gt;&lt;p&gt;还有一些简单好用的宏定义，在这就只举几个典型的例子了~&lt;/p&gt;
&lt;h3 id=&quot;打印自定义类型信息&quot;&gt;&lt;a href=&quot;#打印自定义类型信息&quot; class=&quot;headerlink&quot; title=&quot;打印自定义类型信息&quot;&gt;&lt;/a&gt;打印自定义类型信息&lt;/h3&gt;&lt;p&gt;假如有如下结构体定义(自定义类的话，直接重写description方法即可):&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//复数结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Complex &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; r; &lt;span class=&quot;comment&quot;&gt;//实部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; i; &lt;span class=&quot;comment&quot;&gt;//虚部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; Complex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义打印Complex类型的宏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出：(1+2i), (1-2i)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NSLogComplex(complex) NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Complex: (%g%s%gi)&quot;&lt;/span&gt;, complex.r, (complex.i &amp;gt; 0 ? &lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;), complex.i)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;常用函数简化、单例获取&quot;&gt;&lt;a href=&quot;#常用函数简化、单例获取&quot; class=&quot;headerlink&quot; title=&quot;常用函数简化、单例获取&quot;&gt;&lt;/a&gt;常用函数简化、单例获取&lt;/h3&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取View的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetViewWidth(view)  view&lt;span class=&quot;selector-class&quot;&gt;.frame&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.width&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetViewHeight(view) view&lt;span class=&quot;selector-class&quot;&gt;.frame&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.height&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetViewX(view)      view&lt;span class=&quot;selector-class&quot;&gt;.frame&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.origin&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetViewY(view)      view&lt;span class=&quot;selector-class&quot;&gt;.frame&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.origin&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//屏幕常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetScreenWidth      [[UIScreen mainScreen] bounds]&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.width&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetScreenHeight     [[UIScreen mainScreen] bounds]&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.height&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取图片资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine GetImage(imageName) [UIImage imageNamed:[NSString stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;,imageName]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//等等~只要你想得到~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;宏定义的各种Tip还远远不止这些，合理使用它，可以有效改善代码的阅读质量~&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The C Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://onevcat.com/2014/01/black-magic-in-macro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;宏定义的黑魔法 - 宏菜鸟起飞手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;宏定义、#define啥的，我们经常遇到。&lt;br&gt;一般来说，最常用的可能就是定义一些常量、简单的“函数”，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//定义常量&lt;span class=&quot;literal&quot;&gt;PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define PI 3.1415926&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//定义“函数”MIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define MIN(A,B) ((A) &amp;lt; (B) ? (A) : (B))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，这样定义常量、函数，有一定的风险。（见：&lt;a href=&quot;http://tutuge.me/2015/03/11/Effective-Objective-C-读书笔记-Item-4-如何正确定义常量/&quot;&gt;Effective-Objective-C-读书笔记-Item-4-如何正确定义常量&lt;/a&gt;, &lt;a href=&quot;http://onevcat.com/2014/01/black-magic-in-macro/&quot;&gt;宏定义的黑魔法 - 宏菜鸟起飞手册&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;本文就列出几条我个人在iOS开发当中常用的经验与技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="技巧" scheme="http://tutuge.me/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Objective-C-读书笔记-Item-4-如何正确定义常量</title>
    <link href="http://tutuge.me/2015/03/11/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-4-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F/"/>
    <id>http://tutuge.me/2015/03/11/Effective-Objective-C-读书笔记-Item-4-如何正确定义常量/</id>
    <published>2015-03-10T16:07:23.000Z</published>
    <updated>2016-03-20T09:03:35.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写博客果然比光看书要花时间=。=，书都快看完了，才写到第4节。但是总结一遍，的确印象深刻啊~~&lt;/p&gt;
&lt;p&gt;这次的主题是“&lt;strong&gt;常量&lt;/strong&gt;”，非常常用，又非常重要的东西~良好的代码规范、设计，少不了各种&lt;strong&gt;常量&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Item-4-Prefer-Typed-Constants-to-Preprocessor-define&quot;&gt;&lt;a href=&quot;#Item-4-Prefer-Typed-Constants-to-Preprocessor-define&quot; class=&quot;headerlink&quot; title=&quot;Item 4 - Prefer Typed Constants to Preprocessor #define&quot;&gt;&lt;/a&gt;Item 4 - Prefer Typed Constants to Preprocessor #define&lt;/h2&gt;&lt;p&gt;本节着重对比了常量的定义形式，类型常量和#define的区别、各自的特点。最后得出，我们应该用带有类型的常量，而不是#define。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一个简单的示例&quot;&gt;&lt;a href=&quot;#一个简单的示例&quot; class=&quot;headerlink&quot; title=&quot;一个简单的示例&quot;&gt;&lt;/a&gt;一个简单的示例&lt;/h2&gt;&lt;p&gt;应用中，少不了各种动画，也就少不了设定动画的时间长度，一般来说，我们会设定短、中、长几种时间常量，用于不同的场合，了解C语言的童鞋估计对“&lt;strong&gt;#define&lt;/strong&gt;”宏定义不陌生，于是，可能就会如下这么定义：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ANIMATION_DURATION_SHORT 0.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ANIMATION_DURATION_MIDDLE 0.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ANIMATION_DURATION_LONG 1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是，所有用到动画时长的地方，直接用这几个宏定义就行了。&lt;/p&gt;
&lt;p&gt;乍一看，似乎没什么问题。&lt;/p&gt;
&lt;h3 id=&quot;类型-不可变&quot;&gt;&lt;a href=&quot;#类型-不可变&quot; class=&quot;headerlink&quot; title=&quot;类型+不可变&quot;&gt;&lt;/a&gt;类型+不可变&lt;/h3&gt;&lt;p&gt;先来看看宏定义干了什么。&lt;br&gt;总的来说，#define就是“替换”，在编译时，将一切宏定义替换成定义后面的内容。（参考&lt;a href=&quot;http://baike.baidu.com/view/2076445.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;关键在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏定义不会检查替换的“&lt;strong&gt;类型&lt;/strong&gt;”，只要遇到，就做替换。&lt;/li&gt;
&lt;li&gt;宏定义不保证“&lt;strong&gt;不可变&lt;/strong&gt;”，因为可以&lt;strong&gt;重复定义&lt;/strong&gt;，不能保证值不变。(这个我觉得是最容易让人忽略的地方)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，用宏定义定义常量，很“危险”。&lt;/p&gt;
&lt;h2 id=&quot;正确的做法&quot;&gt;&lt;a href=&quot;#正确的做法&quot; class=&quot;headerlink&quot; title=&quot;正确的做法&quot;&gt;&lt;/a&gt;正确的做法&lt;/h2&gt;&lt;p&gt;恰当的常量，应该具备合适的常量名字、正确的类型，还有const、extern等关键字的修饰，当然，还要根据常量适用的“&lt;strong&gt;范围&lt;/strong&gt;”，做出恰当的处理。一下举例说明。&lt;/p&gt;
&lt;h3 id=&quot;只在函数中用的常量&quot;&gt;&lt;a href=&quot;#只在函数中用的常量&quot; class=&quot;headerlink&quot; title=&quot;只在函数中用的常量&quot;&gt;&lt;/a&gt;只在函数中用的常量&lt;/h3&gt;&lt;p&gt;只在函数中用的常量：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)runAnimation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//动画时间长度常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; kAnimationDurationLong = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;static、const定义了它是静态不可变的；&lt;strong&gt;NSTimeInterval&lt;/strong&gt;则“精确”指定了常量的类型。&lt;/p&gt;
&lt;h3 id=&quot;只在一个“-m”文件中使用的常量&quot;&gt;&lt;a href=&quot;#只在一个“-m”文件中使用的常量&quot; class=&quot;headerlink&quot; title=&quot;只在一个“.m”文件中使用的常量&quot;&gt;&lt;/a&gt;只在一个“&lt;strong&gt;.m&lt;/strong&gt;”文件中使用的常量&lt;/h3&gt;&lt;p&gt;在类的实现文件“xxx.m”文件中定义常量，也是很常见的。&lt;br&gt;你可能会觉得，既然是一个类使用的，那就放在类的头文件里面定义不就好了。&lt;br&gt;&lt;strong&gt;但是这么想是错的=。=&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;因为所有要用到这个类的文件，都会无形当中包含了这些常量声明，将不必要的数据暴露在外面，这样是违反设计原则的，并且，如果常量名字取得不恰当，还有可能造成冲突。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，应该如下:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//XXX.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//必须要static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; kAnimationDurationLong = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XXX&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一定要放在.m文件中。&lt;/li&gt;
&lt;li&gt;必须是&lt;strong&gt;static&lt;/strong&gt;，表示此常量作用域只在此.m文件中。如果不加static的话，常量就会在全局作用域中声明，可能会导致跟其他的常量冲突。&lt;/li&gt;
&lt;li&gt;const，当然。&lt;/li&gt;
&lt;li&gt;NSTimeInterval，确定的类型。&lt;/li&gt;
&lt;li&gt;kAnimationDurationLong，“&lt;strong&gt;k&lt;/strong&gt;”开头的命名，也算是Apple的规范了吧，内部常量统一以“&lt;strong&gt;k&lt;/strong&gt;”开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;全局常量&quot;&gt;&lt;a href=&quot;#全局常量&quot; class=&quot;headerlink&quot; title=&quot;全局常量&quot;&gt;&lt;/a&gt;全局常量&lt;/h3&gt;&lt;p&gt;一般来说，最常见的全局常量就是发广播Notification时用的Notification的名字，往往都是一些字符串，下面就以这个为例子：&lt;/p&gt;
&lt;p&gt;假设我们的类叫“&lt;strong&gt;TTGClass&lt;/strong&gt;”，我们的类会向外发送Notification，所以需要定义一个Notification的名字常量供外界注册，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//TTGClass.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TTGClassWorkBeginNotification;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//TTGClass.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TTGClassWorkBeginNotification = &lt;span class=&quot;string&quot;&gt;@&quot;TTGClassWorkBeginNotification&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件中只是做声明，不做定义。所以用extern表示常量在别处定义的，尽量隐藏细节。&lt;/li&gt;
&lt;li&gt;同&lt;strong&gt;类名&lt;/strong&gt;做常量名字的开头，&lt;strong&gt;这个非常关键，因为Objective-C里面没有像Java那样的“包”机制，所以必须靠命名来划分不同的类，常量当然也要遵循这个规则。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;NSString，确定的类型；const，表明常量；Notification后缀，表明用途。这些都是需要注意的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;良好的代码，总是少不了定义各种常量，以避免“魔鬼数字、魔鬼字符串”。所以我们应该尽量避免少用#define定义常量，而是用带有类型的、const的常量，并且尽可能的缩小常量的作用域。&lt;/p&gt;
&lt;p&gt;暴露的细节越少，出错的机会也就越小（忘了从哪里看到的=。=）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写博客果然比光看书要花时间=。=，书都快看完了，才写到第4节。但是总结一遍，的确印象深刻啊~~&lt;/p&gt;
&lt;p&gt;这次的主题是“&lt;strong&gt;常量&lt;/strong&gt;”，非常常用，又非常重要的东西~良好的代码规范、设计，少不了各种&lt;strong&gt;常量&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Item-4-Prefer-Typed-Constants-to-Preprocessor-define&quot;&gt;&lt;a href=&quot;#Item-4-Prefer-Typed-Constants-to-Preprocessor-define&quot; class=&quot;headerlink&quot; title=&quot;Item 4 - Prefer Typed Constants to Preprocessor #define&quot;&gt;&lt;/a&gt;Item 4 - Prefer Typed Constants to Preprocessor #define&lt;/h2&gt;&lt;p&gt;本节着重对比了常量的定义形式，类型常量和#define的区别、各自的特点。最后得出，我们应该用带有类型的常量，而不是#define。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="翻译" scheme="http://tutuge.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="笔记" scheme="http://tutuge.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>UITextView编辑时插入自定义表情-简单的图文混编</title>
    <link href="http://tutuge.me/2015/03/07/UITextView%E7%BC%96%E8%BE%91%E6%97%B6%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%83%85-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E6%96%87%E6%B7%B7%E7%BC%96/"/>
    <id>http://tutuge.me/2015/03/07/UITextView编辑时插入自定义表情-简单的图文混编/</id>
    <published>2015-03-07T03:04:38.000Z</published>
    <updated>2016-03-20T09:03:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在iOS开发中，经常需要用UITextView作为编辑文本的输入控件。&lt;br&gt;但是如何在编辑时插入自定义表情呢？就是像发微博时那样？&lt;/p&gt;
&lt;p&gt;本文简单的用&lt;strong&gt;NSTextAttachment&lt;/strong&gt;、&lt;strong&gt;NSAttributedString&lt;/strong&gt;的特性，实现了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在UITextView中编辑文字时插入自定义表情图片&lt;/li&gt;
&lt;li&gt;同时可以返回带有表情“&lt;strong&gt;替换符&lt;/strong&gt;”的纯文本字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;&lt;p&gt;本文代码工程地址：&lt;a href=&quot;https://github.com/zekunyan/UITextViewDIYEmojiExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/UITextViewDIYEmojiExample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/inputEmoji_Sample.gif&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;NSAttributedString及其子类，用于显示富文本。&lt;/li&gt;
&lt;li&gt;NSTextAttachment，NSAttributedString的一种样式类，可以在文本中显示图片。&lt;/li&gt;
&lt;li&gt;NSTextStorage，UITextView中的实际的文本封装。（见参考中的UITextView文档）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;表情与其标志&quot;&gt;&lt;a href=&quot;#表情与其标志&quot; class=&quot;headerlink&quot; title=&quot;表情与其标志&quot;&gt;&lt;/a&gt;表情与其标志&lt;/h3&gt;&lt;p&gt;首先需要明确的是，我们的自定义表情一定是有一一对应的“&lt;strong&gt;标志&lt;/strong&gt;”的，如“&lt;strong&gt;[/emoji_haha]&lt;/strong&gt;”。&lt;br&gt;就是说，为了方便处理，方便在数据库、网络传输中保存、传输带有表情图片的文本，我们必须要为每种表情取特定的“&lt;strong&gt;名字&lt;/strong&gt;”，数据库中储存的、网络传输的文本就只包含这些标志名字就行，在显示的时候做对应的替换。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tutuge.me&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_uitextview_input_emoji_emoji_1.png&quot; alt=&quot;表情&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对应的纯文本就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tutuge.me[/emoji_1]&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;插入并显示表情图片&quot;&gt;&lt;a href=&quot;#插入并显示表情图片&quot; class=&quot;headerlink&quot; title=&quot;插入并显示表情图片&quot;&gt;&lt;/a&gt;插入并显示表情图片&lt;/h2&gt;&lt;p&gt;插入表情很简单，直接实例化&lt;strong&gt;NSTextAttachment&lt;/strong&gt;类，将需要的表情的UIImage实例赋值给NSTextAttachment的image属性，然后用“&lt;strong&gt;[NSAttributedString attributedStringWithAttachment:]&lt;/strong&gt;”方法实例化一个NSAttributedString的对象，插入到UITextView的textStorage对应的位置即可。&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSTextAttachment *emojiTextAttachment = [NSTextAttachment &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置表情图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emojiTextAttachment.image = emojiImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//插入表情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[textView.textStorage &lt;span class=&quot;attribute&quot;&gt;insertAttributedString&lt;/span&gt;:[NSAttributedString &lt;span class=&quot;attribute&quot;&gt;attributedStringWithAttachment&lt;/span&gt;:&lt;span class=&quot;attribute&quot;&gt;emojiTextAttachment]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     atIndex&lt;/span&gt;:&lt;span class=&quot;attribute&quot;&gt;textView.selectedRange.location];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，就能在UITextView当前光标位置插入表情图片了。&lt;/p&gt;
&lt;h2 id=&quot;获取带有表情标志的文本字符串&quot;&gt;&lt;a href=&quot;#获取带有表情标志的文本字符串&quot; class=&quot;headerlink&quot; title=&quot;获取带有表情标志的文本字符串&quot;&gt;&lt;/a&gt;获取带有表情标志的文本字符串&lt;/h2&gt;&lt;h3 id=&quot;难点&quot;&gt;&lt;a href=&quot;#难点&quot; class=&quot;headerlink&quot; title=&quot;难点&quot;&gt;&lt;/a&gt;难点&lt;/h3&gt;&lt;p&gt;NSTextAttachment被插入到NSAttributedString中的时候，&lt;strong&gt;就被当成了一个字符处理！！！&lt;/strong&gt;。&lt;br&gt;就是说，只从UITextView的text中，是找不回文本里面不同的表情所对应的标志的！&lt;/p&gt;
&lt;h3 id=&quot;解决点&quot;&gt;&lt;a href=&quot;#解决点&quot; class=&quot;headerlink&quot; title=&quot;解决点&quot;&gt;&lt;/a&gt;解决点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;我们要能遍历出当前文本中所有的表情，也就是NSTextAttachment类。&lt;/li&gt;
&lt;li&gt;我们要能知道遍历出的表情，对应的标志是什么。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;遍历所有的NSTextAttachment类属性&quot;&gt;&lt;a href=&quot;#遍历所有的NSTextAttachment类属性&quot; class=&quot;headerlink&quot; title=&quot;遍历所有的NSTextAttachment类属性&quot;&gt;&lt;/a&gt;遍历所有的NSTextAttachment类属性&lt;/h3&gt;&lt;p&gt;遍历，嗯，先看看Apple有没有提供相应的方法，能遍历NSAttributedString（及其子类）的属性的。查阅文档：&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/index.html#//apple_ref/occ/instm/NSAttributedString&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSAttributedString Class Reference&lt;/a&gt;，可以找到这么一个方法：“&lt;strong&gt;- enumerateAttribute:inRange:options:usingBlock:&lt;/strong&gt;”，其原型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)enumerateAttribute:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)attrName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   inRange:(&lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt;)enumerationRange&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   options:(&lt;span class=&quot;built_in&quot;&gt;NSAttributedStringEnumerationOptions&lt;/span&gt;)opts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                usingBlock:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value, &lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt; range, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; *stop))block&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用处：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Executes &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; Block &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; specified attribute run &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; specified range.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，就是这个方法~就能遍历出NSTextAttachment对象了~&lt;/p&gt;
&lt;h3 id=&quot;创建NSTextAttachment的子类&quot;&gt;&lt;a href=&quot;#创建NSTextAttachment的子类&quot; class=&quot;headerlink&quot; title=&quot;创建NSTextAttachment的子类&quot;&gt;&lt;/a&gt;创建NSTextAttachment的子类&lt;/h3&gt;&lt;p&gt;如何绑定NSTextAttachment所表示的表情和与其对应的标志？创建子类嘛~直接在子类中增加属性，保存标志不就行了。&lt;br&gt;如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;EmojiTextAttachment &lt;/span&gt;: NSTextAttachment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(strong, nonatomic) NSString *emojiTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，这个时候，插入表情的代码应该就是下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EmojiTextAttachment *emojiTextAttachment = [EmojiTextAttachment new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//保存表情标志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emojiTextAttachment.emojiTag = emojiTag&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置表情图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emojiTextAttachment.image = emojiImage&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//插入表情&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[textView.textStorage insertAttributedString:[NSAttributedString attributedStringWithAttachment:emojiTextAttachment]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      atIndex:textView.selectedRange.location]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建NSAttributedString的Category&quot;&gt;&lt;a href=&quot;#创建NSAttributedString的Category&quot; class=&quot;headerlink&quot; title=&quot;创建NSAttributedString的Category&quot;&gt;&lt;/a&gt;创建NSAttributedString的Category&lt;/h3&gt;&lt;p&gt;最后，就是将这个遍历表情、拼接最终文本字符串的方法设置成NSAttributedString的自定义Category方法，以方便直接调用。&lt;br&gt;当然，这里面有些细节的处理，如替换表情标志时的字符串偏移量计算等，看代码吧。&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//NSAttributedString+EmojiExtension.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSAttributedString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;EmojiExtension&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)getPlainString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//NSAttributedString+EmojiExtension.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSAttributedString&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;EmojiExtension&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)getPlainString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//最终纯文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; *plainString = [&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; stringWithString:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.string];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//替换下标的偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; base = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; enumerateAttribute:&lt;span class=&quot;built_in&quot;&gt;NSAttachmentAttributeName&lt;/span&gt; inRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 usingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value, &lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt; range, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; *stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//检查类型是否是自定义NSTextAttachment类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value &amp;amp;&amp;amp; [value isKindOfClass:[EmojiTextAttachment class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;//替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        [plainString replaceCharactersInRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(range.location + base, range.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                    withString:((EmojiTextAttachment *) value).emojiTag];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;comment&quot;&gt;//增加偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        base += ((EmojiTextAttachment *) value).emojiTag.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; plainString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;直接调用getPlainString方法即可。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;其实本文也是来源于最近的项目需求，在网上一直找不到比较好的解决方案，就自己摸索出来一个。至于复杂的图文混合编辑，当然还是Core Text来的强大（自己也在学习中）~&lt;/p&gt;
&lt;p&gt;如果有更好地办法，一定要告诉我啊~~~&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextView_Class/#//apple_ref/occ/instp/UITextView/textStorage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UITextView Class Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/index.html#//apple_ref/occ/instm/NSAttributedString/enumerateAttribute:inRange:options:usingBlock:&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSAttributedString Class Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在iOS开发中，经常需要用UITextView作为编辑文本的输入控件。&lt;br&gt;但是如何在编辑时插入自定义表情呢？就是像发微博时那样？&lt;/p&gt;
&lt;p&gt;本文简单的用&lt;strong&gt;NSTextAttachment&lt;/strong&gt;、&lt;strong&gt;NSAttributedString&lt;/strong&gt;的特性，实现了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在UITextView中编辑文字时插入自定义表情图片&lt;/li&gt;
&lt;li&gt;同时可以返回带有表情“&lt;strong&gt;替换符&lt;/strong&gt;”的纯文本字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;&lt;p&gt;本文代码工程地址：&lt;a href=&quot;https://github.com/zekunyan/UITextViewDIYEmojiExample&quot;&gt;https://github.com/zekunyan/UITextViewDIYEmojiExample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/inputEmoji_Sample.gif&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>关于评论不见了=。=</title>
    <link href="http://tutuge.me/2015/03/06/%E5%85%B3%E4%BA%8E%E8%AF%84%E8%AE%BA%E4%B8%8D%E8%A7%81%E4%BA%86/"/>
    <id>http://tutuge.me/2015/03/06/关于评论不见了/</id>
    <published>2015-03-06T01:09:32.000Z</published>
    <updated>2016-03-20T09:04:03.000Z</updated>
    
    <content type="html">&lt;p&gt;前天升级了一次Hexo，原来的主题说啥也用不了了=。=（前端知识不足，正在补~）导致只能换主题，多说的评论就这样不见了。。。原来有留言的各位筒子，没看到，不好意思啊=。=&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前天升级了一次Hexo，原来的主题说啥也用不了了=。=（前端知识不足，正在补~）导致只能换主题，多说的评论就这样不见了。。。原来有留言的各位筒子，没看到，不好意思啊=。=&lt;/p&gt;

    
    </summary>
    
      <category term="其它" scheme="http://tutuge.me/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="杂烩" scheme="http://tutuge.me/tags/%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>Entity和Model的不同-关于代码的数据层</title>
    <link href="http://tutuge.me/2015/03/01/Entity%E5%92%8CModel%E7%9A%84%E4%B8%8D%E5%90%8C-%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%B1%82/"/>
    <id>http://tutuge.me/2015/03/01/Entity和Model的不同-关于代码的数据层/</id>
    <published>2015-03-01T15:03:10.000Z</published>
    <updated>2016-03-20T09:03:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经常都能在一些博客、文档中看到“&lt;strong&gt;Model&lt;/strong&gt;”、“&lt;strong&gt;Entity&lt;/strong&gt;”的字样。如&lt;strong&gt;MVC&lt;/strong&gt;模式中的“&lt;strong&gt;M就是Model&lt;/strong&gt;”，“&lt;strong&gt;MVVM对应的Model-View-ViewModel&lt;/strong&gt;”，数据库抽象层里面的“&lt;strong&gt;Model&lt;/strong&gt;“等。&lt;/p&gt;
&lt;p&gt;它们的区别到底是什么？&lt;/p&gt;
&lt;p&gt;其实没有真正官方的对Entity和Model的定义，在此我只是说说我自己的理解。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是Entity&quot;&gt;&lt;a href=&quot;#什么是Entity&quot; class=&quot;headerlink&quot; title=&quot;什么是Entity&quot;&gt;&lt;/a&gt;什么是&lt;strong&gt;Entity&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;先看看这个单词是什么意思：&lt;br&gt;&lt;a href=&quot;http://www.iciba.com/entity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;爱词霸&lt;/a&gt;：n: 实体，实际存在物，本质。&lt;/p&gt;
&lt;p&gt;在代码中，我们经常会遇到一些具有“&lt;strong&gt;现实&lt;/strong&gt;”意义的“&lt;strong&gt;个体&lt;/strong&gt;”，如一个用户，一首歌曲，一条评论等等，它们都是在逻辑上完整的一个整体，都具有相似的结构，但是却因为“&lt;strong&gt;属性&lt;/strong&gt;”的不同而不同。&lt;/p&gt;
&lt;p&gt;看看一个典型的Entity类：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Entity类定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class UserEntity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String name&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String address&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Entity对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserEntity john = new UserEntity()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;john.name = &lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;john.age = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;john.address = &lt;span class=&quot;string&quot;&gt;&quot;China Hubei Wuhan&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserEntity tom = new UserEntity()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tom.name = &lt;span class=&quot;string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tom.age = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tom.address = &lt;span class=&quot;string&quot;&gt;&quot;USA Californian&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entity类，或者说&lt;strong&gt;实体类&lt;/strong&gt;，代表了一种“个体”，类中的属性（就是各种变量）则是这个“个体”的具体体现。如UserEntity类，里面有name、age属性，就是说Entity类“&lt;strong&gt;描述&lt;/strong&gt;”了某种个体。&lt;/li&gt;
&lt;li&gt;Entity类的具体对象，代表了一个具体的实体，一般来说，在代码当中，一个具体的Entity类对象所代表的实体应当是唯一的。&lt;/li&gt;
&lt;li&gt;往往Entity类的定义跟数据库中的表定义是一一对应的。&lt;/li&gt;
&lt;li&gt;而Entity的具体对象往往对应数据库中的一行数据。&lt;/li&gt;
&lt;li&gt;Entity是代码中操作数据的“&lt;strong&gt;最小单元&lt;/strong&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什么是Model&quot;&gt;&lt;a href=&quot;#什么是Model&quot; class=&quot;headerlink&quot; title=&quot;什么是Model&quot;&gt;&lt;/a&gt;什么是Model&lt;/h2&gt;&lt;h3 id=&quot;各种用法&quot;&gt;&lt;a href=&quot;#各种用法&quot; class=&quot;headerlink&quot; title=&quot;各种用法&quot;&gt;&lt;/a&gt;各种用法&lt;/h3&gt;&lt;p&gt;其实很多时候，Model有如下几种用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当成Entity用，完全不具备其他业务逻辑代码。&lt;/li&gt;
&lt;li&gt;当成&lt;strong&gt;数据库接口层&lt;/strong&gt;，就是将数据库的读写，增删改查都封装在了Model中，往往就会有如“&lt;strong&gt;getUserByID&lt;/strong&gt;”这样的方法。&lt;/li&gt;
&lt;li&gt;当成纯粹的业务处理类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以仁者见仁，智者见智，其实都可以。&lt;/p&gt;
&lt;p&gt;在此说说我的认识。&lt;/p&gt;
&lt;h3 id=&quot;我的认识&quot;&gt;&lt;a href=&quot;#我的认识&quot; class=&quot;headerlink&quot; title=&quot;我的认识&quot;&gt;&lt;/a&gt;我的认识&lt;/h3&gt;&lt;p&gt;先看看Model单词的意思:&lt;br&gt;&lt;a href=&quot;http://www.iciba.com/model&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;爱词霸&lt;/a&gt;：n: 模型；模式；典型。&lt;/p&gt;
&lt;p&gt;既然是模型，而不是“数据”，所以我觉得，&lt;strong&gt;Model应该是利用Entity实体，来组合、处理、整合更上层、更抽象数据的类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还是基于上面的“&lt;strong&gt;UserEntity&lt;/strong&gt;”，看看下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserListModel&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; UserEntity[] users;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//构造函数，初始化用户列表等。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;UserEntity &lt;span class=&quot;title&quot;&gt;getUserByName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;String name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//查找...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; transformUserAddressFormat &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//转化地址格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是说，Entity还是原本的概念，只不过Model是基于Entity的更高层的数据抽象与处理。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;说实话，Entity、Model，它们的职责到底是什么，真的不好说明白，大家也就做个参考吧=。=&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3029952/ddd-and-mvc-difference-between-model-and-entity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DDD and MVC: Difference between ‘Model’ and ‘Entity’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://whatis.techtarget.com/definition/entity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Whatis.com Entity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogsh.de/2011/09/08/models-vs-entities&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Models vs. Entities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经常都能在一些博客、文档中看到“&lt;strong&gt;Model&lt;/strong&gt;”、“&lt;strong&gt;Entity&lt;/strong&gt;”的字样。如&lt;strong&gt;MVC&lt;/strong&gt;模式中的“&lt;strong&gt;M就是Model&lt;/strong&gt;”，“&lt;strong&gt;MVVM对应的Model-View-ViewModel&lt;/strong&gt;”，数据库抽象层里面的“&lt;strong&gt;Model&lt;/strong&gt;“等。&lt;/p&gt;
&lt;p&gt;它们的区别到底是什么？&lt;/p&gt;
&lt;p&gt;其实没有真正官方的对Entity和Model的定义，在此我只是说说我自己的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>一次审核被拒的经历-关于iCloud到底应该备份什么数据</title>
    <link href="http://tutuge.me/2015/02/28/%E4%B8%80%E6%AC%A1%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92%E7%9A%84%E7%BB%8F%E5%8E%86-%E5%85%B3%E4%BA%8EiCloud%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E5%A4%87%E4%BB%BD%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE/"/>
    <id>http://tutuge.me/2015/02/28/一次审核被拒的经历-关于iCloud到底应该备份什么数据/</id>
    <published>2015-02-28T10:18:11.000Z</published>
    <updated>2016-03-20T09:04:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;项目最近一次审核被拒了=。=&lt;br&gt;仔细看了一下后，发现是没有遵守“&lt;strong&gt;iOS Data Storage Guidelines&lt;/strong&gt;”。&lt;br&gt;在此总结一下。&lt;/p&gt;
&lt;h2 id=&quot;被拒原因&quot;&gt;&lt;a href=&quot;#被拒原因&quot; class=&quot;headerlink&quot; title=&quot;被拒原因&quot;&gt;&lt;/a&gt;被拒原因&lt;/h2&gt;&lt;p&gt;先看看被拒的反馈信息：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Apps must follow the iOS &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; Storage Guidelines &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; they will be rejected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;On&lt;/span&gt; launch &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; content download, your app stores &lt;span class=&quot;number&quot;&gt;12.14&lt;/span&gt; MB, which does &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; comply &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; the iOS &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; Storage Guidelines.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大致意思就是App下载东西以后，在iCloud里面查看此App需要备份的体积变大了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;再根据 &lt;a href=&quot;https://developer.apple.com/icloud/documentation/data-storage/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;iOS Data Storage Guidelines&lt;/strong&gt;&lt;/a&gt;的说明，得出几点重要信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有&lt;strong&gt;用户创建的，并且不能被App重现的文档、数据&lt;/strong&gt;，才应该被保存在“&lt;strong&gt;&lt;application_home&gt;/Documents&lt;/application_home&gt;&lt;/strong&gt;”路径下。&lt;/li&gt;
&lt;li&gt;可以重新产生、下载的数据可以放在“&lt;strong&gt;&lt;application_home&gt;/Library/Caches&lt;/application_home&gt;&lt;/strong&gt;”目录下，如用于缓存的数据库文件。&lt;/li&gt;
&lt;li&gt;纯粹用于缓存的数据可以放在“&lt;strong&gt;&lt;application_home&gt;/tmp&lt;/application_home&gt;&lt;/strong&gt;”目录下。&lt;/li&gt;
&lt;li&gt;可以通过对NSURL加参数，来保证特定的文件夹及其内容不被iCloud备份，也不会被清除，如Document文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以可以初步得出被拒的原因是因为App中下载的文件也被包含在iCloud备份当中了，而Apple审核人员觉得这些文件不应该被备份。&lt;/p&gt;
&lt;h3 id=&quot;真正应该备份的数据&quot;&gt;&lt;a href=&quot;#真正应该备份的数据&quot; class=&quot;headerlink&quot; title=&quot;真正应该备份的数据&quot;&gt;&lt;/a&gt;真正应该备份的数据&lt;/h3&gt;&lt;p&gt;所以，真正需要备份的文件是&lt;strong&gt;用户创建的，不能通过程序重新产生的&lt;/strong&gt;，如记事本应用中用户创建的文本数据，绘画应用中用户画的画等。&lt;/p&gt;
&lt;h2 id=&quot;解决当中遇到的坑&quot;&gt;&lt;a href=&quot;#解决当中遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;解决当中遇到的坑&quot;&gt;&lt;/a&gt;解决当中遇到的坑&lt;/h2&gt;&lt;p&gt;既然知道了原因，那就好办了。&lt;/p&gt;
&lt;p&gt;根据&lt;strong&gt;iOS Data Storage Guidelines&lt;/strong&gt;的简短说明，乍一看，&lt;strong&gt;&lt;application_home&gt;/Library/Caches&lt;/application_home&gt;&lt;/strong&gt;是存放可以重新产生、下载的数据。&lt;/p&gt;
&lt;p&gt;但是有个“陷阱”在这。&lt;/p&gt;
&lt;h3 id=&quot;系统可能清空的目录&quot;&gt;&lt;a href=&quot;#系统可能清空的目录&quot; class=&quot;headerlink&quot; title=&quot;系统可能清空的目录&quot;&gt;&lt;/a&gt;系统可能清空的目录&lt;/h3&gt;&lt;p&gt;根据官方文档“&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;File System Programming Guide&lt;/strong&gt;&lt;/a&gt;”可以整理出一下两个系统可能会清除的目录：（在储存空间不够时）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Library/Caches/&lt;/li&gt;
&lt;li&gt;tmp/&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，像App下载的歌曲等资源文件是不能放在上面两个目录中的。&lt;/p&gt;
&lt;h2 id=&quot;解决：&quot;&gt;&lt;a href=&quot;#解决：&quot; class=&quot;headerlink&quot; title=&quot;解决：&quot;&gt;&lt;/a&gt;解决：&lt;/h2&gt;&lt;p&gt;所以，为了保险起见，最靠谱的还是放在&lt;strong&gt;&lt;application_home&gt;/Documents&lt;/application_home&gt;&lt;/strong&gt;中，并且通过设置，不让iCloud备份。&lt;/p&gt;
&lt;p&gt;Apple已经提供了相应的函数，如下（iOS 5.1及以后的版本）：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)addSkipBackupAttributeToItemAtURL:(NSURL *)URL &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;[[NSFileManager defaultManager] fileExistsAtPath: [URL path]]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSError *&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  forKey: NSURLIsExcludedFromBackupKey &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;: &amp;amp;&lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!success)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Error excluding %@ from backup %@&quot;&lt;/span&gt;, [URL lastPathComponent], &lt;span class=&quot;built_in&quot;&gt;error&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;application_home&gt;/Documents&lt;/application_home&gt;&lt;/strong&gt;根目录也可以通过上面的函数设置成不备份。（如应用AVPlayer）&lt;/li&gt;
&lt;li&gt;设置是递归的，所以其所有子目录和文件都不用再设置一次，都会自动不被备份。（测试有效，但是不确定=。=，参考：&lt;a href=&quot;http://stackoverflow.com/questions/14376883/is-nsurlisexcludedfrombackupkey-recursive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;is-nsurlisexcludedfrombackupkey-recursive&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;多看官方说明=。=&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/icloud/documentation/data-storage/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS Data Storage Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/qa/qa1719/_index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How do I prevent files from being backed up to iCloud and iTunes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;File System Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;项目最近一次审核被拒了=。=&lt;br&gt;仔细看了一下后，发现是没有遵守“&lt;strong&gt;iOS Data Storage Guidelines&lt;/strong&gt;”。&lt;br&gt;在此总结一下。&lt;/p&gt;
&lt;h2 id=&quot;被拒原因&quot;&gt;&lt;a href=&quot;#被拒原因&quot; class=&quot;headerlink&quot; title=&quot;被拒原因&quot;&gt;&lt;/a&gt;被拒原因&lt;/h2&gt;&lt;p&gt;先看看被拒的反馈信息：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Apps must follow the iOS &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; Storage Guidelines &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; they will be rejected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;On&lt;/span&gt; launch &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; content download, your app stores &lt;span class=&quot;number&quot;&gt;12.14&lt;/span&gt; MB, which does &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; comply &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; the iOS &lt;span class=&quot;built_in&quot;&gt;Data&lt;/span&gt; Storage Guidelines.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大致意思就是App下载东西以后，在iCloud里面查看此App需要备份的体积变大了。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="审核" scheme="http://tutuge.me/tags/%E5%AE%A1%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Block类型变量-缓存Http请求与回调</title>
    <link href="http://tutuge.me/2015/02/19/Block%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F-%E7%BC%93%E5%AD%98Http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%9B%9E%E8%B0%83/"/>
    <id>http://tutuge.me/2015/02/19/Block类型变量-缓存Http请求与回调/</id>
    <published>2015-02-18T19:18:36.000Z</published>
    <updated>2016-03-20T09:02:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Objective-C中的Blocks实在是太好用了，有了它，我们就可以将“代码块”封装起来，当成变量使用、传递，所以，在Objective-C中，iOS中，许多的回调是用Block来完成的。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;我自己在之前的项目中，就遇到过一个问题。因为项目的需要，手机端所有的跟服务器的通信都需要“加密”，在经过一番调研后，我们使用的是类似OAuth机制（至于什么是OAuth，各位Google一下就明白了，大部分的公共API都用到了这种机制）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;缓存Http请求后的回调代码块&quot;&gt;&lt;a href=&quot;#缓存Http请求后的回调代码块&quot; class=&quot;headerlink&quot; title=&quot;缓存Http请求后的回调代码块&quot;&gt;&lt;/a&gt;缓存Http请求后的回调代码块&lt;/h3&gt;&lt;p&gt;既然是OAuth机制，就是说我们每次向服务器发起的请求，除了跟业务相关的参数，还需要带上AccessToken、UserToken这类的授权参数，而AccessToken在本次请求中是否会过期，在结果返回前是不知道的，所以，为了更好地用户体验，不至于让用户在某个时刻的操作，因为授权过期了而“没有响应”，我们的每次Http请求都必须缓存起来。&lt;/p&gt;
&lt;p&gt;这里的缓存可不是单单指缓存请求的参数、URL，更重要的是缓存Http请求成功或者失败时的“&lt;strong&gt;回调代码块&lt;/strong&gt;”。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;h3 id=&quot;AFNetworking的Get方法&quot;&gt;&lt;a href=&quot;#AFNetworking的Get方法&quot; class=&quot;headerlink&quot; title=&quot;AFNetworking的Get方法&quot;&gt;&lt;/a&gt;AFNetworking的Get方法&lt;/h3&gt;&lt;p&gt;在iOS的项目中，AFNetworking应该算是使用的最多的网络库了，它的Get请求的方法接口如下：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(AFHTTPRequestOperation *)&lt;/span&gt;GET:&lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;URLString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     parameters:&lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt;parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        success:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AFHTTPRequestOperation *operation, id responseObject)&lt;/span&gt;)success&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        failure:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AFHTTPRequestOperation *operation, NSError *error)&lt;/span&gt;)failure&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有四个参数，分别是Url、参数、成功的回调Block，失败的回调Block，看，这里，回调的代码块就被封装到了Block里面，并当成参数传入。&lt;/p&gt;
&lt;h3 id=&quot;再次封装&quot;&gt;&lt;a href=&quot;#再次封装&quot; class=&quot;headerlink&quot; title=&quot;再次封装&quot;&gt;&lt;/a&gt;再次封装&lt;/h3&gt;&lt;p&gt;介于AFNetworking只提供了最基本的Get、Post、Put这些方法，所以，我们往往根据业务的接口做了封装，如先定义了请求的类型枚举：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSUInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;HTTP_REQUEST_TYPE&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;ICG_GET&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;type&quot;&gt;ICG_POST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后定义了统一的请求入口与回调参数Block：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//请求成功后的回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^http_success)(id result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//请求失败后的回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^http_fail)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//统一的请求入口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;executeWithType:&lt;/span&gt;(HTTP_REQUEST_TYPE)type &lt;span class=&quot;string&quot;&gt;api:&lt;/span&gt;(NSString *)api&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;             parameters:&lt;/span&gt;(NSDictionary *)parameters &lt;span class=&quot;string&quot;&gt;success:&lt;/span&gt;(http_success)success &lt;span class=&quot;string&quot;&gt;fail:&lt;/span&gt;(http_fail)fail &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//为每个请求增加AccessToken、UserToken等公共参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//缓存Http请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//根据type区分具体是哪一种Http请求。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ICG_GET:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [HttpUtil &lt;span class=&quot;string&quot;&gt;get:&lt;/span&gt;url &lt;span class=&quot;string&quot;&gt;parameters:&lt;/span&gt;paras &lt;span class=&quot;string&quot;&gt;success:&lt;/span&gt;success &lt;span class=&quot;string&quot;&gt;fail:&lt;/span&gt;fail];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ICG_POST:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [HttpUtil &lt;span class=&quot;string&quot;&gt;post:&lt;/span&gt;url &lt;span class=&quot;string&quot;&gt;parameters:&lt;/span&gt;paras &lt;span class=&quot;string&quot;&gt;success:&lt;/span&gt;success &lt;span class=&quot;string&quot;&gt;fail:&lt;/span&gt;fail];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;        default:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;再次封装的好处&quot;&gt;&lt;a href=&quot;#再次封装的好处&quot; class=&quot;headerlink&quot; title=&quot;再次封装的好处&quot;&gt;&lt;/a&gt;再次封装的好处&lt;/h3&gt;&lt;p&gt;为什么要再次做封装，将基本的Http请求统一入口？道理很简单，就是为了能方便的对每次请求增加额外的处理，并且对上层调用透明。如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统一为每个请求增加Log。&lt;/li&gt;
&lt;li&gt;统一为每个请求增加如AccessToken这些额外的参数。&lt;/li&gt;
&lt;li&gt;方便对Http请求做缓存！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;缓存Http请求的数据结构&quot;&gt;&lt;a href=&quot;#缓存Http请求的数据结构&quot; class=&quot;headerlink&quot; title=&quot;缓存Http请求的数据结构&quot;&gt;&lt;/a&gt;缓存Http请求的数据结构&lt;/h3&gt;&lt;p&gt;既然我们已经有了统一的请求入口，为了缓存，所需要做的就是将能代表一次请求的所有参数缓存起来就行了，如URL、请求参数等，如下数据结构：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;RequestHolder &lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//URL地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(strong, nonatomic) NSString *url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(strong, nonatomic) NSMutableDictionary *paras;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//请求类型，如Get、Post&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(assign, nonatomic) HTTP_REQUEST_TYPE type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//请求成功回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(copy) http_success success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//请求失败回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(copy) http_fail fail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这几个参数，就可以完整的“代表、重现”一次具体的Http请求。&lt;/p&gt;
&lt;h3 id=&quot;如何缓存&quot;&gt;&lt;a href=&quot;#如何缓存&quot; class=&quot;headerlink&quot; title=&quot;如何缓存&quot;&gt;&lt;/a&gt;如何缓存&lt;/h3&gt;&lt;p&gt;只要App开启，Http请求就会不停地产生，会有源源不断的请求，难道我们把每次请求都缓存起来？&lt;/p&gt;
&lt;p&gt;全部都缓存肯定是不行的，所以我们需要一个缓存策略。&lt;/p&gt;
&lt;p&gt;一个App中，所有的Http请求的路径，也就是Url，不包括参数，应该是数量固定的，如“/user, /comment”，并且，一个请求往往对应的操作、功能也是唯一的，所以，完全可以以请求的&lt;strong&gt;Url&lt;/strong&gt;为&lt;strong&gt;Key&lt;/strong&gt;，以本次请求的“&lt;strong&gt;RequestHolder&lt;/strong&gt;”为&lt;strong&gt;Value&lt;/strong&gt;，用Objective-C中的NSDictionary来缓存Http请求。&lt;/p&gt;
&lt;p&gt;所以，缓存请求的方法大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//缓存Http请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;attribute&quot;&gt;cacheHttpRequest&lt;/span&gt;:(HTTP_REQUEST_TYPE)type &lt;span class=&quot;attribute&quot;&gt;url&lt;/span&gt;:(NSString *)&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;parameters&lt;/span&gt;:(NSMutableDictionary *)parameters &lt;span class=&quot;attribute&quot;&gt;success&lt;/span&gt;:(http_success)success &lt;span class=&quot;attribute&quot;&gt;fail&lt;/span&gt;:(http_fail)&lt;span class=&quot;decorator&quot;&gt;fail&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//创建缓存数据结构，保存本次请求的参数、回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ICGRequestHolder *requestHolder = [ICGRequestHolder &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestHolder.url = &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestHolder.paras = parameters;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestHolder.success = [success copy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestHolder.fail = [fail copy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestHolder.type = type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//保存本次请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_operationQueue &lt;span class=&quot;attribute&quot;&gt;addOperationWithBlock&lt;/span&gt;:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cachedRequests[&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;] = requestHolder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，就能完整的缓存Http请求了。&lt;/p&gt;
&lt;h3 id=&quot;从缓存中恢复Http请求&quot;&gt;&lt;a href=&quot;#从缓存中恢复Http请求&quot; class=&quot;headerlink&quot; title=&quot;从缓存中恢复Http请求&quot;&gt;&lt;/a&gt;从缓存中恢复Http请求&lt;/h3&gt;&lt;p&gt;恢复请求很简单，直接遍历所有缓存的请求，再次发起Http请求即可，就不再贴代码了。&lt;/p&gt;
&lt;h3 id=&quot;删除成功的Http请求&quot;&gt;&lt;a href=&quot;#删除成功的Http请求&quot; class=&quot;headerlink&quot; title=&quot;删除成功的Http请求&quot;&gt;&lt;/a&gt;删除成功的Http请求&lt;/h3&gt;&lt;p&gt;缓存的目的是在请求失败时，如AccessToken超时时，我们可以在重新获取AccessToken后重现上次失败的请求，所以，一旦请求成功时，我们还需要将成功的请求删除，当然，也是利用Url，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;attribute&quot;&gt;removeRequestForKey&lt;/span&gt;:(NSString *)&lt;span class=&quot;decorator&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//放入队列执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_operationQueue &lt;span class=&quot;attribute&quot;&gt;addOperationWithBlock&lt;/span&gt;:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//删除Url对应的请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_cachedRequests &lt;span class=&quot;attribute&quot;&gt;removeObjectForKey&lt;/span&gt;:&lt;span class=&quot;attribute&quot;&gt;url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文只是简单地利用Objective-C中的Block特性，实现了Http请求的缓存。目的不是介绍Block，是为了分享我自己在项目中运用Block的例子，如果读者有更好的方法，欢迎留言啊~~&lt;/p&gt;
&lt;h2 id=&quot;参考、推荐阅读&quot;&gt;&lt;a href=&quot;#参考、推荐阅读&quot; class=&quot;headerlink&quot; title=&quot;参考、推荐阅读&quot;&gt;&lt;/a&gt;参考、推荐阅读&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with Blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Objective-C中的Blocks实在是太好用了，有了它，我们就可以将“代码块”封装起来，当成变量使用、传递，所以，在Objective-C中，iOS中，许多的回调是用Block来完成的。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;我自己在之前的项目中，就遇到过一个问题。因为项目的需要，手机端所有的跟服务器的通信都需要“加密”，在经过一番调研后，我们使用的是类似OAuth机制（至于什么是OAuth，各位Google一下就明白了，大部分的公共API都用到了这种机制）。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>提升UITableView性能-复杂页面的优化</title>
    <link href="http://tutuge.me/2015/02/19/%E6%8F%90%E5%8D%87UITableView%E6%80%A7%E8%83%BD-%E5%A4%8D%E6%9D%82%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://tutuge.me/2015/02/19/提升UITableView性能-复杂页面的优化/</id>
    <published>2015-02-18T17:28:41.000Z</published>
    <updated>2016-03-20T09:04:07.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着App的用户界面的内容越来越丰富，再强的手机可能都无法同时渲染复杂的UI界面和保证流畅的体验。所以，我们这些程序猿=。=在写代码的时候就要注意，如何尽可能提高用户的操作流畅性。&lt;/p&gt;
&lt;p&gt;之前的做的项目，&lt;a href=&quot;https://itunes.apple.com/us/app/qing-ju-yin-le-quan-guo-zui/id913235479?l=zh&amp;amp;ls=1&amp;amp;mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;青桔音乐iOS客户端&lt;/a&gt;里面的首页就是一个类似微信朋友圈的“动态”页面，大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_speed_up_uitableview_1_1.png?imageView2/0/h/300&quot; alt=&quot;青桔动态页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是你，你会怎么实现这个页面呢？&lt;/p&gt;
&lt;p&gt;这还用问，当然是用UITableView+自定义的UITableViewCell。&lt;/p&gt;
&lt;p&gt;UITableView是可以滑动的，为了不让用户在滑动中感到有卡顿，该如何优化？下面，我就写一下我自己在做项目时的“经验”~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h2&gt;&lt;p&gt;主要分为以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只定义一种Cell。&lt;/li&gt;
&lt;li&gt;提前计算并缓存每个Cell的高度。&lt;/li&gt;
&lt;li&gt;提前创建真正显示的、需要加工的数据并缓存。&lt;/li&gt;
&lt;li&gt;缓存View！&lt;/li&gt;
&lt;li&gt;其它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;只定义一种Cell&quot;&gt;&lt;a href=&quot;#只定义一种Cell&quot; class=&quot;headerlink&quot; title=&quot;只定义一种Cell&quot;&gt;&lt;/a&gt;只定义一种Cell&lt;/h3&gt;&lt;p&gt;乍一看，这个界面至少有3种样式的Cell，为什么只定义一种呢？&lt;/p&gt;
&lt;h4 id=&quot;分析结构&quot;&gt;&lt;a href=&quot;#分析结构&quot; class=&quot;headerlink&quot; title=&quot;分析结构&quot;&gt;&lt;/a&gt;分析结构&lt;/h4&gt;&lt;p&gt;仔细分析一下，页面中每个Cell的内容都有头像、标题、正文、评论、其它（歌曲、图片、歌手）。所以，从整体上看，每个Cell的结构是一致的！&lt;/p&gt;
&lt;h4 id=&quot;重用-大致固定数量的Cell&quot;&gt;&lt;a href=&quot;#重用-大致固定数量的Cell&quot; class=&quot;headerlink&quot; title=&quot;重用=大致固定数量的Cell&quot;&gt;&lt;/a&gt;重用=大致固定数量的Cell&lt;/h4&gt;&lt;p&gt;并且，凡是认真研究过UITableView的人应该都知道，Apple已经为我们提供了Cell的重用，如用“&lt;strong&gt;registerNib:forCellReuseIdentifier&lt;/strong&gt;”方法注册自定义Cell的Nib，然后在“&lt;strong&gt;cellForRowAtIndexPath&lt;/strong&gt;”的时候用“&lt;strong&gt;dequeueReusableCellWithIdentifier&lt;/strong&gt;”获取可以重用的Cell，所以，无论UITableView要显示内容有多少，真正创建出的Cell可能只有5、6个。&lt;/p&gt;
&lt;p&gt;所以，我们完全可以只创建一种Cell，虽然这样一个Cell的“体积”可能会很大，但是介于Cell的数量不会很多，所以完全可以接受。&lt;/p&gt;
&lt;h5 id=&quot;只定义一种Cell的好处&quot;&gt;&lt;a href=&quot;#只定义一种Cell的好处&quot; class=&quot;headerlink&quot; title=&quot;只定义一种Cell的好处&quot;&gt;&lt;/a&gt;&lt;strong&gt;只定义一种Cell的好处&lt;/strong&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;减少代码量，减少Nib文件的数量，统一一个Nib文件定义Cell，容易修改、维护。&lt;/li&gt;
&lt;li&gt;基于Cell的重用，真正运行时铺满屏幕所需的Cell数量大致是固定的，设为&lt;strong&gt;N&lt;/strong&gt;个。所以如果如果只有一种Cell，那就是只有&lt;strong&gt;N&lt;/strong&gt;个Cell的实例；但是如果有&lt;strong&gt;M&lt;/strong&gt;种Cell，那么运行时最多可能会是“&lt;strong&gt;M x N = MN&lt;/strong&gt;”个Cell的实例，虽然可能并不会占用太多内存，但是能少点不是更好吗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;善用hidden隐藏（显示）Subview&quot;&gt;&lt;a href=&quot;#善用hidden隐藏（显示）Subview&quot; class=&quot;headerlink&quot; title=&quot;善用hidden隐藏（显示）Subview&quot;&gt;&lt;/a&gt;善用hidden隐藏（显示）Subview&lt;/h4&gt;&lt;p&gt;既然只定义一种Cell，那该如何显示不同类型的内容呢？&lt;br&gt;答案就是，把所有不同类型的view都定义好，放在cell里面，通过hidden显示、隐藏，来显示不同类型的内容。如下图定义Cell：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_speed_up_uitableview_1_2.jpg?imageView2/0/h/400&quot; alt=&quot;Cell示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中的Subview1、Subview2、Subview3就是不同类型Cell的不同之处，所以我们在“&lt;strong&gt;cellForRowAtIndexPath&lt;/strong&gt;”函数中，设置Cell的样式、内容时，就可以通过显示、隐藏这三个子view来显示。&lt;/p&gt;
&lt;p&gt;毕竟，在用户快速滑动中，只是单纯的显示、隐藏subview比实时创建要快得多。&lt;/p&gt;
&lt;h3 id=&quot;提前计算并缓存每个Cell的高度&quot;&gt;&lt;a href=&quot;#提前计算并缓存每个Cell的高度&quot; class=&quot;headerlink&quot; title=&quot;提前计算并缓存每个Cell的高度&quot;&gt;&lt;/a&gt;提前计算并缓存每个Cell的高度&lt;/h3&gt;&lt;p&gt;开发过Android，用过Android的ListView以后，对UITableView需要提前计算Cell的高度很不适应。=。=&lt;/p&gt;
&lt;p&gt;首先要确定的是，在iOS中，系统会先调用“&lt;strong&gt;tableView:heightForRowAtIndexPath:&lt;/strong&gt;”获取每个Cell即将显示的高度，从而确定整个UITableView的布局。然后才调用“&lt;strong&gt;tableView:cellForRowAtIndexPath&lt;/strong&gt;”获取每个Cell，我们也是在这里填充、设置Cell的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，既然高度总会被用到，那就早早的在获取数据时就计算好吧！&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;在Model（Entity）中计算并保存Cell的高度&quot;&gt;&lt;a href=&quot;#在Model（Entity）中计算并保存Cell的高度&quot; class=&quot;headerlink&quot; title=&quot;在Model（Entity）中计算并保存Cell的高度&quot;&gt;&lt;/a&gt;在Model（Entity）中计算并保存Cell的高度&lt;/h4&gt;&lt;p&gt;其实，在Model（Entity）中保存UI的参数是很奇怪的=。=（最好放在ViewModel中，就是MVVM模式的），我们的Entity可能就是下面的样子：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataEntity&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Cell 高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; cellHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)calculateCellHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，就不用在“&lt;strong&gt;tableView:heightForRowAtIndexPath:&lt;/strong&gt;”中每次都计算了。&lt;/p&gt;
&lt;h3 id=&quot;提前创建真正显示的、需要加工的数据并缓存&quot;&gt;&lt;a href=&quot;#提前创建真正显示的、需要加工的数据并缓存&quot; class=&quot;headerlink&quot; title=&quot;提前创建真正显示的、需要加工的数据并缓存&quot;&gt;&lt;/a&gt;提前创建真正显示的、需要加工的数据并缓存&lt;/h3&gt;&lt;p&gt;Cell中显示的内容，很多时候可能并不是直接从服务器拿到的数据，而是经过“加工”的数据。如本文中的“动态”也，每个Cell的标题、正文都有可点击的连接Link、表情图片等富文本内容，而我们一般用NSAttributeString类来显示。&lt;/p&gt;
&lt;p&gt;既然每次都会用到，倒不如在获取到数据的时候就创建、加工好这些内容，等到需要现实的时候，直接拿来用不就行了。&lt;/p&gt;
&lt;p&gt;所以，我们的Entity类可能变成下面这个样子:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataEntity&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Cell 高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; cellHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//真正显示的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSAttributedString&lt;/span&gt; *showTitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSAttributedString&lt;/span&gt; *showContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)calculateCellHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建、加工真正显示的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupShowTitileAndContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，在“&lt;strong&gt;tableView:cellForRowAtIndexPath&lt;/strong&gt;”中，我们直接拿showTitle、showContent来显示就好，不用再创建。&lt;/p&gt;
&lt;h3 id=&quot;缓存View&quot;&gt;&lt;a href=&quot;#缓存View&quot; class=&quot;headerlink&quot; title=&quot;缓存View!&quot;&gt;&lt;/a&gt;缓存View!&lt;/h3&gt;&lt;p&gt;什么？缓存View？！&lt;/p&gt;
&lt;p&gt;是的，当Cell中的部分View是非常独立的，并且不便于重用的，而且“体积”非常小，在内存可控的前提下，我们完全可以将这些view缓存起来！&lt;/p&gt;
&lt;p&gt;方法当然也是将缓存的view放在Entity中~。&lt;/p&gt;
&lt;h3 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h3&gt;&lt;p&gt;当然，还有其他的优化方法，简单说一说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量设置Cell的view为opaque，避免GPU对Cell下面的内容也进行绘制。&lt;/li&gt;
&lt;li&gt;避免大量的图片缩放、颜色渐变等。&lt;/li&gt;
&lt;li&gt;避免同步的从网络、文件获取数据（这个是必须的=。=）&lt;/li&gt;
&lt;li&gt;用shadowPath创建阴影。&lt;/li&gt;
&lt;li&gt;尽量减少subview的数量，如多用drawRect绘制元素，替代用view显示。&lt;/li&gt;
&lt;li&gt;尽量显示“&lt;strong&gt;大小刚好合适&lt;/strong&gt;”的图片资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;总的来说，就是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存一切可以缓存的！就是“用空间替换时间”！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UITableView的Delegate、DataSource方法中，减少任何不必要的操作&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考，推荐阅读&quot;&gt;&lt;a href=&quot;#参考，推荐阅读&quot; class=&quot;headerlink&quot; title=&quot;参考，推荐阅读&quot;&gt;&lt;/a&gt;参考，推荐阅读&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/31166/25-ios-app-performance-tips-tricks#tableviews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;25 iOS App Performance Tips &amp;amp; Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1352479/tricks-for-improving-iphone-uitableview-scrolling-performance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tricks for improving iPhone UITableView scrolling performance?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6172158/how-can-i-speed-up-a-uitableview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How can I speed up a UITableView?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着App的用户界面的内容越来越丰富，再强的手机可能都无法同时渲染复杂的UI界面和保证流畅的体验。所以，我们这些程序猿=。=在写代码的时候就要注意，如何尽可能提高用户的操作流畅性。&lt;/p&gt;
&lt;p&gt;之前的做的项目，&lt;a href=&quot;https://itunes.apple.com/us/app/qing-ju-yin-le-quan-guo-zui/id913235479?l=zh&amp;amp;ls=1&amp;amp;mt=8&quot;&gt;青桔音乐iOS客户端&lt;/a&gt;里面的首页就是一个类似微信朋友圈的“动态”页面，大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_speed_up_uitableview_1_1.png?imageView2/0/h/300&quot; alt=&quot;青桔动态页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是你，你会怎么实现这个页面呢？&lt;/p&gt;
&lt;p&gt;这还用问，当然是用UITableView+自定义的UITableViewCell。&lt;/p&gt;
&lt;p&gt;UITableView是可以滑动的，为了不让用户在滑动中感到有卡顿，该如何优化？下面，我就写一下我自己在做项目时的“经验”~&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="性能" scheme="http://tutuge.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>NSString的Copy与内存分配</title>
    <link href="http://tutuge.me/2015/02/18/NSString%E7%9A%84Copy%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <id>http://tutuge.me/2015/02/18/NSString的Copy与内存分配/</id>
    <published>2015-02-18T09:00:47.000Z</published>
    <updated>2016-03-20T09:03:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不管是用什么语言开发，字符串应该算是用的最多的了。在Objective-C中，字符串类是NSString，以及其子类NSMutableString等。所以，对于字符串类，编程语言、编译器等往往会做特殊处理。下面我就说说我自己在项目中发现的NSString的“奇怪”的地方。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;字符串常量，copy，mutableCopy&quot;&gt;&lt;a href=&quot;#字符串常量，copy，mutableCopy&quot; class=&quot;headerlink&quot; title=&quot;字符串常量，copy，mutableCopy&quot;&gt;&lt;/a&gt;字符串常量，copy，mutableCopy&lt;/h2&gt;&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;p&gt;先看看如下面的代码，猜猜会输出什么：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str1 = &lt;span class=&quot;string&quot;&gt;@&quot;abc&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str2 = &lt;span class=&quot;string&quot;&gt;@&quot;abc&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str3 = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithString:&lt;span class=&quot;string&quot;&gt;@&quot;abc&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str4 = [str1 &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str5 = [str1 mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出内存中的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;str1: %p&quot;&lt;/span&gt;, str1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;str2: %p&quot;&lt;/span&gt;, str2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;str3: %p&quot;&lt;/span&gt;, str3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;str4: %p&quot;&lt;/span&gt;, str4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;str5: %p&quot;&lt;/span&gt;, str5);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接给出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//地址值由运行时决定，不唯一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;str1:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x10cd12040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;str2:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x10cd12040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;str3:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x10cd12040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;str4:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x10cd12040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;str5:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x7f874b508350&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//mutable copy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，是不是很“神奇”。&lt;/p&gt;
&lt;h3 id=&quot;简单解释&quot;&gt;&lt;a href=&quot;#简单解释&quot; class=&quot;headerlink&quot; title=&quot;简单解释&quot;&gt;&lt;/a&gt;简单解释&lt;/h3&gt;&lt;p&gt;NSString是“不可变（immutable）”的类型，这个是关键。&lt;br&gt;代码中的“@”开头的字符串，其实就是一个字符串常量，运行时会检测这个字符串是否已经存在，存在的话，就直接将这个字符串的地址赋给变量；不存在的话，则创建，再赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一行&lt;/strong&gt;: “abc”字符串不存在，创建，取得字符串地址“0x10cd12040”，赋给str1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二行&lt;/strong&gt;: “abc”字符串已经存在，直接将地址“0x10cd12040”赋给str2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三行&lt;/strong&gt;: （记住，NSString是不可变的）alloc并不会分配新的内存，直接将字符串地址“0x10cd12040”赋给str3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四行&lt;/strong&gt;: copy，既然是不可变的，也就没有必要分配新内存，直接将地址“0x10cd12040”赋给str4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五行&lt;/strong&gt;: mutableCopy其实就是创建一个NSMutableString的实例，既然是“可变（mutable）”的类型了，当然要分配新的内存，所以，字符串的地址也变成新的“0x7f874b508350”。&lt;/p&gt;
&lt;p&gt;可以这么说，编译器、runtime充分利用了NSString是“&lt;strong&gt;不可变（immutable）&lt;/strong&gt;”类型这个特点，只要字符串内容一致，就不会分配新的内存储存，字符串在程序中使用量非常大，这么做无疑可以大大节省内存，提升性能。&lt;/p&gt;
&lt;h2 id=&quot;Property-和-NSString&quot;&gt;&lt;a href=&quot;#Property-和-NSString&quot; class=&quot;headerlink&quot; title=&quot;Property 和 NSString&quot;&gt;&lt;/a&gt;Property 和 NSString&lt;/h2&gt;&lt;p&gt;先来看看一个UserEntity类：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//UserEntity.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;UserEntity &lt;/span&gt;: NSObject &amp;lt;NSCopying&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(strong, nonatomic) NSString *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有一个名为name的NSString类型Property。&lt;br&gt;相信大家对这个不陌生吧。一般我们的应用中会有很多Entity类型，每个Entity类里面肯定避免不了有许多NSString的字符串类型。这里的name的属性是：strong和nonatomic，strong表明name要“持有”一份name所指的字符串的引用，nonatomic表示property类型不用加锁。&lt;/p&gt;
&lt;p&gt;接着咱们看看下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UserEntity *userEntity = [UserEntity new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建mutable类型的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableString *showName = [[NSMutableString &lt;span class=&quot;keyword&quot;&gt;alloc&lt;/span&gt;] initWithString:@&lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//先保存“tutuge”字符串到userEntity的name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userEntity.name = showName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//修改showName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[showName appendString:@&lt;span class=&quot;string&quot;&gt;&quot; blog&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出userEntity的name属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Name: %@&quot;&lt;/span&gt;, userEntity.name)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;猜猜会输出什么？&lt;/p&gt;
&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Name:&lt;/span&gt; tutuge blog&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，我们明明是保存的“tutuge”，怎么到后面输出的是“tutuge blog”？&lt;/p&gt;
&lt;h3 id=&quot;让NSString类型的Property为Copy型&quot;&gt;&lt;a href=&quot;#让NSString类型的Property为Copy型&quot; class=&quot;headerlink&quot; title=&quot;让NSString类型的Property为Copy型&quot;&gt;&lt;/a&gt;让NSString类型的Property为Copy型&lt;/h3&gt;&lt;p&gt;因为name的Property属性是strong的，所以赋值后，它跟showName均指向同一个NSMutableString实例，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_nsstring_copy_1_1.jpg&quot; alt=&quot;内存示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以改变了showName，当然name输出的值也就变了。&lt;br&gt;这个时候，name的property属性就不能是strong了，应该是copy，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//UserEntity.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;UserEntity &lt;/span&gt;: NSObject &amp;lt;NSCopying&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(copy, nonatomic) NSString *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的话，当“&lt;strong&gt;userEntity.name = showName;&lt;/strong&gt;”这句运行后，内存布局如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_nsstring_copy_1_2.jpg&quot; alt=&quot;内存示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样，就避免了这个问题。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;很所时候，代码并不是看上去那样“运行”的，多试试，多查阅资料，就能了解其中的奥秘了~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不管是用什么语言开发，字符串应该算是用的最多的了。在Objective-C中，字符串类是NSString，以及其子类NSMutableString等。所以，对于字符串类，编程语言、编译器等往往会做特殊处理。下面我就说说我自己在项目中发现的NSString的“奇怪”的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>利用NSProxy实现消息转发-模块化的网络接口层设计-原创</title>
    <link href="http://tutuge.me/2015/02/16/%E5%88%A9%E7%94%A8NSProxy%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E5%B1%82%E8%AE%BE%E8%AE%A1-%E5%8E%9F%E5%88%9B/"/>
    <id>http://tutuge.me/2015/02/16/利用NSProxy实现消息转发-模块化的网络接口层设计-原创/</id>
    <published>2015-02-16T10:52:08.000Z</published>
    <updated>2016-03-20T09:04:05.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2015-12-21: 其实用Category按照业务拆分网络请求接口的代码也是非常棒的，目前我自己就是这么做的=。=，文章就当做熟悉下NSProxy吧~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在做项目的时候，所有业务的网络接口方法，全部都写在了一个文件里面，一开始还好，毕竟每个方法的代码也只是十几行，增加、修改也比较容易。但是随着接口的增多，这个文件慢慢居然超过了1000行，里面几十个方法都写在一起，实在是不好维护。&lt;/p&gt;
&lt;p&gt;虽然保持这样也没有什么，多用用Cmd+F就能找到。但是，真是越看越不顺眼😳， 代码一定要有“美感”啊~😝&lt;/p&gt;
&lt;p&gt;所以在查阅了大量文章后，终于想出了本文即将说明的办法，越发觉得Objective-C的“消息”机制是多么的赞~😚&lt;/p&gt;
&lt;h2 id=&quot;Github-示例&quot;&gt;&lt;a href=&quot;#Github-示例&quot; class=&quot;headerlink&quot; title=&quot;Github 示例&quot;&gt;&lt;/a&gt;Github 示例&lt;/h2&gt;&lt;p&gt;贴上本文中的示例工程：&lt;a href=&quot;https://github.com/zekunyan/HttpProxyExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zekunyan/HttpProxyExample&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;先抛出问题。&lt;/p&gt;
&lt;p&gt;一款互联网应用，免不了要跟服务器打交道，在iOS项目中，最有名的网络库应该就是&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking&lt;/a&gt;了。所以，很多人就会利用AFnetworking提供的Get、Post等基本Http请求接口，封装自己的网络接口层代码，我自己在项目中也是这么做的。&lt;/p&gt;
&lt;p&gt;但是，AFNetworking只是提供了Get、Post、Json传输等基本的Http请求方法，所以一旦落实到具体的业务相关的请求上，我们要为每个请求（URL）都写一个单独的接口方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么，问题就来了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;业务相关的接口那么多，举个例子，什么“通过用户ID获取用户基本信息”、“获取用户的所有评论”等，每个请求都是一个方法，这么多方法该怎么组织呢？全部放在一起？那这个接口类岂不是会非常乱？不放在一起？那岂不是会有很多个网络请求类？(至于要不要统一接口入口，我想这个根据项目来决定吧=。=)&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有网络接口都从统一的类调用，如HttpProxy。&lt;/li&gt;
&lt;li&gt;网络接口的具体实现，按照业务划分到不同的类中，如“&lt;strong&gt;UserHttpHandler&lt;/strong&gt;”、“&lt;strong&gt;CommentHttpHandler&lt;/strong&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实，按照面向对象的原则，就是接口代理类&lt;strong&gt;HttpProxy&lt;/strong&gt;拥有若干个按照业务划分的接口（Interface），这些接口的所有方法组成了网络层的不同的Http请求。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_http_proxy_1_1.jpg&quot; alt=&quot;请求示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么，调用的时候，所有接口都用HttpProxy调用，如：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实际调用的是UserHttpHandler类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[HttpProxy sharedInstance]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;getUserWithID&lt;/span&gt;:@&lt;span class=&quot;selector-tag&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//实际调用的是CommentHttpHandler类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[HttpProxy sharedInstance]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;getCommentsWithDate&lt;/span&gt;:&lt;span class=&quot;selector-tag&quot;&gt;date&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关键&quot;&gt;&lt;a href=&quot;#关键&quot; class=&quot;headerlink&quot; title=&quot;关键&quot;&gt;&lt;/a&gt;关键&lt;/h2&gt;&lt;p&gt;根据前面的描述，我们可以得出，关键就是：&lt;strong&gt;消息转发（Message Forward）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Objective-C里面没有我们传统的“方法调用”，取而代之的是“消息”，所有的方法都是通过向对象发送“消息”实现调用的。而这个机制，也就为我们的实现提供了方便。&lt;/p&gt;
&lt;p&gt;也就是说：我们要将发给“&lt;strong&gt;HttpProxy&lt;/strong&gt;”的消息，让HttpProxy转发给真正能接受这个消息的对象，HttpProxy就是个&lt;strong&gt;代理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;苹果已经给我们提供了这个“代理”类了-NSProxy。&lt;/p&gt;
&lt;h2 id=&quot;NSProxy&quot;&gt;&lt;a href=&quot;#NSProxy&quot; class=&quot;headerlink&quot; title=&quot;NSProxy&quot;&gt;&lt;/a&gt;NSProxy&lt;/h2&gt;&lt;p&gt;什么是NSProxy：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSProxy没有父类，是顶级类(根类)，跟NSObject同等地位。&lt;/li&gt;
&lt;li&gt;NSProxy和NSObject都实现了“&lt;strong&gt;NSObject&lt;/strong&gt; Protocol”。&lt;/li&gt;
&lt;li&gt;NSProxy设计时就是以“抽象类”设计的，专门为&lt;strong&gt;转发消息&lt;/strong&gt;而生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承NSProxy的子类要实现自己的初始化方法，如“init”、“initWith”。&lt;/li&gt;
&lt;li&gt;重写&lt;code&gt;- forwardInvocation:&lt;/code&gt;和&lt;code&gt;- methodSignatureForSelector:&lt;/code&gt;方法，完成消息转发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细内容参考Apple的&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/index.html#//apple_ref/occ/instm/NSProxy/forwardInvocation:&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;先不管HttpProxy，咱们看看具体的接口，先举两个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//UserHttpHandler.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//用户相关接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@protocol&lt;/span&gt; UserHttpHandler &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)&lt;span class=&quot;attribute&quot;&gt;getUserWithID&lt;/span&gt;:(NSNumber *)userID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//CommentHttpHandler.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//评论相关接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@protocol&lt;/span&gt; CommentHttpHandler &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)&lt;span class=&quot;attribute&quot;&gt;getCommentsWithDate&lt;/span&gt;:(NSDate *)date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好的，接口有了，我们的HttpProxy类应该“实现”了这两个接口。&lt;br&gt;然后，最好是单例类，所以还要有个获取单例的方法。&lt;br&gt;最后，还需要一个向HttpProxy注册具体实现了接口Protocol的方法。&lt;/p&gt;
&lt;p&gt;所以，HttpProxy应该是这个样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//HttpProxy.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1. 继承了NSproxy。 2. “实现”了网络接口Protocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;HttpProxy :&lt;/span&gt; NSProxy &amp;lt;UserHttpHandler, CommentHttpHandler&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取单例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)sharedInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//注册具体实现类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;registerHttpProtocol:&lt;/span&gt;(Protocol *)httpProtocol &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;(id)handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;找到消息对应的实现类对象&quot;&gt;&lt;a href=&quot;#找到消息对应的实现类对象&quot; class=&quot;headerlink&quot; title=&quot;找到消息对应的实现类对象&quot;&gt;&lt;/a&gt;找到消息对应的实现类对象&lt;/h3&gt;&lt;p&gt;如何在HttpProxy做消息转发时，找到某个消息对应的真正的实现类对象呢？&lt;/p&gt;
&lt;p&gt;最好的办法就是保存每个接口方法到其实现类对象的映射，可以用Dictionary保存，关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_http_proxy_1_2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;code&gt;registerHttpProtocol:handler:&lt;/code&gt;方法的职责就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历Protocol的所有方法（利用Objective-C的&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Runtime&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;保存Protocol所有方法到实现类的对象的映射关系。（用方法的字符串表示作为key，实现类对象为value）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，HttpProxy应该持有一个Dictionary的实例，用于保存映射关系，HttpProxy的实现部分如：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//HttpProxy.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; HttpProxy ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//保存映射关系的字典。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt;(strong, nonatomic) NSMutableDictionary *selToHandlerMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注册方法实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;)registerHttpProtocol:(&lt;span class=&quot;type&quot;&gt;Protocol&lt;/span&gt; *)httpProtocol handler:(id)handler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsigned &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; numberOfMethods = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //获取&lt;span class=&quot;type&quot;&gt;Protocol&lt;/span&gt;的所有方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    struct objc_method_description *methods = protocol_copyMethodDescriptionList(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            httpProtocol, &lt;span class=&quot;type&quot;&gt;YES&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;YES&lt;/span&gt;, &amp;amp;numberOfMethods);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //为&lt;span class=&quot;type&quot;&gt;Protocol&lt;/span&gt;的每个方法注册真正的实现类对象handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (unsigned &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numberOfMethods; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        struct objc_method_description &lt;span class=&quot;keyword&quot;&gt;method&lt;/span&gt; = methods[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_selToHandlerMap setValue:handler forKey:&lt;span class=&quot;type&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;method&lt;/span&gt;.name)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实现消息的转发&quot;&gt;&lt;a href=&quot;#实现消息的转发&quot; class=&quot;headerlink&quot; title=&quot;实现消息的转发&quot;&gt;&lt;/a&gt;实现消息的转发&lt;/h3&gt;&lt;p&gt;我们已经可以注册接口、保存映射关系了，剩下的就是重写NSProxy的两个方法，以实现消息的转发，至于这两个方法具体作用是什么，读者可以自行查阅相关资料。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//HttpProxy.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取Method signature&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMethodSignature *)&lt;span class=&quot;string&quot;&gt;methodSignatureForSelector:&lt;/span&gt;(SEL)sel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取method的字符串表示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *methodsName = NSStringFromSelector(sel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//查找对应实现类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id handler = [_selToHandlerMap &lt;span class=&quot;string&quot;&gt;valueForKey:&lt;/span&gt;methodsName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//再次检查handler是否可以相应此消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (handler != nil &amp;amp;&amp;amp; [handler &lt;span class=&quot;string&quot;&gt;respondsToSelector:&lt;/span&gt;sel]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [handler &lt;span class=&quot;string&quot;&gt;methodSignatureForSelector:&lt;/span&gt;sel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;methodSignatureForSelector:&lt;/span&gt;sel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//转发方法消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;forwardInvocation:&lt;/span&gt;(NSInvocation *)invocation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSString *methodsName = NSStringFromSelector(invocation.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id handler = [_selToHandlerMap &lt;span class=&quot;string&quot;&gt;valueForKey:&lt;/span&gt;methodsName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (handler != nil &amp;amp;&amp;amp; [handler &lt;span class=&quot;string&quot;&gt;respondsToSelector:&lt;/span&gt;invocation.selector]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation &lt;span class=&quot;string&quot;&gt;invokeWithTarget:&lt;/span&gt;handler];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;forwardInvocation:&lt;/span&gt;invocation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;p&gt;看看如何使用HttpProxy：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化，注册Protocol对应的实现类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[HttpProxy sharedInstance]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;registerHttpProtocol&lt;/span&gt;:@&lt;span class=&quot;selector-tag&quot;&gt;protocol&lt;/span&gt;(UserHttpHandler) &lt;span class=&quot;selector-tag&quot;&gt;handler&lt;/span&gt;:&lt;span class=&quot;selector-attr&quot;&gt;[UserHttpHandlerImp new]&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[HttpProxy sharedInstance]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;registerHttpProtocol&lt;/span&gt;:@&lt;span class=&quot;selector-tag&quot;&gt;protocol&lt;/span&gt;(CommentHttpHandler) &lt;span class=&quot;selector-tag&quot;&gt;handler&lt;/span&gt;:&lt;span class=&quot;selector-attr&quot;&gt;[CommentHttpHandlerImp new]&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[HttpProxy sharedInstance]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;getUserWithID&lt;/span&gt;:@&lt;span class=&quot;selector-tag&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[[HttpProxy sharedInstance]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;getCommentsWithDate&lt;/span&gt;:&lt;span class=&quot;selector-attr&quot;&gt;[NSDate new]&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;所有的代码及示例都提交到Github了，&lt;a href=&quot;https://github.com/zekunyan/HttpProxyExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HttpProxyExample&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;总的来说，就是利用Objective-C的“消息”机制，继承NSProxy抽象类，实现自己定义的转发机制，将网络接口层的各个方法的实现与声明分离，提升项目代码的可维护性，更加模块化。如下图表示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_ios_http_proxy_1_3.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上，就是我自己在项目中，利用NSProxy设计并实现的网络接口层结构。💪&lt;/p&gt;
&lt;p&gt;从了解NSProxy、Runtime到设计、实现出这个网络层架构，着实花了点时间，收获真是不少。其实像这种纯代码层次的重构，很多人会觉得“吃力不讨好”😨，但我觉得，正是这样，才能真正让自己提升。&lt;/p&gt;
&lt;p&gt;代码是具有美感的！嗯！😝&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/index.html#//apple_ref/occ/instm/NSProxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSProxy Class Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://objectivetoast.com/2014/05/12/nsproxy-nsobjects-lesser-known-sibling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSProxy, NSObject’s Lesser-Known Sibling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Runtime Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2015-12-21: 其实用Category按照业务拆分网络请求接口的代码也是非常棒的，目前我自己就是这么做的=。=，文章就当做熟悉下NSProxy吧~&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在做项目的时候，所有业务的网络接口方法，全部都写在了一个文件里面，一开始还好，毕竟每个方法的代码也只是十几行，增加、修改也比较容易。但是随着接口的增多，这个文件慢慢居然超过了1000行，里面几十个方法都写在一起，实在是不好维护。&lt;/p&gt;
&lt;p&gt;虽然保持这样也没有什么，多用用Cmd+F就能找到。但是，真是越看越不顺眼😳， 代码一定要有“美感”啊~😝&lt;/p&gt;
&lt;p&gt;所以在查阅了大量文章后，终于想出了本文即将说明的办法，越发觉得Objective-C的“消息”机制是多么的赞~😚&lt;/p&gt;
&lt;h2 id=&quot;Github-示例&quot;&gt;&lt;a href=&quot;#Github-示例&quot; class=&quot;headerlink&quot; title=&quot;Github 示例&quot;&gt;&lt;/a&gt;Github 示例&lt;/h2&gt;&lt;p&gt;贴上本文中的示例工程：&lt;a href=&quot;https://github.com/zekunyan/HttpProxyExample&quot;&gt;https://github.com/zekunyan/HttpProxyExample&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Objective-C-读书笔记-Item-3</title>
    <link href="http://tutuge.me/2015/02/14/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-3/"/>
    <id>http://tutuge.me/2015/02/14/Effective-Objective-C-读书笔记-Item-3/</id>
    <published>2015-02-14T08:51:51.000Z</published>
    <updated>2016-03-20T09:03:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;item 3讲的是Objective-C里面的“字面量语法”-“Literal Syntax”，个人觉得非常有用。&lt;/p&gt;
&lt;h2 id=&quot;Item-3-Prefer-Literal-Syntax-over-the-Equivalent-Methods&quot;&gt;&lt;a href=&quot;#Item-3-Prefer-Literal-Syntax-over-the-Equivalent-Methods&quot; class=&quot;headerlink&quot; title=&quot;Item 3 - Prefer Literal Syntax over the Equivalent Methods&quot;&gt;&lt;/a&gt;Item 3 - Prefer Literal Syntax over the Equivalent Methods&lt;/h2&gt;&lt;p&gt;本节讲了Objective-C中的“字面量语法”，并且建议我们更多的使用这种语法，而不是使用传统的等价的函数方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;当我们使用Objective-C编程的时候，总会经常使用到几种Foundation框架中的基本类，如NSString、NSNumber、NSArray、NSDictionary，或者是它们的子类。例如，当我们想创建一个字符串的时候，会这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt; = @&lt;span class=&quot;string&quot;&gt;&quot;a string&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不知道各位写这句的时候有没有觉得奇怪？为什么不用先“alloc”，再“initWithXXX”这么来创建呢。是的，这里创建字符串，就用到了Objective-C提供的“字面量语法”-“Literal Syntax”，而这种语法的“标志”就是“@”符号。&lt;br&gt;有了字面量语法，我们就不用每次创建一些基本类型的时候，写一大堆alloc、init了。&lt;/p&gt;
&lt;h2 id=&quot;NSNumber&quot;&gt;&lt;a href=&quot;#NSNumber&quot; class=&quot;headerlink&quot; title=&quot;NSNumber&quot;&gt;&lt;/a&gt;NSNumber&lt;/h2&gt;&lt;p&gt;字符串可以用字面量语法创建，数字类NSNumber肯定也可以，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;intNum = &lt;span class=&quot;meta&quot;&gt;@1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;floatNum = &lt;span class=&quot;meta&quot;&gt;@1.1f;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;doubleNum = &lt;span class=&quot;meta&quot;&gt;@1.1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;boolNum = &lt;span class=&quot;meta&quot;&gt;@YES;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;charNum = &lt;span class=&quot;meta&quot;&gt;@&#39;a&#39;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//不用字面量语法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;intNumber = [[NSNumber alloc] initWithInt:1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看，是不是很方便~&lt;/p&gt;
&lt;h2 id=&quot;NSArray&quot;&gt;&lt;a href=&quot;#NSArray&quot; class=&quot;headerlink&quot; title=&quot;NSArray&quot;&gt;&lt;/a&gt;NSArray&lt;/h2&gt;&lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h3&gt;&lt;p&gt;数组算是最常用的一种数据结构了，如果没有字面量语法，创建数组可能是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *numbers = [[NSArray alloc] &lt;span class=&quot;symbol&quot;&gt;initWithObjects:&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;@1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;@2&lt;/span&gt;.0f, &lt;span class=&quot;variable&quot;&gt;@YES&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用字面量语法的话，就是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;numbers = &lt;span class=&quot;meta&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@1,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@1.1,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@2.0f,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@YES];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;存取值&quot;&gt;&lt;a href=&quot;#存取值&quot; class=&quot;headerlink&quot; title=&quot;存取值&quot;&gt;&lt;/a&gt;存取值&lt;/h3&gt;&lt;p&gt;创建了数组，肯定要从数组里面取值，用NSArray的方法就是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;aNumber = [numbers objectAtIndex:2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;mutableArray = [[NSMutableArray alloc] initWithArray:&lt;span class=&quot;meta&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@1,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@2,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@3]];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mutableArray replaceObjectAtIndex:1 withObject:&lt;span class=&quot;meta&quot;&gt;@4];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;跟C语言、Java这些语法很不一样啊，人家都是通过中括号“[]”直接用下标取值就可以。有了字面量同语法，Objective-C也可以这样:&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;aNumber = numbers[2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;mutableArray = [[NSMutableArray alloc] initWithArray:&lt;span class=&quot;meta&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@1,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@2,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@3]];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mutableArray[1] = &lt;span class=&quot;meta&quot;&gt;@4;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;要注意的地方&quot;&gt;&lt;a href=&quot;#要注意的地方&quot; class=&quot;headerlink&quot; title=&quot;要注意的地方&quot;&gt;&lt;/a&gt;要注意的地方&lt;/h3&gt;&lt;p&gt;传统的通过“initWithObjects”方法创建数组的时候，是根据最后的“nil”判断数组是否结束的，也就是说，用于初始化数组的元素中有“nil”值也不会导致异常（Exception），如下语句：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number1 = @&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number2 = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//空指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *number3 = @&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *numbers = [[&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; alloc] initWithObjects:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  number1, number2, number3, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出为1，因为number2，创建到number2就截止了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;numbers count: %d&quot;&lt;/span&gt;, numbers.count);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，如果用字面量语法创建，就是出问题：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;number1 = &lt;span class=&quot;meta&quot;&gt;@1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;number2 = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;number3 = &lt;span class=&quot;meta&quot;&gt;@3;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建出现异常！！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;numbers = &lt;span class=&quot;meta&quot;&gt;@[number1,&lt;/span&gt; number2, number3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(&lt;span class=&quot;meta&quot;&gt;@&quot;numbers&lt;/span&gt; count: %d&lt;span class=&quot;string&quot;&gt;&quot;, numbers.count);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为字面量语法只是单纯的将中括号中的元素全部加到数组中，但是，Objective-C中的数组是不可以存放nil值的，所以程序会运行时抛出异常。&lt;/p&gt;
&lt;h2 id=&quot;NSDictionary&quot;&gt;&lt;a href=&quot;#NSDictionary&quot; class=&quot;headerlink&quot; title=&quot;NSDictionary&quot;&gt;&lt;/a&gt;NSDictionary&lt;/h2&gt;&lt;h3 id=&quot;创建-1&quot;&gt;&lt;a href=&quot;#创建-1&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h3&gt;&lt;p&gt;如果不用字面量语法创建字典，传统的创建函数简直令人匪夷所思：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// number1-&amp;gt;&lt;span class=&quot;meta&quot;&gt;@1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// number2-&amp;gt;&lt;span class=&quot;meta&quot;&gt;@2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;dict = [[NSDictionary alloc] initWithObjectsAndKeys:&lt;span class=&quot;meta&quot;&gt;@1,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@&quot;number1&quot;,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@2,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@&quot;number2&quot;,&lt;/span&gt; nil];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是不是很奇怪，&lt;strong&gt;value在前面，key在后面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，还是用新的语法吧：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;dict = &lt;span class=&quot;meta&quot;&gt;@&amp;#123;&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@&quot;number1&quot;&lt;/span&gt; : &lt;span class=&quot;meta&quot;&gt;@1,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@&quot;number2&quot;&lt;/span&gt; : &lt;span class=&quot;meta&quot;&gt;@2&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样才符合“常识”嘛，key在前，value在后面，跟JSON的定义一样。&lt;/p&gt;
&lt;h3 id=&quot;存取值-1&quot;&gt;&lt;a href=&quot;#存取值-1&quot; class=&quot;headerlink&quot; title=&quot;存取值&quot;&gt;&lt;/a&gt;存取值&lt;/h3&gt;&lt;p&gt;取值的语法跟NSArray的语法很想，只不过是将下标数字变成了key：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//传统&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *number1 = [dict objectForKey:@&lt;span class=&quot;string&quot;&gt;&quot;number1&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dict setValue:@&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; forKey:@&lt;span class=&quot;string&quot;&gt;&quot;number1&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字面量语法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *number2 = dict[@&lt;span class=&quot;string&quot;&gt;&quot;number1&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict[@&lt;span class=&quot;string&quot;&gt;&quot;number1&quot;&lt;/span&gt;] = @&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;需要注意的地方，跟创建数组一样，NSDictionary的value不能为nil值，否则会抛出异常。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;总的来说，使用字面量语法可以让代码更加清晰、简单，毕竟，更少的代码，有时候意味着更少的错误。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;item 3讲的是Objective-C里面的“字面量语法”-“Literal Syntax”，个人觉得非常有用。&lt;/p&gt;
&lt;h2 id=&quot;Item-3-Prefer-Literal-Syntax-over-the-Equivalent-Methods&quot;&gt;&lt;a href=&quot;#Item-3-Prefer-Literal-Syntax-over-the-Equivalent-Methods&quot; class=&quot;headerlink&quot; title=&quot;Item 3 - Prefer Literal Syntax over the Equivalent Methods&quot;&gt;&lt;/a&gt;Item 3 - Prefer Literal Syntax over the Equivalent Methods&lt;/h2&gt;&lt;p&gt;本节讲了Objective-C中的“字面量语法”，并且建议我们更多的使用这种语法，而不是使用传统的等价的函数方法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="翻译" scheme="http://tutuge.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="笔记" scheme="http://tutuge.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Objective-C-读书笔记-Item-2</title>
    <link href="http://tutuge.me/2015/02/06/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-2/"/>
    <id>http://tutuge.me/2015/02/06/Effective-Objective-C-读书笔记-Item-2/</id>
    <published>2015-02-06T08:43:46.000Z</published>
    <updated>2016-03-20T09:03:31.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;第二弹来了。&lt;/p&gt;
&lt;h2 id=&quot;Item-2-Minimize-Importing-Headers-in-Headers&quot;&gt;&lt;a href=&quot;#Item-2-Minimize-Importing-Headers-in-Headers&quot; class=&quot;headerlink&quot; title=&quot;Item 2 - Minimize Importing Headers in Headers&quot;&gt;&lt;/a&gt;Item 2 - Minimize Importing Headers in Headers&lt;/h2&gt;&lt;p&gt;这一节讲的是尽量在一个头文件中减少其它头文件的引入。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;p&gt;Objective-C和C语言、C++很像，都将类的实现与声明分开，用.h后缀名文件表示声明文件，用.m文件实现类。当要用到这个类的时候，只需要引入头文件即可，至于编译器、运行时是如何知道头文件里面的类对应的实现在哪里，在这了不做说明。一下用例子说明，先看看下面的类：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Wheel.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//车轮类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Wheel&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *manufacturer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二个类&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Engine.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//发动机类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Engine&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *manufacturer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; power;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就是车类Car：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Car.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//汽车类，只有一个轮子，不要奇怪=。=&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) Wheel *wheel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) Engine *engine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意到少了什么东西没有？&lt;br&gt;是的，写过C语言、C++的童鞋一下就能发现，Car类没有引入Engine和Wheel的头文件，肯定会编译出错的，因为编译器不知道Engine、Wheel类是啥。&lt;br&gt;那好，我们加上下面两行：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Wheel.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Engine.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;嗯。这样就不会出错了。但是这样真的好吗？Objective-C给我们提供了@class关键字，就是来解决这个问题的。&lt;/p&gt;
&lt;h2 id=&quot;前置声明（forward-declaration）&quot;&gt;&lt;a href=&quot;#前置声明（forward-declaration）&quot; class=&quot;headerlink&quot; title=&quot;前置声明（forward declaration）&quot;&gt;&lt;/a&gt;前置声明（forward declaration）&lt;/h2&gt;&lt;p&gt;何为前置声明？看看下面的Car类的头文件例子。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Car.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//前置声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Wheel&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Engine&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) Wheel *wheel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) Engine *engine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;@class就是类的前置声明（forward declaration），就是告诉编译器“嗨，不用找了，Wheel类和Engine类是肯定存在的，用到的时候再找”。有了前置声明，我们就不用显式的引入Wheel类和Engine类了。&lt;/p&gt;
&lt;p&gt;当然，在Car类的实现文件.m文件中，我们还是要显式的引入Wheel和Engine类的，因为在这里我们要具体用到这两个类了，当然要知道类的细节。&lt;/p&gt;
&lt;h3 id=&quot;为何不要import？&quot;&gt;&lt;a href=&quot;#为何不要import？&quot; class=&quot;headerlink&quot; title=&quot;为何不要import？&quot;&gt;&lt;/a&gt;为何不要import？&lt;/h3&gt;&lt;p&gt;为什么不直接import呢？因为如果直接用import引入Wheel和Engine的声明，那么任何import引入了Car类的文件，也同时会引入Wheel、Engine类的声明，而且最终我们可能并不一定会直接跟Wheel、Engine类打交道，这样不就引入了“没有用”的类了吗？而且这样做很可能造成文件引入成“环”。&lt;/p&gt;
&lt;p&gt;虽然import可以避免重复声明造成编译出错，传统的C语言、C++在声明的时候也可以通过如下方式避免重复声明：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; _WHEEL_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; _WHEEL_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//声明内容...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是既然Objective-C有@class这种前置声明的办法，为何不用呢。&lt;/p&gt;
&lt;h2 id=&quot;必须用import的时候&quot;&gt;&lt;a href=&quot;#必须用import的时候&quot; class=&quot;headerlink&quot; title=&quot;必须用import的时候&quot;&gt;&lt;/a&gt;必须用import的时候&lt;/h2&gt;&lt;p&gt;当然，@class这样的前置声明并不能解决一切头文件引入的问题，如下这样的类，就必须要用import：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Car 的声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Car.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Driver protocol的定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Driver.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BigCar&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;Driver&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是的，当类需要被继承、定义的protocol需要实现的时候，就需要import相关的头文件了（protocol的实现如果跟类的使用者没有关联，可以定义在类的实现文件中的“扩展category”中）,当然，还有@protocol这样的protocol的前置声明，怎么用就留给读者自己查阅相关资料了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;大费周章的讲了这么多，其实目的就是一个：尽量少在头文件里面引入其他头文件。&lt;/p&gt;
&lt;p&gt;最终的目的就是&lt;strong&gt;只暴露最少的细节&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;写代码有段时间了，一直都在琢磨这句话，希望读者也能好好体会~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;第二弹来了。&lt;/p&gt;
&lt;h2 id=&quot;Item-2-Minimize-Importing-Headers-in-Headers&quot;&gt;&lt;a href=&quot;#Item-2-Minimize-Importing-Headers-in-Headers&quot; class=&quot;headerlink&quot; title=&quot;Item 2 - Minimize Importing Headers in Headers&quot;&gt;&lt;/a&gt;Item 2 - Minimize Importing Headers in Headers&lt;/h2&gt;&lt;p&gt;这一节讲的是尽量在一个头文件中减少其它头文件的引入。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="翻译" scheme="http://tutuge.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="笔记" scheme="http://tutuge.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Effective-Objective-C-读书笔记-Item-1</title>
    <link href="http://tutuge.me/2015/02/05/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-1/"/>
    <id>http://tutuge.me/2015/02/05/Effective-Objective-C-读书笔记-Item-1/</id>
    <published>2015-02-04T17:17:08.000Z</published>
    <updated>2016-06-16T16:16:51.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直都在做项目，没什么时间作总结，感觉很不是滋味。现在放假了，嗯，终于有时间了~~哈哈（天生程序猿一枚好不好=。=）&lt;br&gt;最近开始读英文版的Effective Objective-C 2.0，觉得不错，就总结些东西，分享给各位读者吧。&lt;/p&gt;
&lt;h2 id=&quot;Item-1-Familiarize-Yourself-with-Objective-C’s-Roots&quot;&gt;&lt;a href=&quot;#Item-1-Familiarize-Yourself-with-Objective-C’s-Roots&quot; class=&quot;headerlink&quot; title=&quot;Item 1 - Familiarize Yourself with Objective-C’s Roots&quot;&gt;&lt;/a&gt;Item 1 - Familiarize Yourself with Objective-C’s Roots&lt;/h2&gt;&lt;p&gt;第一章的目的，就是让大家熟悉Objective-C，自然，标题的意思也就是“了解Objective-C的基本概念”，不多说，开写。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;消息与运行时&quot;&gt;&lt;a href=&quot;#消息与运行时&quot; class=&quot;headerlink&quot; title=&quot;消息与运行时&quot;&gt;&lt;/a&gt;消息与运行时&lt;/h2&gt;&lt;p&gt;总的来说，Objective-C跟C++、Java这些面向对象的语言是非常相似的，但是还是有许多不同的地方。如果你是第一次看到Objective-C的语法，一定觉得非常奇怪，因为Objective-C使用的是基于消息（Message）的框架，而不是传统的方法、函数调用。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Objective-C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person *person = [Person new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[person setName:@&lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt; age:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person person = new Person()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.setNameAndAge(&lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//C++&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person *person = new Person&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person-&amp;gt;setNameAndAge(&lt;span class=&quot;string&quot;&gt;&quot;tutuge&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很奇怪是不是，各种中括号。但是我觉得，Objective—C这么设计就是为了时刻提醒你，“我是基于消息机制的！”。消息，的确是Objective-C与Java、C++这种语言最大的不同，而且，这种不同远不止在语法上面。简单来说如下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于消息的调用：&lt;/strong&gt; 所有的函数调用都是在“运行时”决定的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于方法的调用：&lt;/strong&gt; 所有的函数调用都是在“编译时”决定的，就是编译器编译时决定的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实，连被调方法的对象类型，都是在运行时决定的。所以说，Objective-C的运行时系统，担负了绝大部分的工作。这么设计的优点，举个例子，就是当运行时系统升级时，原有的代码不用重新编译即可“享受”升级带来的好处。&lt;/p&gt;
&lt;h2 id=&quot;C的超集&quot;&gt;&lt;a href=&quot;#C的超集&quot; class=&quot;headerlink&quot; title=&quot;C的超集&quot;&gt;&lt;/a&gt;C的超集&lt;/h2&gt;&lt;p&gt;Objective-C是C语言的超集，所以C语言所具有的一切特性，Objective-C都可以兼容，充分理解C语言的内存模型，对理解Objective-C很有帮助。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt; = @&lt;span class=&quot;string&quot;&gt;&quot;a string&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一行代码跟C语言没有什么不同，（忽略@符号=。=），原理跟C语言也是一致的，就是str指针是NSString类型的指针，指向了一块存着字符串“a string”的内存区域。不同的是，在Objective-C里，所有的对象只可以声明为指针类型，所以如下代码是不合理的：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了更充分的理解，咱们看看如下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;str1 &lt;/span&gt;= &lt;span class=&quot;comment&quot;&gt;@&quot;a string&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;str2 &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;str1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;熟悉C语言的朋友应该知道这是怎么回事，内存当中只有一块区域储存着“a string”这个字符串，str1、str2都是指向着这个区域的字符串指针。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/blog_effective_objective_c_item_1_1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;str1、str2都在栈内存上分配的，就是字符串（NSString）类型的指针。&lt;/li&gt;
&lt;li&gt;“a string”字符串实际储存在堆内存上。&lt;/li&gt;
&lt;li&gt;str1、str2均指向同一块内存区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处的栈内存、堆内存跟C语言中的概念也是一样的，不同的是，在Objective-C中，我们不用手动去malloc、free内存，Objective-C使用内存计数计数帮我们管理内存。&lt;/p&gt;
&lt;h2 id=&quot;结构体，基本类型&quot;&gt;&lt;a href=&quot;#结构体，基本类型&quot; class=&quot;headerlink&quot; title=&quot;结构体，基本类型&quot;&gt;&lt;/a&gt;结构体，基本类型&lt;/h2&gt;&lt;p&gt;在Objective-C中，并不是所有的变量都是指针类型的，像int、float、double这些依旧是传统的“栈上分配”的，当然，还有结构体struct、枚举enum、联合union等。如：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; point = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这的CGPoint、CGRect都是结构体，但是都是直接在栈上分配内存的，以减少过度使用Objective-C类型的类（减少运行时的压力），各位读者使用的时候要注意。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;零散的说了一些Objective-C的特点，远远不足以讲明白Objective-C，我这只是根据Effective Objective-C这本书给个引子，还是推荐Apple的官方教程、文档，要想掌握扎实，还是要一步一步来~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直都在做项目，没什么时间作总结，感觉很不是滋味。现在放假了，嗯，终于有时间了~~哈哈（天生程序猿一枚好不好=。=）&lt;br&gt;最近开始读英文版的Effective Objective-C 2.0，觉得不错，就总结些东西，分享给各位读者吧。&lt;/p&gt;
&lt;h2 id=&quot;Item-1-Familiarize-Yourself-with-Objective-C’s-Roots&quot;&gt;&lt;a href=&quot;#Item-1-Familiarize-Yourself-with-Objective-C’s-Roots&quot; class=&quot;headerlink&quot; title=&quot;Item 1 - Familiarize Yourself with Objective-C’s Roots&quot;&gt;&lt;/a&gt;Item 1 - Familiarize Yourself with Objective-C’s Roots&lt;/h2&gt;&lt;p&gt;第一章的目的，就是让大家熟悉Objective-C，自然，标题的意思也就是“了解Objective-C的基本概念”，不多说，开写。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
      <category term="翻译" scheme="http://tutuge.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="笔记" scheme="http://tutuge.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS项目的目录结构-原创</title>
    <link href="http://tutuge.me/2015/02/01/iOS%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-%E5%8E%9F%E5%88%9B/"/>
    <id>http://tutuge.me/2015/02/01/iOS项目的目录结构-原创/</id>
    <published>2015-01-31T18:27:21.000Z</published>
    <updated>2016-03-20T09:03:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这段时间一直在做iOS的项目（&lt;a href=&quot;https://itunes.apple.com/cn/app/qing-ju-yin-le-quan-guo-zui/id913235479?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;青桔音乐App&lt;/a&gt;），随着代码量的上升，逐渐意识到项目的整体目录结构划分是多么重要，清晰的目录结构，能够更好的应对新的需求，更容易重构。虽然一直都是一个人在做=。=，但是还是深深地体会到目录结构的重要性。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;p&gt;说再多都不如来个例子实在，如下：(VC指的是viewController)&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---General&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---AppDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Constant&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---VC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Category&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---Entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---BaseEntity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---UserEntity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---CommentEntity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---Http&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Api&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Manager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---CodeHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---ErrorHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---HttpHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---UserHttpHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---CommentHttpHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---DB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---DBHelper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---DBService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---Util&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---StringUtil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---NumberUtil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---TimeUtil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---AccountService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---ShareService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---Lib&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Umeng&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---QQSDK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---SVProgressHUD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|---Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Login&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---VC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---XIB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Comment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---VC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---XIB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;|---Business&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;|---Feeds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;乍一看好多，别被吓到=。=，容我细细讲解。&lt;/p&gt;
&lt;h2 id=&quot;详细讲解&quot;&gt;&lt;a href=&quot;#详细讲解&quot; class=&quot;headerlink&quot; title=&quot;详细讲解&quot;&gt;&lt;/a&gt;详细讲解&lt;/h2&gt;&lt;h3 id=&quot;General&quot;&gt;&lt;a href=&quot;#General&quot; class=&quot;headerlink&quot; title=&quot;General&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;&lt;p&gt;General好理解，放的就是如AppDelegate之类的、项目中最普通的、最常用的组件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AppDelegate&lt;/strong&gt;:&lt;br&gt;App的Delegate类实现，这个必须有，就不用说了吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;:&lt;br&gt;如果自定义实现了Application类，就放在这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constant&lt;/strong&gt;:&lt;br&gt;顾名思义，常量，项目用到的所有公共常量，如enum枚举类型的、Notification的Tag，常用的颜色、字符串等等等，都可以按照自己的需求划分不同的Group，放到Constant里面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UI&lt;/strong&gt;:&lt;br&gt;项目中自定义的UIView、UIViewController子类之类的代码，就对应放在UI下的View、VC中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;br&gt;对系统类做的扩展，各种Category，如&lt;code&gt;NSString+XXXExtension&lt;/code&gt;这种，就统一放在Category目录下。&lt;/p&gt;
&lt;p&gt;如还有其他的通用组件，也不妨放到这里，做统一的管理。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Entity&quot;&gt;&lt;a href=&quot;#Entity&quot; class=&quot;headerlink&quot; title=&quot;Entity&quot;&gt;&lt;/a&gt;Entity&lt;/h3&gt;&lt;p&gt;Entity，也有人喜欢叫Model（关于Entity和Model的区别，推荐看看&lt;a href=&quot;http://blogsh.de/2011/09/08/models-vs-entities/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，个人觉得研究研究Entity和Model概念的区别还是很有好处的），就是程序中的“实体”，如一个用户、一条评论、一首歌等等，简单来说就是一个独立“个体”的集合、打包，具体的自己查查吧，网上一大堆的，感觉跟JavaBean的概念比较像。&lt;/p&gt;
&lt;p&gt;通常来说，每个Entity类都比较简单，只包含若干个属性。但是有时候可能要做统一的处理，如，在从服务器取回的JSON数据解包成具体的Entity类，并且执行一系列初始化操作等等，所以可能要对所有的Entity类做统一处理。所以说，可以定制相应的BaseEntity基类，利用模板方法等办法，定制统一的初始化流程（好像扯远了=。=，这个后面会详细写篇东西分享给大家），BaseEntity就是放这些基类的东西的。&lt;/p&gt;
&lt;p&gt;有了BaseEntity后，对应的各个业务中的具体Entity，如UserEntity、CommentEntity，就可以分门别类的建立单独的Group存放。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Http&quot;&gt;&lt;a href=&quot;#Http&quot; class=&quot;headerlink&quot; title=&quot;Http&quot;&gt;&lt;/a&gt;Http&lt;/h3&gt;&lt;p&gt;这个Group里面放跟网络请求相关的东西，详细如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Api&lt;/strong&gt;:&lt;br&gt;互联网应用少不了跟服务器打交道的各种网络接口，所以我在项目中把所有的API对应的相对URL地址、参数注释要求等等都放在了这里，好统一管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Manager&lt;/strong&gt;:&lt;br&gt;定义最基本的网络请求，如GET、POST、PUT等请求的基本封装，获取图片的基本封装。&lt;br&gt;一般来说就是定制统一的基本请求接口，对上层提供一致、稳定的服务，真正的网络请求，可以自己用iOS原生的Api写，也可以用AFNetworking等第三方库做封装，图片也可以灵活的用AFNetworking、SDWebImage这些优秀的库实现。还有就是，可以方便的统一对请求做处理，如错误处理、Http的Code、状态处理等等。还可以统一的增加请求参数，如统一为每个请求都增加用户的ID、token什么的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CodeHandler&lt;/strong&gt;&lt;br&gt;大部分的API设计都会有相应的状态码、Code，为了方便扩展，可以把这些处理Code的类单独放在这里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ErrorHandler&lt;/strong&gt;&lt;br&gt;这个就少不了了，对Http的错误进行单独处理，加Log什么的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HttpHandler&lt;/strong&gt;&lt;br&gt;这个Group里面放的是真正实现接口的类，如什么UserHttpHandler、CommentHttpHandler之类的，就是具体实现了接口调用、处理返回数据、回调的类。&lt;/p&gt;
&lt;p&gt;Http里面的各个Group的类其实都是相互关联的，设计的时候可以定制统一的接口（Protocol），然后创建类实现（conform）这些接口，也就是面向接口的编程，以最大限度的减少接口层的各个职能之间的耦合，方便扩展。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DB&quot;&gt;&lt;a href=&quot;#DB&quot; class=&quot;headerlink&quot; title=&quot;DB&quot;&gt;&lt;/a&gt;DB&lt;/h3&gt;&lt;p&gt;介于iOS的SQLite不是那么好用，所以非常有必要为操作数据库的类建立单独的地盘=。=&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBHelper&lt;/strong&gt;:&lt;br&gt;放基础的操作数据库的类，如简单的查找、插入、更新、事务更新等等操作，为负载的数据库业务逻辑封装底层接口。比如对流行的FMDB进行封装等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBService&lt;/strong&gt;:&lt;br&gt;这里放具体的数据库业务实现类，至于为什么叫“Service”，因为我也想不出什么好的名字了=。= 按照自己的业务逻辑组织即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Util&quot;&gt;&lt;a href=&quot;#Util&quot; class=&quot;headerlink&quot; title=&quot;Util&quot;&gt;&lt;/a&gt;Util&lt;/h3&gt;&lt;p&gt;放常用的工具类的地方。如字符串操作的类StringUtil、时间计算格式化类TimeUtil等，按具体需求而定，这个就不用多说了吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Service&quot;&gt;&lt;a href=&quot;#Service&quot; class=&quot;headerlink&quot; title=&quot;Service&quot;&gt;&lt;/a&gt;Service&lt;/h3&gt;&lt;p&gt;项目的需求多了，业务逻辑的代码就会越来越多，总不能都放在view controller里面吧。一些多处用到的，或者非常独立的业务代码，完全可以抽离出来，实现为单独的、跟界面无关的业务类。因为做的事很杂，所以干脆就叫Service了。&lt;br&gt;&lt;strong&gt;AccountService&lt;/strong&gt;、&lt;strong&gt;ShareService&lt;/strong&gt;就是这种类。而且大部分的Service都应该是单例类，如&lt;strong&gt;AccountService&lt;/strong&gt;类可能维护着程序运行期间的账户信息，&lt;strong&gt;ShareService&lt;/strong&gt;对程序的分享功能做了统一处理等等，具体怎么用就随各位了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Lib&quot;&gt;&lt;a href=&quot;#Lib&quot; class=&quot;headerlink&quot; title=&quot;Lib&quot;&gt;&lt;/a&gt;Lib&lt;/h3&gt;&lt;p&gt;Lib，放各种第三方库，因项目需要修改过的第三方组件等，像什么友盟、QQSDK之类的就可以放这。当然，一些不会做改动的库最好还是用CocoaoPod做统一管理。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h3&gt;&lt;p&gt;终于讲到了最重要的地方。&lt;br&gt;iOS工程中最多的文件往往就是各种View、ViewController类，以前总是看到有人只创建两个Group，一个叫Views，另一个叫ViewControllers，然后所有的Views、ViewController都往里面塞，然后随着需求的增加，这两个Group也臃肿不堪。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;办法总是有的。就是为工程划分模块-Module&lt;/strong&gt;&lt;br&gt;如何划分Module？我认为，可以按照以下两点建立：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以页面跳转分支划分。&lt;/li&gt;
&lt;li&gt;以功能划分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;以页面跳转分支划分&lt;/strong&gt;&lt;br&gt;就是按照应用的页面设计与业务逻辑，从最顶级开始，一级一级页面往下跳转，找出其中的独立分支，归为一个Module模块。&lt;br&gt;举例来说，应用主界面有4个Tab页，就先分出四个Module，然后一级一级往下跳转，遇到分支就建立新的Module，如此递归的建立，就能大致划分出各个Module。当然，这么做是最粗糙的，还要根据情况，将不同的分支Module合并成一个Module，简化代码的组成。我在这只是提供个划分Module的方法，具体怎么设计就看各位读者了=。=&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以功能划分&lt;/strong&gt;&lt;br&gt;这个好理解，无非就是根据前期项目的功能模块划分工程的代码Module组成。如什么用户设置Module、评论Module、登录Module等等。&lt;/p&gt;
&lt;p&gt;总的来数，就是要用Module将工程的代码分类管理，每个Module具有大致相同的结构，如都可能有本Module用到的View、ViewController，自定义的类Class等等，就是说，按照职能对代码划分，避免将所有的类都堆在一起，也好应对新的需求。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;啰啰嗦嗦说了一大堆，想必各位都看烦了吧=。=刚开始写博客，写到一个地方，又会引出另一块，写着写着容易写偏了。&lt;br&gt;写之前我也大致搜了一下，发现网上相关的资料好少，但是实际的经验告诉我，项目工程的目录结构非常重要，无论是对开发还是对后期的维护，所以想着应该写篇东西，分享我自己的经验给大家，有啥问题，多提意见啊~~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这段时间一直在做iOS的项目（&lt;a href=&quot;https://itunes.apple.com/cn/app/qing-ju-yin-le-quan-guo-zui/id913235479?mt=8&quot;&gt;青桔音乐App&lt;/a&gt;），随着代码量的上升，逐渐意识到项目的整体目录结构划分是多么重要，清晰的目录结构，能够更好的应对新的需求，更容易重构。虽然一直都是一个人在做=。=，但是还是深深地体会到目录结构的重要性。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://tutuge.me/categories/iOS/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="iOS" scheme="http://tutuge.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android开源库-LinkTextView-原创</title>
    <link href="http://tutuge.me/2014/11/02/LinkTextView-Android%E5%BC%80%E6%BA%90%E5%BA%93-%E5%8E%9F%E5%88%9B/"/>
    <id>http://tutuge.me/2014/11/02/LinkTextView-Android开源库-原创/</id>
    <published>2014-11-01T18:34:46.000Z</published>
    <updated>2016-03-20T09:03:43.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近来因为项目的缘故，仔细研究了一下如何在Android的TextView里面绑定可以点击的链接，并且定制链接的颜色，包括正常状态、按下去时的文字、背景的颜色，当然，还有点击后的回调。&lt;/p&gt;
&lt;p&gt;为了以后方便自己，也为了方便更多的人，就把这些封装成了一个简单的开源库，也算是我自己的&lt;strong&gt;&lt;em&gt;第一个开源库&lt;/em&gt;&lt;/strong&gt;吧。&lt;/p&gt;
&lt;h2 id=&quot;LinkTextView&quot;&gt;&lt;a href=&quot;#LinkTextView&quot; class=&quot;headerlink&quot; title=&quot;LinkTextView&quot;&gt;&lt;/a&gt;LinkTextView&lt;/h2&gt;&lt;p&gt;名称：&lt;a href=&quot;https://github.com/zekunyan/LinkTextView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LinkTextView&lt;/a&gt;。喜欢的话就Star一下吧。&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/LinkTextView_Sample.gif&quot; alt=&quot;示例&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;功能：&quot;&gt;&lt;a href=&quot;#功能：&quot; class=&quot;headerlink&quot; title=&quot;功能：&quot;&gt;&lt;/a&gt;功能：&lt;br&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以方便的对TextView里面的文字增加可点击链接，并且绑定回调。&lt;/li&gt;
&lt;li&gt;可以为每个链接&lt;strong&gt;单独&lt;/strong&gt;设置&lt;strong&gt;文字&lt;/strong&gt;、链接&lt;strong&gt;背景&lt;/strong&gt;的&lt;strong&gt;正常&lt;/strong&gt;、&lt;strong&gt;按下&lt;/strong&gt;状态下的颜色。&lt;/li&gt;
&lt;li&gt;可以为每个链接绑定任意类型的“附件”对象，作为点击链接时的回调参数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;讲解&quot;&gt;&lt;a href=&quot;#讲解&quot; class=&quot;headerlink&quot; title=&quot;讲解&quot;&gt;&lt;/a&gt;讲解&lt;/h2&gt;&lt;p&gt;下面分重点讲解一下。&lt;/p&gt;
&lt;h3 id=&quot;1-为文字增加可点击链接，绑定回调。&quot;&gt;&lt;a href=&quot;#1-为文字增加可点击链接，绑定回调。&quot; class=&quot;headerlink&quot; title=&quot;1. 为文字增加可点击链接，绑定回调。&quot;&gt;&lt;/a&gt;1. 为文字增加可点击链接，绑定回调。&lt;/h3&gt;&lt;p&gt;为文字增加链接，已经是老生常谈了，真是一搜一大把，不过在这里还是简单讲一下。&lt;/p&gt;
&lt;p&gt;用过TextView应该都知道这个接口：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setText&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(CharSequence text)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中CharSequence接口的子接口里面有Spannable，而由这个接口派生出来的类SpannableString，就是我们可以对TextView里面的文字做附加效果的原因。如改变颜色、增加超链接等，有兴趣的各位可以去仔细查查。下面简单的说说怎么加可点击的链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先创建SpannableString&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SpannableString text = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SpannableString(&lt;span class=&quot;string&quot;&gt;&quot;LinkTextView dadada&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绑定ClickableSpan回调&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ClickableSpan clickableSpan = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClickableSpan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//点击了链接，做你想干的事吧=。=&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text.setSpan(clickableSpan, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后再setText&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;textView.setText(text);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看，绑定可以点击的链接就是这么简单。&lt;/p&gt;
&lt;h3 id=&quot;2-改变正常、按下时的文字、链接背景颜色。&quot;&gt;&lt;a href=&quot;#2-改变正常、按下时的文字、链接背景颜色。&quot; class=&quot;headerlink&quot; title=&quot;2. 改变正常、按下时的文字、链接背景颜色。&quot;&gt;&lt;/a&gt;2. 改变正常、按下时的文字、链接背景颜色。&lt;/h3&gt;&lt;p&gt;往往系统默认的链接颜色是不能满足我们的需求的，所以最好能对链接的文字、背景的按下、松开时的颜色做定制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;但是好坑=。=，Google居然没有为ClickableSpan增加按下时的回调&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那就只好自己造轮子了。&lt;/p&gt;
&lt;h4 id=&quot;首先&quot;&gt;&lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=&quot;首先&quot;&gt;&lt;/a&gt;首先&lt;/h4&gt;&lt;p&gt;必须要能获取到链接按下时的回调，应该是onTouch什么的，于是，就查到了类：LinkMovementMethod。&lt;br&gt;在TextView中可以用方法：public final void setMovementMethod (MovementMethod movement)设定监听，而LinkMovementMethod类里面就可以监听到链接的onTouch！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LinkMovementMethod的onTouch就是介个样子的&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;	 &lt;span class=&quot;title&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextView textView, Spannable spannable, MotionEvent event)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;于是，我们可以通过event来判断是按下还是移动等等操作。&lt;br&gt;但是问题是，这里的spannable是整个TextView全部的文字，所以，只能通过event里面的x、y坐标，找到具体点击的是哪个链接。这里，要感谢stack overflow上的大神的&lt;a href=&quot;http://stackoverflow.com/questions/20856105/change-the-text-color-of-a-clickablespan-when-pressed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;帖子&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;具体的找点击链接的方法如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TouchableSpan &lt;span class=&quot;title&quot;&gt;getPressedSpan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextView textView, Spannable spannable, MotionEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取点击的x、y坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) event.getX();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) event.getY();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//减去Padding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x -= textView.getTotalPaddingLeft();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y -= textView.getTotalPaddingTop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//加上滚动的偏移&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x += textView.getScrollX();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y += textView.getScrollY();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取第几行、以及偏移&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Layout layout = textView.getLayout();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; line = layout.getLineForVertical(y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; off = layout.getOffsetForHorizontal(line, x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取真正点击的链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TouchableSpan[] link = spannable.getSpans(off, off, TouchableSpan.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TouchableSpan touchedSpan = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (link.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        touchedSpan = link[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; touchedSpan;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到此，我们已经能获取到链接的点击状态，并且捕捉到具体点击的ClickableSpan。&lt;/p&gt;
&lt;h4 id=&quot;接着&quot;&gt;&lt;a href=&quot;#接着&quot; class=&quot;headerlink&quot; title=&quot;接着&quot;&gt;&lt;/a&gt;接着&lt;/h4&gt;&lt;p&gt;就是改变链接的文字、背景颜色。&lt;/p&gt;
&lt;p&gt;ClickableSpan的方法里面，除了&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View widget)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有就是：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateDrawState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextPaint textPaint)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很明显，就是更新文字渲染效果的。我们用如下两个方法，就能实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setColor&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; color)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bgColor属性&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h4&gt;&lt;p&gt;到目前为止，我们已经可以捕捉到链接的点击状态，能获取到真正的点击的链接，还有能刷新链接的颜色了，相信聪明的你一定能自己琢磨出来，怎么样实现文章开头的效果。=v=&lt;/p&gt;
&lt;h4 id=&quot;本文参考&quot;&gt;&lt;a href=&quot;#本文参考&quot; class=&quot;headerlink&quot; title=&quot;本文参考&quot;&gt;&lt;/a&gt;本文参考&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Android官方文档。&lt;/li&gt;
&lt;li&gt;StackOverFlow的：&lt;a href=&quot;http://stackoverflow.com/questions/20856105/change-the-text-color-of-a-clickablespan-when-pressed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Change the text color of a ClickableSpan when pressed。&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近来因为项目的缘故，仔细研究了一下如何在Android的TextView里面绑定可以点击的链接，并且定制链接的颜色，包括正常状态、按下去时的文字、背景的颜色，当然，还有点击后的回调。&lt;/p&gt;
&lt;p&gt;为了以后方便自己，也为了方便更多的人，就把这些封装成了一个简单的开源库，也算是我自己的&lt;strong&gt;&lt;em&gt;第一个开源库&lt;/em&gt;&lt;/strong&gt;吧。&lt;/p&gt;
&lt;h2 id=&quot;LinkTextView&quot;&gt;&lt;a href=&quot;#LinkTextView&quot; class=&quot;headerlink&quot; title=&quot;LinkTextView&quot;&gt;&lt;/a&gt;LinkTextView&lt;/h2&gt;&lt;p&gt;名称：&lt;a href=&quot;https://github.com/zekunyan/LinkTextView&quot;&gt;LinkTextView&lt;/a&gt;。喜欢的话就Star一下吧。&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://zorrochen.qiniudn.com/LinkTextView_Sample.gif&quot; alt=&quot;示例&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://tutuge.me/categories/Android/"/>
    
    
      <category term="原创" scheme="http://tutuge.me/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Android" scheme="http://tutuge.me/tags/Android/"/>
    
      <category term="开源" scheme="http://tutuge.me/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>第一篇Blog</title>
    <link href="http://tutuge.me/2014/11/01/%E7%AC%AC%E4%B8%80%E7%AF%87Blog/"/>
    <id>http://tutuge.me/2014/11/01/第一篇Blog/</id>
    <published>2014-10-31T16:13:15.000Z</published>
    <updated>2016-03-20T09:04:10.000Z</updated>
    
    <content type="html">&lt;p&gt;拖了很久，终于开始写博客了。&lt;br&gt;一直觉得自己的知识储备不够，一直都在学习，一直都在积累。（其实就是懒好吗=。=）&lt;/p&gt;
&lt;p&gt;说点啥呢，想到啥就说啥吧~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;从小就喜欢模型、乐高积木，喜欢拆东西，印象最深的就是把家里的高级录音机拆了，装不回去，塞到了床底下。。。&lt;/p&gt;
&lt;p&gt;上了学之后，又开始捣鼓四驱车，自己做马达，绕线圈，家里零件一大堆，串联一堆电池，组装遥控车，唯一的遗憾，就是没有做成遥控飞机（没钱=、=）。&lt;/p&gt;
&lt;p&gt;接着，家里有了电脑！！！这要感谢老爹，当时花了一万多，液晶显示器，刚上市的奔腾4啊！&lt;/p&gt;
&lt;p&gt;于是，我又开始拆电脑。。。换显卡、超频，跑分，再超频，再跑分，3DMark就是俺的祖宗啊~&lt;/p&gt;
&lt;p&gt;终于，走上了&lt;strong&gt;编程&lt;/strong&gt;这条“&lt;strong&gt;不归路&lt;/strong&gt;”，义无反顾，一直到了现在。&lt;/p&gt;
&lt;p&gt;用Dev-C++折腾C语言，数据结构、算法，接着又是C++，Window API，QT（这个真觉得不错），MFC（软件课设），Java，Python，Android（上线了几个小应用，拿了Google全国大学生Android应用开发大赛华中地区三等奖），iOS（上线应用，青桔音乐），Linux，还有各种MySQL、MongoDB等数据库的纠结，看各种博客。。。&lt;/p&gt;
&lt;p&gt;每天看的很多，想的也不少，但是终究不够精通，路还很长啊~&lt;/p&gt;
&lt;p&gt;当然，最感谢的就是我的女朋友~陈因素~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;拖了很久，终于开始写博客了。&lt;br&gt;一直觉得自己的知识储备不够，一直都在学习，一直都在积累。（其实就是懒好吗=。=）&lt;/p&gt;
&lt;p&gt;说点啥呢，想到啥就说啥吧~&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="http://tutuge.me/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="杂烩" scheme="http://tutuge.me/tags/%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
</feed>
